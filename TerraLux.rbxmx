<roblox xmlns:xmime="http://www.w3.org/2005/05/xmlmime" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.roblox.com/roblox.xsd" version="4">
	<External>null</External>
	<External>nil</External>
	<Item class="Folder" referent="RBX75466A14A2B5492BBAC0AD0D3604DA04">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
			<bool name="DefinesCapabilities">false</bool>
			<string name="Name">TerraLux</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
		<Item class="Script" referent="RBXE52196431CCE4C579627423BE011AAB0">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
				<bool name="DefinesCapabilities">false</bool>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">Main</string>
				<token name="RunContext">0</token>
				<string name="ScriptGuid">{1CC8B7A4-2E4B-4B60-834B-F0BD1955AC03}</string>
				<ProtectedString name="Source"><![CDATA[-- TerraLux.main.plugin.lua
-- Layout + toolbar + DataManager + Biome/Material edit modes (comp-accurate Materials UI)

if not plugin then error("Run as a Roblox Studio Plugin.") end

-- ========= CONSTANTS =========
local TOOLBAR_H, TOOLBAR_PAD_Y, CTRL_H = 56, 8, 27
local CORNER_RADIUS = 8
local PROPERTIES_W, MIN_PREVIEW_W = 280, 320
local MIN_WIDGET_W, MIN_WIDGET_H = PROPERTIES_W + MIN_PREVIEW_W, 320

-- ========= DOCK WIDGET =========
local DockInfo = DockWidgetPluginGuiInfo.new(
	Enum.InitialDockState.Float, true, false,
	1200, 800, MIN_WIDGET_W, MIN_WIDGET_H
)
local widget = plugin:CreateDockWidgetPluginGui("TerraLux_Dock", DockInfo)
widget.Title, widget.Name = "TerraLux", "TerraLux_Dock"
widget.ZIndexBehavior = Enum.ZIndexBehavior.Global

local studioToolbar = plugin:CreateToolbar("TerraLux")
local toggleButton  = studioToolbar:CreateButton("", "", "rbxassetid://120243856670994")
toggleButton.Click:Connect(function() widget.Enabled = true end)

local propsScroll = Instance.new("ScrollingFrame")

-- ========= REQUIRE MODULES =========
local UI  = require(script:WaitForChild("UI"))
local DM  = require(script:WaitForChild("DataManager"))
local BiomeProps = require(script:WaitForChild("BiomeProps"))
local MaterialProps = require(script:WaitForChild("MaterialProps"))
local ModalConfirm = require(script.UI:WaitForChild("ModalConfirm"))
local EnvironProps = require(script:WaitForChild("EnvironProps")) 
local StampsProps  = require(script:WaitForChild("StampProps"))
local Theme = require(script:WaitForChild("UI").Theme)

UI.setCornerRadius(CORNER_RADIUS)

local biomeUI = BiomeProps.new(UI, DM, propsScroll)
local materialUI = MaterialProps.new(UI, DM, propsScroll)
local environUI = EnvironProps.new(UI, DM, propsScroll)
local stampsUI  = StampsProps.new(UI, DM, propsScroll)

-- ========= ROOT =========
local currentMode = "Biome" -- default once a biome is selected
local root = Instance.new("Frame")
root.Name = "Root"
root.BackgroundColor3 = Theme.WindowBg
root.BorderSizePixel = 0
root.Size = UDim2.fromScale(1,1)
root.Parent = widget

-- Click-off shield (closes dropdowns when visible)
local Overlay = Instance.new("TextButton")
Overlay.Name = "Overlay"
Overlay.BackgroundTransparency = 1
Overlay.AutoButtonColor = false
Overlay.Text = ""
Overlay.Visible = false
Overlay.ZIndex = 500
Overlay.Size = UDim2.fromScale(1,1)
Overlay.Parent = root

-- ========= TOOLBAR =========
local toolbar = Instance.new("Frame")
toolbar.Name = "MainToolbar"
toolbar.BackgroundColor3 = Theme.ToolbarBg
toolbar.Size = UDim2.new(1, 0, 1, 0)
toolbar.BorderSizePixel = 0
toolbar.Parent = root
toolbar.ClipsDescendants = false

local toolbarLine = Instance.new("Frame")
toolbarLine.Name = "ToolbarBottomLine"
toolbarLine.BorderSizePixel = 0
toolbarLine.BackgroundColor3 = Theme.ToolbarLine
toolbarLine.Parent = toolbar

-- Left
local leftFrame = Instance.new("Frame")
leftFrame.Name = "leftFrame"
leftFrame.BackgroundTransparency = 1
leftFrame.AnchorPoint = Vector2.new(0, 0.5)
leftFrame.Position = UDim2.new(0, 0, 0.5, 0)
leftFrame.Size = UDim2.new(0, PROPERTIES_W, 1, -(TOOLBAR_PAD_Y*2))
leftFrame.Parent = toolbar
leftFrame.ClipsDescendants = false

local leftPad = Instance.new("UIPadding")
leftPad.PaddingLeft, leftPad.PaddingRight = UDim.new(0, 8), UDim.new(0, 8)
leftPad.Parent = leftFrame

local leftList = Instance.new("UIListLayout")
leftList.FillDirection = Enum.FillDirection.Horizontal
leftList.HorizontalAlignment = Enum.HorizontalAlignment.Left
leftList.VerticalAlignment = Enum.VerticalAlignment.Center
leftList.Padding = UDim.new(0, 8)
leftList.SortOrder = Enum.SortOrder.LayoutOrder
leftList.Parent = leftFrame

-- Right
local rightFrame = Instance.new("Frame")
rightFrame.Name = "RightFrame"
rightFrame.BackgroundTransparency = 1
rightFrame.AnchorPoint = Vector2.new(0, 0.5)
rightFrame.Position = UDim2.new(0, PROPERTIES_W, 0.5, 0)
rightFrame.Size = UDim2.new(1, -PROPERTIES_W, 1, 0)
rightFrame.Parent = toolbar

local rightList = Instance.new("UIListLayout")
rightList.FillDirection = Enum.FillDirection.Horizontal
rightList.HorizontalAlignment = Enum.HorizontalAlignment.Center
rightList.VerticalAlignment = Enum.VerticalAlignment.Center
rightList.Padding = UDim.new(0, 8)
rightList.SortOrder = Enum.SortOrder.LayoutOrder
rightList.Parent = rightFrame

-- Divider
local midSep = Instance.new("Frame")
midSep.Name = "MidSeparator"
midSep.BorderSizePixel = 0
midSep.BackgroundColor3 = Theme.ToolbarLine
midSep.Parent = leftFrame

-- ===== LEFT: Biome dropdown then + icon
local DROPDOWN_W = PROPERTIES_W - (35 * 2) - 40
local BiomeDropdown = UI.ToolbarDropdown({
	Name   = "BiomeDropdown",
	Width  = DROPDOWN_W,
	Height = CTRL_H,
	Position = UDim2.new(0, 40, 0, 0),
	Text   = "No Biomes",
	Disabled = true,
})
BiomeDropdown.LayoutOrder = 1
BiomeDropdown.Parent = leftFrame

local AddBiomeBtn = UI.ToolbarButton({
	Name   = "AddBiomeButton",
	BackgroundColor = Color3.new(0, 0.670588, 1),
	Width  = 32, Height = CTRL_H,
	Icon   = "rbxassetid://115837812053156",
	Disabled = false,
})
AddBiomeBtn.LayoutOrder = 2
AddBiomeBtn.Parent = leftFrame
UI.SetDropdownEnabled(BiomeDropdown, false)

-- ===== RIGHT: mode buttons
local BtnWorld         = UI.ToolbarButton({ Name="BtnWorld",         Width=32, Height=CTRL_H, Icon="rbxassetid://99307674544588",   Disabled=false })
local BtnBiome         = UI.ToolbarButton({ Name="BtnBiome",         Width=51, Height=CTRL_H, Icon="rbxassetid://116289659968801",  Disabled=true  })
local BtnMaterials     = UI.ToolbarButton({ Name="BtnMaterials",     Width=51, Height=CTRL_H, Icon="rbxassetid://139531969002992",  Disabled=true  })
local BtnEnvironmental = UI.ToolbarButton({ Name="BtnEnvironmental", Width=51, Height=CTRL_H, Icon="rbxassetid://123608178065610",  Disabled=true  })
local BtnStamps        = UI.ToolbarButton({ Name="BtnStamps",        Width=51, Height=CTRL_H, Icon="rbxassetid://97603543316227",   Disabled=true  })
local BtnLighting      = UI.ToolbarButton({ Name="BtnLighting",      Width=51, Height=CTRL_H, Icon="rbxassetid://133213440281341",  Disabled=true  })
local BtnCaves         = UI.ToolbarButton({ Name="BtnCaves",         Width=51, Height=CTRL_H, Icon="rbxassetid://89571371677122",   Disabled=true  })

BtnWorld.LayoutOrder, midSep.LayoutOrder = 2, 2
BtnBiome.LayoutOrder, BtnMaterials.LayoutOrder, BtnEnvironmental.LayoutOrder = 3, 4, 5
BtnStamps.LayoutOrder, BtnLighting.LayoutOrder, BtnCaves.LayoutOrder = 6, 7, 8

BtnWorld.Parent = leftFrame
BtnBiome.Parent = rightFrame
BtnMaterials.Parent = rightFrame
BtnEnvironmental.Parent = rightFrame
BtnStamps.Parent = rightFrame
BtnLighting.Parent = rightFrame
BtnCaves.Parent = rightFrame
UI.SetButtonSelected(BtnWorld, true)

-- ========= BODY =========
local body = Instance.new("Frame")
body.Name = "Body"
body.BackgroundTransparency = 1
body.Parent = root

local props = Instance.new("Frame")
props.Name = "PropertiesWindow"
props.BackgroundColor3 = Theme.PropsBg
props.Parent = body
props.ZIndex = 1

local propsLine = Instance.new("Frame")
propsLine.Name = "PropsRightLine"
propsLine.BackgroundColor3 = Theme.PropsLine
propsLine.Parent = props

propsScroll.Name = "PropsScroll"
propsScroll.BackgroundTransparency = 1
propsScroll.ScrollBarThickness = 3
propsScroll.ScrollBarImageColor3 = Color3.fromRGB(190,196,206)
propsScroll.CanvasSize = UDim2.new(0,0,0,0)
propsScroll.AutomaticCanvasSize = Enum.AutomaticSize.Y
propsScroll.ScrollBarImageColor3 = Theme.ToolbarLine
propsScroll.Parent = props
propsScroll.ZIndex = 5

local propsPadding = Instance.new("UIPadding")
propsPadding.PaddingTop = UDim.new(0, 10)
propsPadding.PaddingLeft = UDim.new(0, 10)
propsPadding.PaddingBottom = UDim.new(0, 10)
propsPadding.Parent = propsScroll

local scrollTrack = Instance.new("Frame")
scrollTrack.Name = "PropsScrollTrack"
scrollTrack.AnchorPoint = Vector2.new(0,0)
scrollTrack.BackgroundColor3 = Color3.fromRGB(22,24,29)
scrollTrack.BorderSizePixel = 0
scrollTrack.ZIndex = 5
scrollTrack.Parent = props

-- make the properties list behave like the comps
local propsList = Instance.new("UIListLayout")
propsList.FillDirection = Enum.FillDirection.Vertical
propsList.HorizontalAlignment = Enum.HorizontalAlignment.Left
propsList.VerticalAlignment = Enum.VerticalAlignment.Top
propsList.Padding = UDim.new(0, 10)
propsList.SortOrder = Enum.SortOrder.LayoutOrder
propsList.Parent = propsScroll

local propsPad = Instance.new("UIPadding")
propsPad.PaddingTop = UDim.new(0, 10)
propsPad.PaddingLeft = UDim.new(0, 8)
propsPad.PaddingRight = UDim.new(0, 6)
propsPad.Parent = propsScroll

local preview = Instance.new("Frame")
preview.Name = "PreviewWindow"
preview.BackgroundColor3 = Theme.PreviewBg
preview.ClipsDescendants = true
preview.Parent = body

local previewBg = Instance.new("ImageLabel")
previewBg.Name = "BackgroundLogo"
previewBg.AnchorPoint = Vector2.new(0.5, 0.5)
previewBg.Position = UDim2.new(0.5, 0, 0.5, 0)
previewBg.BackgroundTransparency = 1
previewBg.ScaleType = Enum.ScaleType.Stretch
previewBg.Image = 'rbxassetid://120243856670994'
previewBg.Size = UDim2.new(0, 500, 0, 275)
previewBg.Parent = preview

local previewBgSizeConstraint = Instance.new("UISizeConstraint")
previewBgSizeConstraint.MaxSize = Vector2.new(500, 275)
previewBgSizeConstraint.MinSize = Vector2.new(50, 28)
previewBgSizeConstraint.Parent = previewBg

-- ========= INLINE "NEW BIOME" BAR =========
local NewBiomeBar = Instance.new("Frame")
NewBiomeBar.Name = "NewBiomeBar"
NewBiomeBar.BackgroundTransparency = 1
NewBiomeBar.Size = UDim2.fromOffset(DROPDOWN_W + 32 + 8, CTRL_H)
NewBiomeBar.Visible = false
NewBiomeBar.LayoutOrder = 1
NewBiomeBar.Parent = leftFrame

local nbLayout = Instance.new("UIListLayout")
nbLayout.FillDirection = Enum.FillDirection.Horizontal
nbLayout.Padding = UDim.new(0, 8)
nbLayout.VerticalAlignment = Enum.VerticalAlignment.Center
nbLayout.SortOrder = Enum.SortOrder.LayoutOrder
nbLayout.Parent = NewBiomeBar

local NewBiomeInput = UI.ToolbarTextInput({
	Name = "NewBiomeInput", Width = DROPDOWN_W, Height = CTRL_H, Placeholder = "Biome name...",
})
NewBiomeInput.LayoutOrder = 1
NewBiomeInput.Parent = NewBiomeBar

local NewBiomeOK = UI.ToolbarButton({
	Name = "NewBiomeOK", Width = 42, Height = CTRL_H, Text = "OK", Disabled = false, TextAlign = "Center"
})
NewBiomeOK.LayoutOrder = 2
NewBiomeOK.Parent = NewBiomeBar

local NewBiomeCancel = UI.ToolbarButton({
	Name = "NewBiomeCancel", Width = 72, Height = CTRL_H, Text = "Cancel", Disabled = false, TextAlign = "Center"
})
NewBiomeCancel.LayoutOrder = 3
NewBiomeCancel.Parent = NewBiomeBar

-- build empty shells (they'll populate after DM.Init)
biomeUI:build()
materialUI:build()
environUI:build()

-- ========= HELPERS =========
local function showMode(mode)
	currentMode = mode
	UI.SetButtonSelected(BtnBiome,          mode == "Biome")
	UI.SetButtonSelected(BtnMaterials,      mode == "Materials")
	UI.SetButtonSelected(BtnWorld,          mode == "World")
	UI.SetButtonSelected(BtnEnvironmental,  mode == "Environmental")
	UI.SetButtonSelected(BtnStamps,         mode == "Stamps") -- NEW

	for _, ch in ipairs(propsScroll:GetChildren()) do
		if ch:IsA("Frame") then
			local tag = ch:GetAttribute("CardMode")
			if tag then
				ch.Visible = (tag == mode)
			end
		end
	end

	-- NEW: lazy init/refresh when entering Stamps
	if mode == "Stamps" then
		stampsUI:build()
		stampsUI:loadFromDM()
	end
end


-- hide all properties (true “no biomes” state)
local function hideAllPropertyCards()
	for _, ch in ipairs(propsScroll:GetChildren()) do
		if ch:IsA("Frame") then
			local tag = ch:GetAttribute("CardMode")
			if tag then ch.Visible = false end
		end
	end
end

-- ========= LAYOUT =========
local function relayout()
	local wSize = root.AbsoluteSize
	toolbar.Position = UDim2.fromOffset(0, 0)
	toolbar.Size     = UDim2.fromOffset(wSize.X, TOOLBAR_H)
	toolbarLine.Position = UDim2.fromOffset(0, TOOLBAR_H-1)
	toolbarLine.Size     = UDim2.fromOffset(wSize.X, 1)

	local sepH = TOOLBAR_H - ((TOOLBAR_PAD_Y / 2) * 6)
	midSep.Size     = UDim2.fromOffset(2, sepH)
	midSep.Position = UDim2.fromOffset(0, TOOLBAR_PAD_Y)

	local bodyH = math.max(0, wSize.Y - TOOLBAR_H)
	body.Position = UDim2.fromOffset(0, TOOLBAR_H)
	body.Size     = UDim2.fromOffset(wSize.X, bodyH)

	local propsW = PROPERTIES_W
	props.Position = UDim2.fromOffset(0, 0)
	props.Size     = UDim2.fromOffset(propsW, bodyH)
	propsLine.Position = UDim2.fromOffset(propsW-1, 0)
	propsLine.Size     = UDim2.fromOffset(1, bodyH)
	propsScroll.Position = UDim2.fromOffset(0, 0)
	propsScroll.Size     = UDim2.fromOffset(propsW-1, bodyH)

	local previewX = math.max(MIN_PREVIEW_W, wSize.X - propsW)
	preview.Position = UDim2.fromOffset(propsW, 0)
	preview.Size     = UDim2.fromOffset(previewX, bodyH)

	Overlay.Position = UDim2.fromOffset(0, 0)
	Overlay.Size     = UDim2.fromOffset(wSize.X, wSize.Y)
	Overlay.ZIndex = 1

	scrollTrack.Position = UDim2.new(1, 0, 0, 0)
	scrollTrack.Size = UDim2.new(0, propsScroll.ScrollBarThickness, 1, 0)
end
leftFrame:GetPropertyChangedSignal("AbsoluteSize"):Connect(relayout)
rightFrame:GetPropertyChangedSignal("AbsoluteSize"):Connect(relayout)
root:GetPropertyChangedSignal("AbsoluteSize"):Connect(relayout)
widget:GetPropertyChangedSignal("AbsoluteSize"):Connect(relayout)

-- ========= DATA & UI SYNC =========
local function setModeButtonsEnabled(enabled)
	UI.SetButtonEnabled(BtnWorld,         enabled) -- disable World too when no biome
	UI.SetButtonEnabled(BtnBiome,         enabled)
	UI.SetButtonEnabled(BtnMaterials,     enabled)
	UI.SetButtonEnabled(BtnEnvironmental, enabled)
	UI.SetButtonEnabled(BtnStamps,        enabled)
	UI.SetButtonEnabled(BtnLighting,      enabled)
	UI.SetButtonEnabled(BtnCaves,         enabled)
end

local function postDeleteSelectFallback()
	local names = DM.ListBiomes()
	if #names > 0 then
		DM.SelectBiome(names[1])
	end
end

local function applySelectionStateAfterChange()
	local selected = DM.GetSelectedBiome()
	if selected then
		UI.SetDropdownEnabled(BiomeDropdown, true)
		UI.SetDropdownText(BiomeDropdown, selected)
		setModeButtonsEnabled(true)
		biomeUI:loadFromDM()
		materialUI:loadFromDM()
		environUI:loadFromDM()
		showMode("Biome")
	else
		UI.SetDropdownEnabled(BiomeDropdown, false)
		UI.SetDropdownText(BiomeDropdown, "No Biomes")
		setModeButtonsEnabled(false)
		hideAllPropertyCards()
	end
end

local function rebuildBiomeDropdown()
	local names = DM.ListBiomes()
	UI.BuildDropdownListWithDelete(BiomeDropdown, names,
		-- onSelect
		function(name)
			DM.SelectBiome(name)
			UI.SetDropdownText(BiomeDropdown, name)
			UI.SetDropdownOpen(BiomeDropdown, false)
			Overlay.Visible = false
			setModeButtonsEnabled(true)
			biomeUI:loadFromDM()
			materialUI:loadFromDM()
			environUI:loadFromDM()
			showMode("Biome")
		end,
		-- onDelete
		function(name)
			ModalConfirm.Show(root, {
				title = "Delete Biome",
				message = ("Are you sure you want to delete “%s”? This cannot be undone."):format(name),
				okText = "Delete",
				cancelText = "Cancel",
				primaryIsDestructive = true,
				onConfirm = function()
					DM.DeleteBiome(name)
					postDeleteSelectFallback()
					rebuildBiomeDropdown()
					applySelectionStateAfterChange()
					UI.SetDropdownOpen(BiomeDropdown, false)
					Overlay.Visible = false
				end,
				onCancel = function() end,
			})
		end
	)
end

local function refreshBiomeUIFromData()
	local ok, state = DM.Init(plugin)
	if not ok then
		warn("DataManager init failed:", state)
		UI.SetDropdownEnabled(BiomeDropdown, false)
		setModeButtonsEnabled(false)
		return
	end

	rebuildBiomeDropdown()
	applySelectionStateAfterChange()
end

-- ========= ADD BIOME UX =========
local function showNewBiomeBar(show)
	NewBiomeBar.Visible = show
	BiomeDropdown.Visible = not show
	AddBiomeBtn.Visible = not show

	-- Hide mid divider & World button while inline create UI is up
	midSep.Visible = not show
	BtnWorld.Visible = not show

	if show then UI.FocusInput(NewBiomeInput) end
end

local function trim(s)
	if not s then return "" end
	s = string.gsub(s, "^%s+", "")
	s = string.gsub(s, "%s+$", "")
	return s
end

local function flashInvalid(frame)
	local stroke = frame:FindFirstChildOfClass("UIStroke")
	if not stroke then return end
	local old = stroke.Color
	stroke.Color = Color3.fromRGB(200, 70, 70)
	task.delay(0.15, function() stroke.Color = old end)
end

local function tryCreateBiome()
	local name = trim(UI.GetInputText(NewBiomeInput))
	if name == "" or name:lower() == "biome name..." then
		flashInvalid(NewBiomeInput) ; return
	end
	if DM.BiomeExists(name) then
		flashInvalid(NewBiomeInput) ; return
	end

	local ok, err = DM.CreateBiome(name)
	if not ok then warn("CreateBiome failed:", err) ; flashInvalid(NewBiomeInput) ; return end

	DM.SelectBiome(name)
	rebuildBiomeDropdown()
	UI.SetDropdownEnabled(BiomeDropdown, true)
	UI.SetDropdownText(BiomeDropdown, name)
	setModeButtonsEnabled(true)
	showNewBiomeBar(false)
	-- Clear input so the next time it's empty
	local inputBox = NewBiomeInput:FindFirstChild("Input")
	if inputBox and inputBox:IsA("TextBox") then
		inputBox.Text = ""
	end

	biomeUI:loadFromDM()
	materialUI:loadFromDM()
	environUI:loadFromDM()
	showMode("Biome")
end

-- Hookups
do
	local addClick = AddBiomeBtn:FindFirstChild("ClickArea")
	if addClick and addClick:IsA("TextButton") then
		addClick.MouseButton1Click:Connect(function() showNewBiomeBar(true) end)
	end

	local okClick = NewBiomeOK:FindFirstChild("ClickArea")
	if okClick and okClick:IsA("TextButton") then
		okClick.MouseButton1Click:Connect(tryCreateBiome)
	end

	local cancelClick = NewBiomeCancel:FindFirstChild("ClickArea")
	if cancelClick and cancelClick:IsA("TextButton") then
		cancelClick.MouseButton1Click:Connect(function()
			showNewBiomeBar(false)
			-- Clear any previously typed name on cancel as well
			local inputBox = NewBiomeInput:FindFirstChild("Input")
			if inputBox and inputBox:IsA("TextBox") then
				inputBox.Text = ""
			end
		end)
	end

	local inputBox = NewBiomeInput:FindFirstChild("Input")
	if inputBox and inputBox:IsA("TextBox") then
		inputBox.FocusLost:Connect(function(enterPressed)
			if enterPressed then tryCreateBiome() end
		end)
	end

	-- Dropdown open/close
	local ddClick = BiomeDropdown:FindFirstChild("ClickArea")
	if ddClick and ddClick:IsA("TextButton") then
		ddClick.MouseButton1Click:Connect(function()
			if not BiomeDropdown:GetAttribute("Enabled") then return end
			rebuildBiomeDropdown()
			local holder = BiomeDropdown:FindFirstChild("ListHolder")
			local willOpen = not (holder and holder.Visible)
			UI.SetDropdownOpen(BiomeDropdown, willOpen)
			Overlay.Visible = willOpen
		end)
	end

	local biomeClick = BtnBiome:FindFirstChild("ClickArea")
	if biomeClick and biomeClick:IsA("TextButton") then
		biomeClick.MouseButton1Click:Connect(function()
			if DM.GetSelectedBiome() then showMode("Biome") end
		end)
	end

	local matClick = BtnMaterials:FindFirstChild("ClickArea")
	if matClick and matClick:IsA("TextButton") then
		matClick.MouseButton1Click:Connect(function()
			if DM.GetSelectedBiome() then showMode("Materials") end
		end)
	end

	Overlay.MouseButton1Click:Connect(function()
		UI.SetDropdownOpen(BiomeDropdown, false)
		Overlay.Visible = false
	end)
	
	local envClick = BtnEnvironmental:FindFirstChild("ClickArea")
	if envClick and envClick:IsA("TextButton") then
		envClick.MouseButton1Click:Connect(function()
			if DM.GetSelectedBiome() then showMode("Environmental") end
		end)
	end
	
	local stampsClick = BtnStamps:FindFirstChild("ClickArea")
	if stampsClick and stampsClick:IsA("TextButton") then
		stampsClick.MouseButton1Click:Connect(function()
			if DM.GetSelectedBiome() then showMode("Stamps") end
		end)
	end
end

-- ========= FIRST LAYOUT + DATA LOAD =========
relayout()
refreshBiomeUIFromData()

-- ========= EXPORT =========
return {
	Widget   = widget,
	Root     = root,
	Toolbar  = toolbar,
	Props    = props,
	PropsScroll = propsScroll,
	Preview  = preview,
	Theme    = Theme,
	Elements = {
		BiomeDropdown   = BiomeDropdown,
		AddBiomeButton  = AddBiomeBtn,
		NewBiomeBar     = NewBiomeBar,
		Buttons = {
			World = BtnWorld, Biome = BtnBiome, Materials = BtnMaterials,
			Environmental = BtnEnvironmental, Stamps = BtnStamps,
			Lighting = BtnLighting, Caves = BtnCaves,
		},
	},
	Constants = { TOOLBAR_H = TOOLBAR_H, PROPERTIES_W = PROPERTIES_W }
}
]]></ProtectedString>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
			<Item class="ModuleScript" referent="RBX91D180815BED4CF19C0D93B5D858CB85">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">UI</string>
					<string name="ScriptGuid">{1DECB1AF-A72C-449A-B4B9-72915678B2F3}</string>
					<ProtectedString name="Source"><![CDATA[-- UI (ModuleScript)
-- Controls + functional dropdown list. Safe APIs; no custom methods added to Instances.
local Theme = require(script.Theme)
local UI = {}
local CORNER = 8
function UI.setCornerRadius(px) CORNER = px or CORNER end

-- ===== Utilities =====
local function corner(inst, radius)
	local c = Instance.new("UICorner")
	c.CornerRadius = UDim.new(0, radius or CORNER)
	c.Parent = inst
	return c
end
local function stroke(inst)
	local s = Instance.new("UIStroke")
	s.Thickness = 1
	s.Color = Theme.ControlBorder
	s.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
	s.Parent = inst
	return s
end
local function getStroke(frame)
	for _, ch in ipairs(frame:GetChildren()) do
		if ch:IsA("UIStroke") then return ch end
	end
	return nil
end
local function isSelected(frame) return frame:GetAttribute("Selected") == true end

-- ===== Button styling =====
local function styleButton(holder, label, click, enabled, selected)
	holder.Active, click.Active = enabled, enabled
	if not enabled then
		holder.BackgroundColor3 = (holder.Name == "AddBiomeButton") and Theme.ControlBgBlueDisabled or Theme.ControlBgDisabled
		if label then label.TextColor3 = Theme.ControlTextDisabled label.TextTransparency = 0.1 end
	else
		if selected then
			holder.BackgroundColor3 = (holder.Name == "AddBiomeButton") and Theme.ControlBgBlueActive or Theme.ControlBgActive
		else
			holder.BackgroundColor3 = (holder.Name == "AddBiomeButton") and Theme.ControlBgBlue or Theme.ControlBg
		end
		if label then label.TextColor3 = Theme.ControlText label.TextTransparency = 0 end
	end
	holder:SetAttribute("Enabled", enabled)
	holder:SetAttribute("Selected", selected)
end

-- ===== Public APIs =====
function UI.SetButtonEnabled(btnFrame, enabled)
	local label = btnFrame:FindFirstChild("TextLabel")
	local click = btnFrame:FindFirstChild("ClickArea")
	if not click then return end
	styleButton(btnFrame, label and label:IsA("TextLabel") and label or nil, click, enabled and true or false, isSelected(btnFrame))
end
function UI.SetButtonSelected(btnFrame, selected)
	local label = btnFrame:FindFirstChild("TextLabel")
	local click = btnFrame:FindFirstChild("ClickArea")
	if not click then return end
	styleButton(btnFrame, label and label:IsA("TextLabel") and label or nil, click, btnFrame:GetAttribute("Enabled") ~= false, selected and true or false)
end

function UI.SetDropdownText(dropdownFrame, text)
	local label = dropdownFrame:FindFirstChild("Value")
	if label and label:IsA("TextLabel") then label.Text = text or "" end
end
function UI.SetDropdownEnabled(dropdownFrame, enabled)
	local label = dropdownFrame:FindFirstChild("Value")
	local chev  = dropdownFrame:FindFirstChild("Chevron")
	local click = dropdownFrame:FindFirstChild("ClickArea")
	if click and click:IsA("TextButton") then click.Active = enabled and true or false end
	dropdownFrame.Active = enabled and true or false
	if enabled then
		dropdownFrame.BackgroundColor3 = Theme.ControlBg
		if label then label.TextColor3 = Theme.ControlText label.TextTransparency = 0 end
		if chev then chev.TextColor3 = Theme.ControlText chev.TextTransparency = 0 end
	else
		dropdownFrame.BackgroundColor3 = Theme.ControlBgDisabled
		if label then label.TextColor3 = Theme.ControlTextDisabled label.TextTransparency = 0.1 end
		if chev then chev.TextColor3 = Theme.ControlTextDisabled chev.TextTransparency = 0.1 end
	end
	local st = getStroke(dropdownFrame)
	if st then st.Color = Theme.ControlBorder end
	dropdownFrame:SetAttribute("Enabled", enabled and true or false)
end

function UI.SetDropdownOpen(dropdownFrame, open)
	local holder = dropdownFrame:FindFirstChild("ListHolder")
	if holder then holder.Visible = open and true or false end
end

function UI.GetInputText(inputFrame)
	local tb = inputFrame:FindFirstChild("Input")
	return (tb and tb:IsA("TextBox") and tb.Text) or ""
end
function UI.FocusInput(inputFrame)
	local tb = inputFrame:FindFirstChild("Input")
	if tb and tb:IsA("TextBox") then tb:CaptureFocus() end
end

-- ===== Controls =====
function UI.ToolbarButton(props)
	local name     = props.Name or "ToolbarButton"
	local width    = props.Width or 100
	local height   = props.Height or 36
	local text     = props.Text
	local image    = props.Icon
	local disabled = props.Disabled == true
	local backgroundColor = props.BackgroundColor or Theme.ControlBg
	local align    = tostring(props.TextAlign or "Left")

	local holder = Instance.new("Frame")
	holder.Name = name
	holder.Size = UDim2.fromOffset(width, height)
	holder.BackgroundColor3 = backgroundColor
	holder.BorderSizePixel = 0
	corner(holder, CORNER) ; stroke(holder)
	holder:SetAttribute("role", "button")

	local click = Instance.new("TextButton")
	click.Name = "ClickArea"
	click.BackgroundTransparency = 1
	click.Text = ""
	click.AutoButtonColor = false
	click.Size = UDim2.fromScale(1,1)
	click.Parent = holder

	local label
	if text then
		label = Instance.new("TextLabel")
		label.Name = "TextLabel"
		label.BackgroundTransparency = 1
		label.Size = UDim2.new(1, 0, 1, 0)
		label.AnchorPoint = Vector2.new(.5, 0)
		label.Position = UDim2.new(0.5, 0)
		label.TextXAlignment = (align == "Center") and Enum.TextXAlignment.Center or Enum.TextXAlignment.Left
		label.TextYAlignment = Enum.TextYAlignment.Center
		label.Font = Enum.Font.Gotham
		label.TextSize = 16
		label.TextColor3 = Theme.ControlText
		label.Text = text
		label.Parent = holder
	end

	if image then
		local icon = Instance.new("ImageLabel")
		icon.Name = name.."Icon"
		icon.AnchorPoint = Vector2.new(0.5, 0)
		icon.BackgroundTransparency = 1
		icon.Position = UDim2.new(0.5, 0)
		icon.ScaleType = Enum.ScaleType.Fit
		icon.Image = image
		icon.Size = UDim2.new(0, 23, 1, 0)
		icon.Parent = holder
	end

	holder.MouseEnter:Connect(function()
		if holder:GetAttribute("Enabled") and not isSelected(holder) then
			holder.BackgroundColor3 = (holder.Name == "AddBiomeButton") and Theme.ControlBgBlueActive or Theme.ControlBgHover
		end
	end)
	holder.MouseLeave:Connect(function()
		if holder:GetAttribute("Enabled") and not isSelected(holder) then
			holder.BackgroundColor3 = (holder.Name == "AddBiomeButton") and Theme.ControlBgBlue or Theme.ControlBg
		end
	end)
	click.MouseButton1Down:Connect(function()
		if holder:GetAttribute("Enabled") and not isSelected(holder) then
			holder.BackgroundColor3 = (holder.Name == "AddBiomeButton") and Theme.ControlBgBlueActive or Theme.ControlBgActive
		end
	end)
	click.MouseButton1Up:Connect(function()
		if holder:GetAttribute("Enabled") and not isSelected(holder) then
			holder.BackgroundColor3 = (holder.Name == "AddBiomeButton") and Theme.ControlBgBlueActive or Theme.ControlBgHover
		end
	end)

	styleButton(holder, label, click, not disabled, false)
	return holder
end

function UI.Separator(props)
	local vertical = props.Vertical ~= false
	local length = props.Length or 40
	local f = Instance.new("Frame")
	f.Name = vertical and "SeparatorV" or "SeparatorH"
	f.BackgroundTransparency = 1
	f.Size = vertical and UDim2.fromOffset(8, length) or UDim2.fromOffset(length, 8)

	local line = Instance.new("Frame")
	line.Name = "Line"
	line.BorderSizePixel = 0
	line.BackgroundColor3 = Theme.ToolbarLine
	line.AnchorPoint = Vector2.new(0.5, 0.5)
	line.Parent = f
	line.Position = UDim2.fromScale(0.5, 0.5)
	line.Size = vertical and UDim2.fromOffset(1, length) or UDim2.fromOffset(length, 1)
	return f
end

-- Functional dropdown
function UI.ToolbarDropdown(props)
	local name     = props.Name or "ToolbarDropdown"
	local width    = props.Width or 220
	local height   = props.Height or 36
	local text     = props.Text or "Select"
	local position = props.Position or UDim2.new(0, 0, 0, 0)
	local disabled = props.Disabled == true

	local holder = Instance.new("Frame")
	holder.Name = name
	holder.ZIndex = 80
	holder.Size = UDim2.fromOffset(width, height)
	holder.BackgroundColor3 = Theme.ControlBg
	holder.BorderSizePixel = 0
	holder.ClipsDescendants = false
	holder.Position = position
	corner(holder, CORNER) ; stroke(holder)
	holder:SetAttribute("role", "dropdown")

	local padding = Instance.new("UIPadding")
	padding.PaddingLeft, padding.PaddingRight = UDim.new(0, 10), UDim.new(0, 10)
	padding.Parent = holder

	local label = Instance.new("TextLabel")
	label.Name = "Value"
	label.BackgroundTransparency = 1
	label.TextXAlignment = Enum.TextXAlignment.Left
	label.TextYAlignment = Enum.TextYAlignment.Center
	label.Font = Enum.Font.GothamMedium
	label.TextSize = 16
	label.Text = text
	label.TextColor3 = Theme.ControlText
	label.Size = UDim2.new(1, -24, 1, 0)
	label.Parent = holder
	label.ZIndex = 80

	local chev = Instance.new("TextLabel")
	chev.Name = "Chevron"
	chev.BackgroundTransparency = 1
	chev.Size = UDim2.fromOffset(20, height)
	chev.Position = UDim2.new(1, -15, 0, 0)
	chev.TextXAlignment = Enum.TextXAlignment.Center
	chev.TextYAlignment = Enum.TextYAlignment.Center
	chev.Font = Enum.Font.Gotham
	chev.TextSize = 16
	chev.Text = "▼"
	chev.TextColor3 = Theme.ControlText
	chev.Parent = holder
	chev.ZIndex = 80

	-- Click area
	local click = Instance.new("TextButton")
	click.Name = "ClickArea"
	click.BackgroundTransparency = 1
	click.Text = ""
	click.AutoButtonColor = false
	click.Size = UDim2.fromScale(1,1)
	click.ZIndex = 90
	click.Parent = holder

	-- List container (scrollable)
	local listHolder = Instance.new("Frame")
	listHolder.Name = "ListHolder"
	listHolder.Visible = false
	listHolder.ZIndex = 100
	listHolder.BackgroundColor3 = Theme.ControlBg
	listHolder.BorderSizePixel = 0
	listHolder.Position = UDim2.new(0, -10, 1, 4)
	listHolder.Size = UDim2.fromOffset(width, math.max(140, height * 4))
	corner(listHolder, CORNER) ; stroke(listHolder)
	listHolder.Parent = holder

	local listScroll = Instance.new("ScrollingFrame")
	listScroll.Name = "ListScroll"
	listScroll.BackgroundTransparency = 1
	listScroll.BorderSizePixel = 0
	listScroll.CanvasSize = UDim2.new(0,0,0,0)
	listScroll.AutomaticCanvasSize = Enum.AutomaticSize.Y
	listScroll.ScrollBarThickness = 6
	listScroll.Size = UDim2.fromScale(1,1)
	listScroll.Parent = listHolder
	listScroll.ZIndex = 101

	local listLayout = Instance.new("UIListLayout")
	listLayout.FillDirection = Enum.FillDirection.Vertical
	listLayout.HorizontalAlignment = Enum.HorizontalAlignment.Left
	listLayout.VerticalAlignment = Enum.VerticalAlignment.Top
	listLayout.Padding = UDim.new(0, 2)
	listLayout.Parent = listScroll

	-- Hover visuals for holder only when enabled
	holder.MouseEnter:Connect(function()
		if holder:GetAttribute("Enabled") then holder.BackgroundColor3 = Theme.ControlBgHover end
	end)
	holder.MouseLeave:Connect(function()
		if holder:GetAttribute("Enabled") then holder.BackgroundColor3 = Theme.ControlBg end
	end)

	UI.SetDropdownEnabled(holder, not disabled)
	return holder
end

-- Build/refresh dropdown rows (simple)
function UI.BuildDropdownList(dropdownFrame, items, onSelect)
	local holder = dropdownFrame:FindFirstChild("ListHolder")
	local scroll = holder and holder:FindFirstChild("ListScroll")
	if not (holder and scroll) then return end

	for _, ch in ipairs(scroll:GetChildren()) do
		if ch:IsA("TextButton") or ch:IsA("Frame") then ch:Destroy() end
	end

	local ROW_H = 26
	for _, name in ipairs(items) do
		local row = Instance.new("TextButton")
		row.Name = "Item_"..name
		row.BackgroundColor3 = Theme.ControlBg
		row.AutoButtonColor = false
		row.TextXAlignment = Enum.TextXAlignment.Left
		row.TextYAlignment = Enum.TextYAlignment.Center
		row.Font = Enum.Font.Gotham
		row.TextSize = 14
		row.TextColor3 = Theme.ControlText
		row.Text = "  "..name
		row.Size = UDim2.new(1, -4, 0, ROW_H)
		row.Parent = scroll
		row.ZIndex = 102

		row.MouseEnter:Connect(function() row.BackgroundColor3 = Theme.ControlBgHover end)
		row.MouseLeave:Connect(function() row.BackgroundColor3 = Theme.ControlBg end)
		row.MouseButton1Click:Connect(function()
			if onSelect then onSelect(name) end
		end)
	end

	local count = #items
	local maxHeight = math.min(200, (ROW_H + 2) * math.max(1, count))
	holder.Size = UDim2.fromOffset(math.max(120, dropdownFrame.AbsoluteSize.X), maxHeight)
end

-- Build dropdown rows with a trailing delete (X) button on the right.
function UI.BuildDropdownListWithDelete(dropdownFrame, items, onSelect, onDelete)
	local holder = dropdownFrame:FindFirstChild("ListHolder")
	local scroll = holder and holder:FindFirstChild("ListScroll")
	if not (holder and scroll) then return end

	for _, ch in ipairs(scroll:GetChildren()) do
		if ch:IsA("TextButton") or ch:IsA("Frame") then ch:Destroy() end
	end

	local ROW_H = 26
	for _, name in ipairs(items) do
		local row = Instance.new("Frame")
		row.Name = "Item_"..name
		row.BackgroundTransparency = 1
		row.Size = UDim2.new(1, -4, 0, ROW_H)
		row.ZIndex = 102
		row.ClipsDescendants = false
		row.Parent = scroll

		local bg = Instance.new("TextButton")
		bg.Name = "SelectArea"
		bg.Text = "  "..name
		bg.Font = Enum.Font.Gotham
		bg.TextSize = 14
		bg.TextXAlignment = Enum.TextXAlignment.Left
		bg.TextYAlignment = Enum.TextYAlignment.Center
		bg.TextColor3 = Theme.ControlText
		bg.AutoButtonColor = false
		bg.BorderSizePixel = 0
		bg.Size = UDim2.new(1, -34, 1, 0)
		bg.BackgroundColor3 = Theme.ControlBg
		bg.Parent = row
		bg.ZIndex = 102
		bg.MouseEnter:Connect(function() bg.BackgroundColor3 = Theme.ControlBgHover end)
		bg.MouseLeave:Connect(function() bg.BackgroundColor3 = Theme.ControlBg end)
		bg.MouseButton1Click:Connect(function()
			if onSelect then onSelect(name) end
		end)

		local del = Instance.new("TextButton")
		del.Name = "Delete"
		del.Text = "–"
		del.Font = Enum.Font.GothamBold
		del.TextSize = 14
		del.TextColor3 = Color3.fromRGB(240,240,240)
		del.AutoButtonColor = false
		del.BorderSizePixel = 0
		del.Size = UDim2.fromOffset(20, 20)
		del.AnchorPoint = Vector2.new(1,0.5)
		del.Position = UDim2.new(1, 0, 0.5, 0)
		del.BackgroundColor3 = Color3.fromRGB(232, 58, 68)
		del.Parent = row
		del.ZIndex = 200
		corner(del, 4)

		del.MouseEnter:Connect(function() del.BackgroundColor3 = Color3.fromRGB(200, 58, 67) end)
		del.MouseLeave:Connect(function() del.BackgroundColor3 = Color3.fromRGB(232, 58, 68) end)
		del.MouseButton1Click:Connect(function()
			if onDelete then onDelete(name) end
		end)
	end

	local count = #items
	local maxHeight = math.min(200, (ROW_H + 2) * math.max(1, count))
	holder.Size = UDim2.fromOffset(math.max(120, dropdownFrame.AbsoluteSize.X), maxHeight)
end

-- Dropdown-styled text input (with safe long-text behavior)
function UI.ToolbarTextInput(props)
	local name   = props.Name or "ToolbarTextInput"
	local width  = props.Width or 220
	local height = props.Height or 36
	local placeholder = props.Placeholder or ""

	local holder = Instance.new("Frame")
	holder.Name = name
	holder.Size = UDim2.fromOffset(width, height)
	holder.BackgroundColor3 = Theme.ControlBg
	holder.BorderSizePixel = 0
	holder.ClipsDescendants = true
	corner(holder, CORNER) ; stroke(holder)

	local pad = Instance.new("UIPadding")
	pad.PaddingLeft, pad.PaddingRight = UDim.new(0, 10), UDim.new(0, 10)
	pad.Parent = holder

	local input = Instance.new("TextBox")
	input.Name = "Input"
	input.BackgroundTransparency = 1
	input.ClearTextOnFocus = false
	input.TextXAlignment = Enum.TextXAlignment.Left
	input.TextYAlignment = Enum.TextYAlignment.Center
	input.Font = Enum.Font.Gotham
	input.TextSize = 16
	input.Text = ""
	input.PlaceholderText = placeholder
	input.PlaceholderColor3 = Theme.ControlTextDisabled
	input.TextColor3 = Theme.ControlText
	input.TextTruncate = Enum.TextTruncate.AtEnd
	input.Size = UDim2.fromScale(1, 1)
	input.Parent = holder

	-- web-like long text: show while focused, ellipsis on blur
	input.Focused:Connect(function() input.TextTruncate = Enum.TextTruncate.None end)
	input.FocusLost:Connect(function() input.TextTruncate = Enum.TextTruncate.AtEnd end)

	holder.MouseEnter:Connect(function() holder.BackgroundColor3 = Theme.ControlBgHover end)
	holder.MouseLeave:Connect(function() holder.BackgroundColor3 = Theme.ControlBg end)

	return holder
end

----------------------------------------------------------------
-- ========== PROPERTY CARDS / ROWS / FIELDS ===========
----------------------------------------------------------------
-- New: opts.OnToggle(card, expanded) for state memory, and opts.Expanded initial.
function UI.PropertyCard(opts)
	local title   = opts.Title or "Card"
	local cardKey = opts.CardKey or title
	local modeTag = opts.ModeTag or "Biome"
	local expanded = (opts.Expanded == true) -- default false when nil
	local onToggle = opts.OnToggle

	local card = Instance.new("Frame")
	card.Name = "Card_" .. cardKey
	card.BackgroundTransparency = 1
	card.BorderSizePixel = 0
	card.AutomaticSize = Enum.AutomaticSize.Y
	card.Size = UDim2.new(1, -12, 0, 0)
	card.ZIndex = 1
	card:SetAttribute("CardMode", modeTag)
	card:SetAttribute("CardKey", cardKey)
	local c = Instance.new("UICorner"); c.CornerRadius = UDim.new(0, 8); c.Parent = card
	local st = Instance.new("UIStroke"); st.Thickness = 1; st.Color = Theme.ControlBorder; st.Parent = card

	local header = Instance.new("Frame")
	header.Name = "Header"
	header.BackgroundColor3 = Theme.ControlBgHover
	header.BorderSizePixel = 0
	header.Size = UDim2.new(1, 0, 0, 32)
	header.Position = UDim2.fromOffset(4, 0)
	header.ZIndex = 2
	header.Parent = card
	local hc = Instance.new("UICorner"); hc.CornerRadius = UDim.new(0, 6); hc.Parent = header

	local pad = Instance.new("UIPadding")
	pad.PaddingLeft = UDim.new(0, 10); pad.PaddingRight = UDim.new(0, 10)
	pad.Parent = header

	local titleLbl = Instance.new("TextLabel")
	titleLbl.Name = "Title"
	titleLbl.BackgroundTransparency = 1
	titleLbl.Font = Enum.Font.GothamMedium
	titleLbl.TextSize = 14
	titleLbl.TextColor3 = Theme.ControlText
	titleLbl.TextXAlignment = Enum.TextXAlignment.Left
	titleLbl.AnchorPoint = Vector2.new(0, 0.5)
	titleLbl.Position = UDim2.new(0, 10, 0.5, 0)
	titleLbl.Size = UDim2.new(1, -40, 1, 0)
	titleLbl.Text = title
	titleLbl.ZIndex = 3
	titleLbl.Parent = header

	local chevron = Instance.new("TextButton")
	chevron.Name = "Chevron"
	chevron.BackgroundTransparency = 1
	chevron.AutoButtonColor = false
	chevron.Text = expanded and "▼" or "▲"
	chevron.Font = Enum.Font.Gotham
	chevron.TextSize = 18
	chevron.TextColor3 = Theme.ControlText
	chevron.AnchorPoint = Vector2.new(1, 0.5)
	chevron.Position = UDim2.new(1, -8, 0.5, 0)
	chevron.Size = UDim2.fromOffset(20, 20)
	chevron.ZIndex = 3
	chevron.Parent = header

	local headerHit = Instance.new("TextButton")
	headerHit.Name = "HeaderHit"
	headerHit.BackgroundTransparency = 1
	headerHit.AutoButtonColor = false
	headerHit.Text = ""
	headerHit.Size = UDim2.fromScale(1,1)
	headerHit.ZIndex = 4
	headerHit.Parent = header

	local content = Instance.new("Frame")
	content.Name = "Content"
	content.BackgroundTransparency = 0
	content.BackgroundColor3 = Theme.ControlBg
	content.ClipsDescendants = true	
	content.AutomaticSize = Enum.AutomaticSize.Y
	content.Size = UDim2.new(1, 0, 0, 0)
	content.Position = UDim2.fromOffset(4, 0)
	content.ZIndex = 1
	content.Parent = card
	
	local contentPad = Instance.new("UIPadding")
	contentPad.PaddingTop = UDim.new(0, 40); 
	contentPad.PaddingBottom = UDim.new(0, 10)
	contentPad.PaddingLeft = UDim.new(0, 5)
	contentPad.PaddingRight = UDim.new(0, 5)
	contentPad.Parent = content	
	
	local contentCorners = Instance.new("UICorner")
	contentCorners.CornerRadius = UDim.new(0, 10)
	contentCorners.Parent = content		

	local contentList = Instance.new("UIListLayout")
	contentList.FillDirection = Enum.FillDirection.Vertical
	contentList.Padding = UDim.new(0, 6)
	contentList.SortOrder = Enum.SortOrder.LayoutOrder
	contentList.Parent = content

	local function setExpanded(on)
		content.Visible = on
		chevron.Text = on and "▼" or "▲"
		card:SetAttribute("Expanded", on)
		if onToggle then pcall(onToggle, card, on) end
	end
	setExpanded(expanded)

	chevron.MouseButton1Click:Connect(function() setExpanded(not content.Visible) end)
	headerHit.MouseButton1Click:Connect(function() setExpanded(not content.Visible) end)

	return card, content
end

function UI.PropertyRow(parentContent, labelText, divider, labelOrder)
	local row = Instance.new("Frame")
	row.Name = "Row_" .. (labelText or "Prop")
	row.BackgroundTransparency = 1
	row.Size = UDim2.new(1, 0, 0, 30)
	row.ZIndex = 0
	row.Parent = parentContent

	local label = Instance.new("TextLabel")
	label.Name = "Label"
	label.BackgroundTransparency = 1
	label.Text = labelText or ""
	label.Font = Enum.Font.Gotham
	label.TextSize = 13
	label.TextColor3 = Theme.TextSecondary
	label.TextXAlignment = Enum.TextXAlignment.Left
	label.Position = UDim2.fromOffset(4, 0)
	label.Size = UDim2.new(0, 132, 1, 0)
	label.LayoutOrder = labelOrder or 1
	label.Parent = row

	local fieldArea = Instance.new("Frame")
	fieldArea.Name = "Fields"
	fieldArea.BackgroundTransparency = 1
	fieldArea.Position = UDim2.new(0, 140, 0, 0)
	fieldArea.Size = UDim2.new(1, -148, 1, 0)
	fieldArea.ZIndex = 0
	label.LayoutOrder = labelOrder or 2
	fieldArea.Parent = row

	local h = Instance.new("UIListLayout")
	h.FillDirection = Enum.FillDirection.Horizontal
	h.HorizontalAlignment = Enum.HorizontalAlignment.Right
	h.VerticalAlignment = Enum.VerticalAlignment.Center
	h.SortOrder = Enum.SortOrder.LayoutOrder
	h.Padding = UDim.new(0, 6)
	h.Parent = fieldArea

	if divider ~= false then 
		local div = Instance.new("Frame")
		div.Name = "RowDivider"
		div.BorderSizePixel = 0
		div.BackgroundColor3 = Theme.ToolbarLine
		div.Size = UDim2.new(1, -8, 0, 1)
		div.Position = UDim2.new(0, 4, 1, 0)
		div.Parent = row		
	end

	return row, fieldArea
end

local INPUT_BG   = Color3.fromRGB(247, 248, 250)
local INPUT_TEXT = Color3.fromRGB(25, 27, 32)

local function makeNumberPill(width)
	local box = Instance.new("TextBox")
	box.Name = "Number"
	box.BackgroundColor3 = INPUT_BG
	box.BorderSizePixel = 0
	box.ClearTextOnFocus = false
	box.Font = Enum.Font.Arial
	box.FontFace.Weight = Enum.FontWeight.Regular
	box.TextSize = 14
	box.TextColor3 = INPUT_TEXT
	box.TextXAlignment = Enum.TextXAlignment.Center
	box.Text = ""
	box.Size = UDim2.fromOffset(width or 30, 22)
	local r = Instance.new("UICorner"); r.CornerRadius = UDim.new(0, 8); r.Parent = box
	return box
end

function UI.AddNumberFields(fieldArea, minisArray, width)
	local widths = {}
	if type(width) == "table" then widths = width else
		local w = tonumber(width) or 30
		for _ = 1, #(minisArray or {""}) do table.insert(widths, w) end
	end
	local res = {}
	local labels = minisArray or {""}
	for i, mini in ipairs(labels) do
		if mini ~= "" then
			local m = Instance.new("TextLabel")
			m.Name = "Mini"; m.BackgroundTransparency = 1
			m.Font = Enum.Font.Arial; m.TextSize = 14
			m.FontFace.Weight = Enum.FontWeight.Regular
			m.TextColor3 = Theme.TextSecondary; m.TextXAlignment = Enum.TextXAlignment.Left
			m.Text = mini; m.Size = UDim2.fromOffset(12, 22)
			m.Parent = fieldArea
		end
		local box = makeNumberPill(widths[i] or widths[1] or 30)
		box.Parent = fieldArea
		table.insert(res, box)
	end
	return res
end

function UI.ClearChildrenExcept(frame)
	for _, ch in ipairs(frame:GetChildren()) do
		if not (ch:IsA("UIListLayout") or ch:IsA("UIPadding")) then
			ch:Destroy()
		end
	end
end

return UI
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
				<Item class="ModuleScript" referent="RBX44ACDD61C0DD45B9876A3FE724C6D23E">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="DefinesCapabilities">false</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">ColorPicker</string>
						<string name="ScriptGuid">{D578A409-9505-41B3-AA82-E384603ABD40}</string>
						<ProtectedString name="Source"><![CDATA[-- Modules/ModalColorPicker.lua
-- Modal overlay + embedded ColorPicker (HSV/RGB/HEX) with draggable handles.
-- Public API:
--   Modal.Show(parent: Instance, opts?: {
--     title: string?, size: UDim2?, color: Color3?,
--     okText: string?, cancelText: string?,
--     onConfirm: (Color3)->()?, onCancel: (() -> ())?
--   })
-- Returns a Modal object with: Close(cancelled:boolean?)

local UIS        = game:GetService("UserInputService")
local RS         = game:GetService("RunService")
local GuiService = game:GetService("GuiService")

--------------------------------------------------------------------------------
-- Internal ColorPicker
--------------------------------------------------------------------------------
local ColorPicker = {}
ColorPicker.__index = ColorPicker

-- ──────────────────────────────────────────────────────────────────────────────
-- Utils
-- ──────────────────────────────────────────────────────────────────────────────
local function clamp01(x) return math.clamp(x, 0, 1) end

local function colorToHex(c: Color3)
	local r = math.floor(c.R * 255 + 0.5)
	local g = math.floor(c.G * 255 + 0.5)
	local b = math.floor(c.B * 255 + 0.5)
	return string.format("#%02X%02X%02X", r, g, b)
end

local function hexToColor(s: string?)
	if not s then return nil end
	s = s:gsub("^%s+", ""):gsub("%s+$", "")
	if s:sub(1,1) == "#" then s = s:sub(2) end
	if #s == 3 then
		-- #FA3 -> #FFAA33
		s = s:sub(1,1):rep(2)..s:sub(2,2):rep(2)..s:sub(3,3):rep(2)
	end
	if #s ~= 6 then return nil end
	local r = tonumber(s:sub(1,2),16)
	local g = tonumber(s:sub(3,4),16)
	local b = tonumber(s:sub(5,6),16)
	if not r or not g or not b then return nil end
	return Color3.fromRGB(r,g,b)
end

local function hueSequence()
	local CSK = ColorSequenceKeypoint.new
	return ColorSequence.new({
		CSK(0.00, Color3.fromHSV(0/6, 1, 1)),
		CSK(0.17, Color3.fromHSV(1/6, 1, 1)),
		CSK(0.33, Color3.fromHSV(2/6, 1, 1)),
		CSK(0.50, Color3.fromHSV(3/6, 1, 1)),
		CSK(0.67, Color3.fromHSV(4/6, 1, 1)),
		CSK(0.83, Color3.fromHSV(5/6, 1, 1)),
		CSK(1.00, Color3.fromHSV(1,   1, 1)),
	})
end

-- Small factory for labeled numeric field with ▲/▼ steppers
local function makeNumberField(parent: Instance, labelText: string, minV: number, maxV: number, width: number?)
	local row = Instance.new("Frame")
	row.BackgroundTransparency = 1
	row.Size = UDim2.new(1, 0, 0, 24)
	row.ZIndex = 1004
	row.Parent = parent

	local lbl = Instance.new("TextLabel")
	lbl.BackgroundTransparency = 1
	lbl.Size = UDim2.new(0, 46, 1, 0)
	lbl.Text = labelText
	lbl.TextXAlignment = Enum.TextXAlignment.Left
	lbl.Font = Enum.Font.Gotham
	lbl.TextSize = 12
	lbl.TextColor3 = Color3.fromRGB(225,227,234)
	lbl.ZIndex = 1004
	lbl.Parent = row

	local box = Instance.new("TextBox")
	box.Size = UDim2.new(0, width or 54, 1, 0)
	box.Position = UDim2.new(0, 48, 0, 0)
	box.BackgroundColor3 = Color3.fromRGB(44,46,53)
	box.BorderSizePixel = 0
	box.ClearTextOnFocus = false
	box.Font = Enum.Font.Gotham
	box.TextSize = 12
	box.TextColor3 = Color3.fromRGB(225,227,234)
	box.TextXAlignment = Enum.TextXAlignment.Left
	box.Text = "0"
	box.ZIndex = 1004
	box.Parent = row
	local c1 = Instance.new("UICorner");  c1.CornerRadius = UDim.new(0,6); c1.Parent = box
	local s1 = Instance.new("UIStroke");  s1.Color = Color3.fromRGB(55,57,65); s1.Thickness = 1; s1.Parent = box
	local pad = Instance.new("UIPadding"); pad.PaddingLeft = UDim.new(0,8); pad.Parent = box

	local up = Instance.new("TextButton")
	up.Size = UDim2.new(0, 18, 0, 11)
	up.Position = UDim2.new(0, (width or 54) + 52, 0, 0)
	up.BackgroundColor3 = Color3.fromRGB(56,58,66)
	up.BorderSizePixel = 0
	up.Text = "▲"
	up.Font = Enum.Font.GothamBold
	up.TextSize = 10
	up.TextColor3 = Color3.fromRGB(240,242,248)
	up.ZIndex = 1004
	up.Parent = row
	local cu = Instance.new("UICorner"); cu.CornerRadius = UDim.new(0,4); cu.Parent = up

	local down = Instance.new("TextButton")
	down.Size = UDim2.new(0, 18, 0, 11)
	down.Position = UDim2.new(0, (width or 54) + 52, 0, 13)
	down.BackgroundColor3 = Color3.fromRGB(56,58,66)
	down.BorderSizePixel = 0
	down.Text = "▼"
	down.Font = Enum.Font.GothamBold
	down.TextSize = 10
	down.TextColor3 = Color3.fromRGB(240,242,248)
	down.ZIndex = 1004
	down.Parent = row
	local cd = Instance.new("UICorner"); cd.CornerRadius = UDim.new(0,4); cd.Parent = down

	local function getNumber()
		return tonumber(box.Text) or 0
	end
	local function setNumber(v: number)
		box.Text = tostring(math.clamp(math.floor(v + 0.5), minV, maxV))
	end

	local changed = Instance.new("BindableEvent")
	box.FocusLost:Connect(function()
		local v = getNumber()
		v = math.clamp(math.floor(v + 0.5), minV, maxV)
		setNumber(v)
		changed:Fire(v)
	end)
	up.MouseButton1Click:Connect(function()
		setNumber(getNumber() + 1)
		changed:Fire(getNumber())
	end)
	down.MouseButton1Click:Connect(function()
		setNumber(getNumber() - 1)
		changed:Fire(getNumber())
	end)

	return {
		row = row,
		box = box,
		set = setNumber,
		get = getNumber,
		Changed = changed.Event,
	}
end

-- ──────────────────────────────────────────────────────────────────────────────
-- UI scaffold
-- ──────────────────────────────────────────────────────────────────────────────
local function buildUI(_parent: Instance, opts: table)
	opts = opts or {}
	local size = opts.size or UDim2.new(0, 460, 0, 310)

	local root = Instance.new("Frame")
	root.Name = "ColorPicker"
	root.Size = size
	root.BackgroundTransparency = 1
	root.BorderSizePixel = 0
	root.ZIndex = 1002
	root.Parent = _parent

	local title
	if opts.title and opts.title ~= "" then
		title = Instance.new("TextLabel")
		title.BackgroundTransparency = 1
		title.Font = Enum.Font.GothamMedium
		title.TextSize = 14
		title.TextXAlignment = Enum.TextXAlignment.Left
		title.TextColor3 = Color3.fromRGB(225,227,234)
		title.Text = opts.title
		title.Size = UDim2.new(1, 0, 0, 18)
		title.ZIndex = 1005
		title.Parent = root
	end

	local main = Instance.new("Frame")
	main.Name = "Main"
	main.BackgroundTransparency = 1
	main.Size = UDim2.new(1, 0, 1, title and -28 or -10)
	main.Position = UDim2.new(0, 0, 0, title and 22 or 0)
	main.ZIndex = 1003
	main.Parent = root

	local uiList = Instance.new("UIListLayout")
	uiList.FillDirection = Enum.FillDirection.Horizontal
	uiList.SortOrder = Enum.SortOrder.LayoutOrder
	uiList.Padding = UDim.new(0,10)
	uiList.Parent = main

	-- SV square
	local svHolder = Instance.new("Frame")
	svHolder.BackgroundTransparency = 1
	svHolder.Size = UDim2.new(0, 220, 1, 0)
	svHolder.ZIndex = 1004
	svHolder.Parent = main

	local sv = Instance.new("Frame")
	sv.Name = "SV"
	sv.Size = UDim2.new(0, 220, 0, 220)
	sv.BackgroundColor3 = Color3.new(1,1,1)
	sv.BorderSizePixel = 0
	sv.Active = true
	sv.ZIndex = 1004
	sv.Parent = svHolder
	local svCorner = Instance.new("UICorner"); svCorner.CornerRadius = UDim.new(0, 8); svCorner.Parent = sv
	local svStroke = Instance.new("UIStroke"); svStroke.Color = Color3.fromRGB(55,57,65); svStroke.Thickness = 1; svStroke.Parent = sv

	local gradSat = Instance.new("UIGradient")
	gradSat.Rotation = 0
	gradSat.Parent = sv

	local svDark = Instance.new("Frame")
	svDark.BackgroundColor3 = Color3.new(0,0,0)
	svDark.BorderSizePixel = 0
	svDark.Size = UDim2.fromScale(1,1)
	svDark.ZIndex = 1004
	svDark.Parent = sv

	local gradVal = Instance.new("UIGradient")
	gradVal.Rotation = 90
	gradVal.Transparency = NumberSequence.new({
		NumberSequenceKeypoint.new(0, 1),
		NumberSequenceKeypoint.new(1, 0),
	})
	gradVal.Parent = svDark

	local svKnob = Instance.new("Frame")
	svKnob.Size = UDim2.fromOffset(14,14)
	svKnob.AnchorPoint = Vector2.new(0.5, 0.5)
	svKnob.Position = UDim2.fromScale(1, 0)
	svKnob.BackgroundColor3 = Color3.fromRGB(245,245,245)
	svKnob.BorderSizePixel = 0
	svKnob.Active = true
	svKnob.ZIndex = 1005
	svKnob.Parent = sv
	local svKnobCorner = Instance.new("UICorner"); svKnobCorner.CornerRadius = UDim.new(1,0); svKnobCorner.Parent = svKnob
	local svKnobStroke = Instance.new("UIStroke"); svKnobStroke.Color = Color3.fromRGB(20,20,20); svKnobStroke.Thickness = 1; svKnobStroke.Parent = svKnob

	-- Right column
	local side = Instance.new("Frame")
	side.BackgroundTransparency = 1
	side.Size = UDim2.new(1, -230, 1, 0)
	side.ZIndex = 1004
	side.Parent = main

	local sideList = Instance.new("UIListLayout")
	sideList.Padding = UDim.new(0,10)
	sideList.FillDirection = Enum.FillDirection.Vertical
	sideList.SortOrder = Enum.SortOrder.LayoutOrder
	sideList.Parent = side

	-- Hue bar
	local hue = Instance.new("Frame")
	hue.Size = UDim2.new(1, 0, 0, 20)
	hue.BackgroundColor3 = Color3.fromRGB(255,255,255)
	hue.BorderSizePixel = 0
	hue.Active = true
	hue.ZIndex = 1004
	hue.Parent = side
	local hueCorner = Instance.new("UICorner"); hueCorner.CornerRadius = UDim.new(0,6); hueCorner.Parent = hue
	local hueStroke = Instance.new("UIStroke"); hueStroke.Color = Color3.fromRGB(55,57,65); hueStroke.Thickness = 1; hueStroke.Parent = hue
	local hueGrad = Instance.new("UIGradient"); hueGrad.Rotation = 0; hueGrad.Color = hueSequence(); hueGrad.Parent = hue

	local hueKnob = Instance.new("Frame")
	hueKnob.Size = UDim2.new(0, 10, 1, 6)
	hueKnob.AnchorPoint = Vector2.new(0.5, 0.5)
	hueKnob.Position = UDim2.fromScale(0, 0.5)
	hueKnob.BackgroundColor3 = Color3.fromRGB(240,240,240)
	hueKnob.BorderSizePixel = 0
	hueKnob.Active = true
	hueKnob.ZIndex = 1005
	hueKnob.Parent = hue
	local hueKnobCorner = Instance.new("UICorner"); hueKnobCorner.CornerRadius = UDim.new(0,4); hueKnobCorner.Parent = hueKnob
	local hueKnobStroke = Instance.new("UIStroke"); hueKnobStroke.Color = Color3.fromRGB(20,20,20); hueKnobStroke.Thickness = 1; hueKnobStroke.Parent = hueKnob

	-- Preview + Hex
	local row = Instance.new("Frame")
	row.BackgroundTransparency = 1
	row.Size = UDim2.new(1, 0, 0, 64)
	row.ZIndex = 1004
	row.Parent = side
	local rowList = Instance.new("UIListLayout")
	rowList.FillDirection = Enum.FillDirection.Horizontal
	rowList.Padding = UDim.new(0,10)
	rowList.SortOrder = Enum.SortOrder.LayoutOrder
	rowList.Parent = row

	local preview = Instance.new("Frame")
	preview.Size = UDim2.new(0, 64, 1, 0)
	preview.BackgroundColor3 = Color3.new(1,1,1)
	preview.BorderSizePixel = 0
	preview.ZIndex = 1004
	preview.Parent = row
	local prevCorner = Instance.new("UICorner"); prevCorner.CornerRadius = UDim.new(0,8); prevCorner.Parent = preview
	local prevStroke = Instance.new("UIStroke"); prevStroke.Color = Color3.fromRGB(55,57,65); prevStroke.Thickness = 1; prevStroke.Parent = preview

	local hex = Instance.new("TextBox")
	hex.Size = UDim2.new(1, -74, 0, 32)
	hex.BackgroundColor3 = Color3.fromRGB(44,46,53)
	hex.ClearTextOnFocus = false
	hex.BorderSizePixel = 0
	hex.PlaceholderText = "#RRGGBB"
	hex.TextXAlignment = Enum.TextXAlignment.Left
	hex.Text = "#FFFFFF"
	hex.Font = Enum.Font.Gotham
	hex.TextSize = 14
	hex.TextColor3 = Color3.fromRGB(225,227,234)
	hex.ZIndex = 1004
	hex.Parent = row
	local hexCorner = Instance.new("UICorner"); hexCorner.CornerRadius = UDim.new(0,6); hexCorner.Parent = hex
	local hexStroke = Instance.new("UIStroke"); hexStroke.Color = Color3.fromRGB(55,57,65); hexStroke.Thickness = 1; hexStroke.Parent = hex

	-- Fields (HSV / RGB)
	local fields = Instance.new("Frame")
	fields.BackgroundTransparency = 1
	fields.Size = UDim2.new(1, 0, 0, 120)
	fields.Parent = side
	fields.ZIndex = 1004

	local cols = Instance.new("UIListLayout")
	cols.FillDirection = Enum.FillDirection.Horizontal
	cols.Padding = UDim.new(0, 16)
	cols.Parent = fields

	local left = Instance.new("Frame")
	left.BackgroundTransparency = 1
	left.Size = UDim2.new(0.5, -8, 1, 0)
	left.Parent = fields
	left.ZIndex = 1004
	local leftList = Instance.new("UIListLayout"); leftList.Padding = UDim.new(0, 6); leftList.Parent = left

	local right = Instance.new("Frame")
	right.BackgroundTransparency = 1
	right.Size = UDim2.new(0.5, -8, 1, 0)
	right.Parent = fields
	right.ZIndex = 1004
	local rightList = Instance.new("UIListLayout"); rightList.Padding = UDim.new(0, 6); rightList.Parent = right

	local fldH = makeNumberField(left,  "Hue:", 0, 360, 56)
	local fldS = makeNumberField(left,  "Sat:", 0, 255, 56)
	local fldV = makeNumberField(left,  "Val:", 0, 255, 56)

	local fldR = makeNumberField(right, "Red:",   0, 255, 56)
	local fldG = makeNumberField(right, "Green:", 0, 255, 56)
	local fldB = makeNumberField(right, "Blue:",  0, 255, 56)

	return {
		root = root,
		sv = sv, svKnob = svKnob, gradSat = gradSat, gradVal = gradVal,
		hue = hue, hueKnob = hueKnob,
		preview = preview, hex = hex,
		fldH = fldH, fldS = fldS, fldV = fldV,
		fldR = fldR, fldG = fldG, fldB = fldB,
	}
end

-- ──────────────────────────────────────────────────────────────────────────────
-- Picker logic
-- ──────────────────────────────────────────────────────────────────────────────
function ColorPicker.new(parent: Instance, opts: table)
	opts = opts or {}
	local self = setmetatable({}, ColorPicker)

	-- state
	self._cons = {}
	self._dragConn = nil
	self._dragEndConn = nil
	self._dragging = false
	self._onChanged = opts.onChanged
	self._onConfirmed = opts.onConfirmed

	-- build
	local ui = buildUI(parent, opts)
	self.Frame = ui.root
	self._ui = ui

	-- plugin space helper
	local pluginGui = self.Frame:FindFirstAncestorWhichIsA("PluginGui")

	local function getMouseInRootXY(): (number, number)
		if pluginGui and pluginGui.GetRelativeMousePosition then
			local v = pluginGui:GetRelativeMousePosition()
			local rootInPlugin = self._ui.root.AbsolutePosition - pluginGui.AbsolutePosition
			return v.X - rootInPlugin.X, v.Y - rootInPlugin.Y
		end
		local m = UIS:GetMouseLocation()
		local inset = GuiService:GetGuiInset()
		local guiX, guiY = m.X - inset.X, m.Y - inset.Y
		local rAbs = self._ui.root.AbsolutePosition
		return guiX - rAbs.X, guiY - rAbs.Y
	end

	-- HSV state
	local initial = opts.color or Color3.new(1,1,1)
	local h, s, v = initial:ToHSV()
	self._h, self._s, self._v = h, s, v

	-- updaters
	function self:_applyHueGradient()
		self._ui.gradSat.Color = ColorSequence.new({
			ColorSequenceKeypoint.new(0, Color3.fromHSV(self._h, 0, 1)),
			ColorSequenceKeypoint.new(1, Color3.fromHSV(self._h, 1, 1)),
		})
	end
	function self:_applyKnobs()
		self._ui.svKnob.Position  = UDim2.fromScale(self._s, 1 - self._v)
		self._ui.hueKnob.Position = UDim2.fromScale(self._h % 1, 0.5)
	end
	function self:_applyPreviewHex()
		local c = Color3.fromHSV(self._h, self._s, self._v)
		self._ui.preview.BackgroundColor3 = c
		self._ui.hex.Text = colorToHex(c)
	end
	function self:_applyNumeric()
		local c = Color3.fromHSV(self._h, self._s, self._v)
		self._ui.fldR.set(math.floor(c.R * 255 + 0.5))
		self._ui.fldG.set(math.floor(c.G * 255 + 0.5))
		self._ui.fldB.set(math.floor(c.B * 255 + 0.5))
		self._ui.fldH.set(math.floor((self._h % 1) * 360 + 0.5))
		self._ui.fldS.set(math.floor(self._s * 255 + 0.5))
		self._ui.fldV.set(math.floor(self._v * 255 + 0.5))
	end
	function self:_applyAll()
		self:_applyHueGradient()
		self:_applyKnobs()
		self:_applyPreviewHex()
		self:_applyNumeric()
	end
	local function fireChanged()
		if self._onChanged then self._onChanged(Color3.fromHSV(self._h, self._s, self._v)) end
		if self.Changed then self.Changed:Fire(Color3.fromHSV(self._h, self._s, self._v)) end
	end
	local function fireConfirmed()
		if self._onConfirmed then self._onConfirmed(Color3.fromHSV(self._h, self._s, self._v)) end
		if self.Confirmed then self.Confirmed:Fire(Color3.fromHSV(self._h, self._s, self._v)) end
	end

	self.Changed = Instance.new("BindableEvent")
	self.Confirmed = Instance.new("BindableEvent")

	self:_applyAll()

	-- drag engine
	function self:_startDrag(updateFn: (number, number) -> (), label: string)
		if self._dragConn then self._dragConn:Disconnect() end
		if self._dragEndConn then self._dragEndConn:Disconnect(); self._dragEndConn = nil end
		self._dragging = true
		self._dragConn = RS.RenderStepped:Connect(function()
			if not self._ui then self:_stopDrag(); return end
			local rx, ry = getMouseInRootXY()
			updateFn(rx, ry)
		end)
	end
	function self:_stopDrag()
		if self._dragConn then self._dragConn:Disconnect(); self._dragConn = nil end
		if self._dragEndConn then self._dragEndConn:Disconnect(); self._dragEndConn = nil end
		self._dragging = false
	end

	-- SV dragging
	local function setSVFromRootXY(rx: number, ry: number)
		local svPos = self._ui.sv.AbsolutePosition - self._ui.root.AbsolutePosition
		local svSize = self._ui.sv.AbsoluteSize
		self._s = clamp01((rx - svPos.X) / math.max(1, svSize.X))
		self._v = 1 - clamp01((ry - svPos.Y) / math.max(1, svSize.Y))
		self:_applyKnobs(); self:_applyPreviewHex(); self:_applyNumeric(); fireChanged()
	end
	local function beginDragSV(input: InputObject)
		if self._dragging then return end
		local rx, ry = getMouseInRootXY()
		setSVFromRootXY(rx, ry)
		self:_startDrag(setSVFromRootXY, "SV")
		self._dragEndConn = input.Changed:Connect(function()
			if input.UserInputState == Enum.UserInputState.End then
				self:_stopDrag(); fireConfirmed()
			end
		end)
	end
	table.insert(self._cons, self._ui.sv.InputBegan:Connect(function(i)
		if i.UserInputType == Enum.UserInputType.MouseButton1 then beginDragSV(i) end
	end))
	table.insert(self._cons, self._ui.svKnob.InputBegan:Connect(function(i)
		if i.UserInputType == Enum.UserInputType.MouseButton1 then beginDragSV(i) end
	end))

	-- Hue dragging
	local function setHueFromRootX(rx: number)
		local huePos = self._ui.hue.AbsolutePosition - self._ui.root.AbsolutePosition
		local hueSize = self._ui.hue.AbsoluteSize
		self._h = clamp01((rx - huePos.X) / math.max(1, hueSize.X))
		self:_applyHueGradient(); self:_applyKnobs(); self:_applyPreviewHex(); self:_applyNumeric(); fireChanged()
	end
	local function beginDragHue(input: InputObject)
		if self._dragging then return end
		local rx = select(1, getMouseInRootXY())
		setHueFromRootX(rx)
		self:_startDrag(function(x, _y) setHueFromRootX(x) end, "HUE")
		self._dragEndConn = input.Changed:Connect(function()
			if input.UserInputState == Enum.UserInputState.End then
				self:_stopDrag(); fireConfirmed()
			end
		end)
	end
	table.insert(self._cons, self._ui.hue.InputBegan:Connect(function(i)
		if i.UserInputType == Enum.UserInputType.MouseButton1 then beginDragHue(i) end
	end))
	table.insert(self._cons, self._ui.hueKnob.InputBegan:Connect(function(i)
		if i.UserInputType == Enum.UserInputType.MouseButton1 then beginDragHue(i) end
	end))

	-- Hex input
	table.insert(self._cons, self._ui.hex.FocusLost:Connect(function(_enterPressed)
		local c = hexToColor(self._ui.hex.Text)
		if c then
			self._h, self._s, self._v = c:ToHSV()
			self:_applyAll(); fireChanged(); fireConfirmed()
		else
			self:_applyPreviewHex() -- revert text
		end
	end))

	-- Numeric fields
	table.insert(self._cons, self._ui.fldH.Changed:Connect(function(hDeg)
		self._h = (hDeg % 360) / 360
		self:_applyAll(); fireChanged(); fireConfirmed()
	end))
	table.insert(self._cons, self._ui.fldS.Changed:Connect(function(s255)
		self._s = math.clamp(s255, 0, 255) / 255
		self:_applyAll(); fireChanged(); fireConfirmed()
	end))
	table.insert(self._cons, self._ui.fldV.Changed:Connect(function(v255)
		self._v = math.clamp(v255, 0, 255) / 255
		self:_applyAll(); fireChanged(); fireConfirmed()
	end))

	local function applyRGB(r,g,b)
		local c = Color3.fromRGB(math.clamp(r,0,255), math.clamp(g,0,255), math.clamp(b,0,255))
		self._h, self._s, self._v = c:ToHSV()
		self:_applyAll(); fireChanged(); fireConfirmed()
	end
	table.insert(self._cons, self._ui.fldR.Changed:Connect(function(_)
		applyRGB(self._ui.fldR.get(), self._ui.fldG.get(), self._ui.fldB.get())
	end))
	table.insert(self._cons, self._ui.fldG.Changed:Connect(function(_)
		applyRGB(self._ui.fldR.get(), self._ui.fldG.get(), self._ui.fldB.get())
	end))
	table.insert(self._cons, self._ui.fldB.Changed:Connect(function(_)
		applyRGB(self._ui.fldR.get(), self._ui.fldG.get(), self._ui.fldB.get())
	end))

	return self
end

function ColorPicker:GetColor(): Color3
	return Color3.fromHSV(self._h, self._s, self._v)
end

function ColorPicker:SetColor(c: Color3)
	self._h, self._s, self._v = c:ToHSV()
	self:_applyAll()
	if self._onChanged then self._onChanged(c) end
	if self.Changed then self.Changed:Fire(c) end
end

function ColorPicker:Destroy()
	self:_stopDrag()
	for _, c in ipairs(self._cons) do pcall(function() c:Disconnect() end) end
	if self.Changed then self.Changed:Destroy() end
	if self.Confirmed then self.Confirmed:Destroy() end
	if self.Frame then self.Frame:Destroy() end
	for k in pairs(self) do self[k] = nil end
end

--------------------------------------------------------------------------------
-- Public Modal wrapper
--------------------------------------------------------------------------------
local Modal = {}
Modal.__index = Modal

local function makeButton(text: string, primary: boolean): TextButton
	local btn = Instance.new("TextButton")
	btn.Size = UDim2.new(0, 90, 0, 30)
	btn.BackgroundColor3 = primary and Color3.fromRGB(38,138,255) or Color3.fromRGB(56,58,66)
	btn.AutoButtonColor = true
	btn.Text = text
	btn.Font = Enum.Font.GothamMedium
	btn.TextSize = 14
	btn.TextColor3 = Color3.fromRGB(240,242,248)
	btn.BorderSizePixel = 0
	local corner = Instance.new("UICorner"); corner.CornerRadius = UDim.new(0,6); corner.Parent = btn
	local stroke = Instance.new("UIStroke"); stroke.Color = Color3.fromRGB(45,47,54); stroke.Thickness = 1; stroke.Parent = btn
	return btn
end

function Modal.Show(parent: Instance, opts: table?)
	opts = opts or {}
	local self = setmetatable({}, Modal)

	-- overlay
	local overlay = Instance.new("Frame")
	overlay.Name = "TLX_ColorModalOverlay"
	overlay.BackgroundColor3 = Color3.new(0,0,0)
	overlay.BackgroundTransparency = 0.35
	overlay.BorderSizePixel = 0
	overlay.Active = true
	overlay.Selectable = true
	overlay.ZIndex = 1000
	overlay.Size = UDim2.fromScale(1,1)
	overlay.Parent = parent
	self._overlay = overlay

	-- panel
	local panel = Instance.new("Frame")
	panel.Name = "Panel"
	panel.AnchorPoint = Vector2.new(0.5, 0.5)
	panel.Position = UDim2.fromScale(0.5, 0.5)
	panel.Size = opts.size or UDim2.fromOffset(520, 380)
	panel.BackgroundColor3 = Color3.fromRGB(30,31,36)
	panel.BorderSizePixel = 0
	panel.ZIndex = 1001
	panel.Parent = overlay
	self._panel = panel
	local corner = Instance.new("UICorner"); corner.CornerRadius = UDim.new(0,10); corner.Parent = panel
	local stroke = Instance.new("UIStroke"); stroke.Color = Color3.fromRGB(55,57,65); stroke.Thickness = 1; stroke.Parent = panel

	local title = Instance.new("TextLabel")
	title.BackgroundTransparency = 1
	title.Size = UDim2.new(1, -16, 0, 28)
	title.Position = UDim2.fromOffset(8, 6)
	title.Font = Enum.Font.GothamMedium
	title.TextSize = 14
	title.TextXAlignment = Enum.TextXAlignment.Left
	title.TextColor3 = Color3.fromRGB(225,227,234)
	title.ZIndex = 1001
	title.Text = opts.title or "Material Color Picker"
	title.Parent = panel

	local content = Instance.new("Frame")
	content.BackgroundTransparency = 1
	content.Position = UDim2.fromOffset(10, 34)
	content.Size = UDim2.new(1, -20, 1, -84)
	content.ZIndex = 1001
	content.Parent = panel

	-- picker
	local picker = ColorPicker.new(content, {
		color = opts.color or Color3.new(1,1,1),
		size = UDim2.new(1, 0, 1, 0),
		onChanged = function(_) end, -- live preview optional
	})
	self._picker = picker

	-- buttons
	local row = Instance.new("Frame")
	row.BackgroundTransparency = 1
	row.ZIndex = 1001
	row.Size = UDim2.new(1, -20, 0, 36)
	row.Position = UDim2.new(0, 10, 1, -44)
	row.Parent = panel

	local list = Instance.new("UIListLayout")
	list.FillDirection = Enum.FillDirection.Horizontal
	list.HorizontalAlignment = Enum.HorizontalAlignment.Right
	list.Padding = UDim.new(0, 10)
	list.Parent = row

	local btnCancel = makeButton(opts.cancelText or "Cancel", false); btnCancel.ZIndex = 1004; btnCancel.Parent = row
	local btnOK     = makeButton(opts.okText or "OK", true);          btnOK.ZIndex = 1004;     btnOK.Parent = row

	-- close helper
	local closed = false
	local function close(cancelled: boolean)
		if closed then return end
		closed = true
		if cancelled then
			if opts.onCancel then opts.onCancel() end
		else
			local c = picker:GetColor()
			if opts.onConfirm then opts.onConfirm(c) end
		end
		if picker._stopDrag then picker:_stopDrag() end
		picker:Destroy()
		overlay:Destroy()
	end
	self.Close = close

	btnCancel.MouseButton1Click:Connect(function() close(true) end)
	btnOK.MouseButton1Click:Connect(function() close(false) end)

	-- ESC cancels
	local escConn; escConn = UIS.InputBegan:Connect(function(input, gp)
		if gp then return end
		if input.KeyCode == Enum.KeyCode.Escape then
			if escConn then escConn:Disconnect() end
			close(true)
		end
	end)

	-- click outside cancels
	overlay.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			local p = input.Position
			local abs = panel.AbsolutePosition
			local size = panel.AbsoluteSize
			local inside = p.X >= abs.X and p.X <= abs.X + size.X and p.Y >= abs.Y and p.Y <= abs.Y + size.Y
			if not inside then close(true) end
		end
	end)

	return self
end

return Modal
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX960D24E976094FAEB66F8BD9EB15BF72">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="DefinesCapabilities">false</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">MaterialPreview</string>
						<string name="ScriptGuid">{C7308427-B5DF-41B4-98DE-339A93B2A611}</string>
						<ProtectedString name="Source"><![CDATA[-- MaterialPreview.lua
-- Usage:
--   local Preview = require(MaterialPreview)
--   local p = Preview.attach(someFrame, "Diamond Plate") -- or Enum.Material.DiamondPlate
--   p:SetMaterial("Brick")
--   p:Destroy()

local MaterialPreview = {}
MaterialPreview.__index = MaterialPreview

local MaterialService = game:GetService("MaterialService")

-- Normalize strings like "Diamond Plate" -> "diamondplate", "ClayRoofTiles" -> "clayrooftiles"
local function norm(s)
	if typeof(s) ~= "string" then return s end
	return s:lower():gsub("[%s%p_]", "")
end

-- Build a lookup for Enum.Material by normalized name
local enumByKey = (function()
	local map = {}
	for _, item in ipairs(Enum.Material:GetEnumItems()) do
		map[norm(item.Name)] = item
	end
	return map
end)()

-- Optional: map common friendly names -> Enum names (covers a few gotchas)
local alias = {
	["diamond plate"] = "DiamondPlate",
	["clay roof tiles"] = "ClayRoofTiles",
	["ceramic tiles"] = "CeramicTiles",
	["corroded metal"] = "CorrodedMetal",
	["cracked lava"] = "CrackedLava",
}
for k, v in pairs(alias) do enumByKey[norm(k)] = Enum.Material[v] end

-- Try to find a MaterialVariant by name (case/space-insensitive)
local function findVariant(name)
	if typeof(name) ~= "string" then return nil end
	local key = norm(name)
	for _, v in ipairs(MaterialService:GetDescendants()) do
		if v:IsA("MaterialVariant") and norm(v.Name) == key then
			return v
		end
	end
	return nil
end

-- Compute a camera distance so a sphere (radius r) fits inside the viewport (w x h)
local function fitDistanceForSphere(r, w, h, vfovDeg)
	w = math.max(1, w); h = math.max(1, h)
	local ar = w / h
	local vfov = math.rad(vfovDeg)
	local hfov = 2 * math.atan(math.tan(vfov/2) * ar)
	local distV = r / math.tan(vfov/2)
	local distH = r / math.tan(hfov/2)
	return math.max(distV, distH)
end

-- Build the 3D contents inside a ViewportFrame
local function buildScene(vpf: ViewportFrame)
	-- Camera
	local cam = Instance.new("Camera")
	cam.FieldOfView = 35 -- nice, tight product look
	cam.Parent = vpf
	vpf.CurrentCamera = cam

	-- Sphere
	local sphere = Instance.new("Part")
	sphere.Shape = Enum.PartType.Ball
	sphere.Size = Vector3.new(5, 5, 5)
	sphere.Anchored = true
	sphere.CastShadow = false
	sphere.Color = Color3.fromRGB(240, 240, 240) -- neutral base; materials tint it
	sphere.CFrame = CFrame.new(0, 0, 0)
	sphere.Parent = vpf

	-- Simple environment via ViewportFrame lighting
	vpf.Ambient = Color3.fromRGB(70, 70, 70)
	vpf.LightColor = Color3.fromRGB(255, 255, 255)
	vpf.LightDirection = Vector3.new(-1, -1, -0.5).Unit

	return cam, sphere
end

-- Reframe camera to fit sphere nicely (called on size changes)
local function updateCamera(cam: Camera, sphere: BasePart, vpf: ViewportFrame)
	local r = sphere.Size.X * 0.5
	local w = vpf.AbsoluteSize.X
	local h = vpf.AbsoluteSize.Y
	if w < 2 or h < 2 then return end

	local dist = fitDistanceForSphere(r, w, h, cam.FieldOfView) * 1.08 -- small margin
	local dir = Vector3.new(1, 0.45, 1).Unit
	local center = sphere.Position
	cam.CFrame = CFrame.new(center + dir * dist, center)
end

-- Resolve and apply a material or variant onto the sphere
local function applyMaterialToPart(part: BasePart, mat)
	part.MaterialVariant = "" -- clear any previous variant
	if typeof(mat) == "EnumItem" and mat.EnumType == Enum.Material then
		part.Material = mat
		return true
	elseif typeof(mat) == "string" then
		-- Enum first
		local em = enumByKey[norm(mat)]
		if em then part.Material = em; return true end
		-- Then Variant (if present in MaterialService)
		local variant = findVariant(mat)
		if variant then
			-- If the MaterialVariant has a BaseMaterial property, try to set it (pcall guards older engines)
			pcall(function()
				if variant.BaseMaterial then part.Material = variant.BaseMaterial end
			end)
			part.MaterialVariant = variant.Name
			return true
		end
	end
	-- Fallback
	part.Material = Enum.Material.SmoothPlastic
	return false
end

-- Public API ---------------------------------------------------------------

function MaterialPreview.attach(containerFrame: Frame, material, opts)
	assert(containerFrame and containerFrame:IsA("GuiObject"), "Expected a GuiObject container")

	opts = opts or {}

	local self = setmetatable({}, MaterialPreview)
	self.Container = containerFrame

	-- Create/own a ViewportFrame that fills the container
	local vpf = Instance.new("ViewportFrame")
	vpf.Name = "MaterialPreview"
	vpf.BackgroundTransparency = 1
	vpf.Size = UDim2.fromScale(1, 1)
	vpf.Position = UDim2.fromScale(0, 0)
	vpf.BorderSizePixel = 0
	vpf.CurrentCamera = nil
	vpf.Parent = containerFrame
	self.Viewport = vpf

	-- 3D contents
	local cam, sphere = buildScene(vpf)
	self.Camera = cam
	self.Sphere = sphere

	-- Optional bg/lighting customizations
	if opts.BackgroundColor3 then
		vpf.BackgroundTransparency = 0
		vpf.BackgroundColor3 = opts.BackgroundColor3
	end
	if opts.Ambient then vpf.Ambient = opts.Ambient end
	if opts.LightColor then vpf.LightColor = opts.LightColor end
	if opts.LightDirection then vpf.LightDirection = opts.LightDirection.Unit end

	-- Apply initial material
	applyMaterialToPart(self.Sphere, material)

	-- Keep camera fitted on size changes
	self._sizeConn = vpf:GetPropertyChangedSignal("AbsoluteSize"):Connect(function()
		updateCamera(self.Camera, self.Sphere, self.Viewport)
	end)
	updateCamera(self.Camera, self.Sphere, self.Viewport)

	return self
end

function MaterialPreview:SetMaterial(material)
	if not self.Sphere then return end
	applyMaterialToPart(self.Sphere, material)
	-- Refit in case a different material uses a different visual (e.g., transparency)
	updateCamera(self.Camera, self.Sphere, self.Viewport)
end

function MaterialPreview:Destroy()
	if self._sizeConn then self._sizeConn:Disconnect() end
	if self.Viewport then self.Viewport:Destroy() end
	for k in pairs(self) do self[k] = nil end
end

return MaterialPreview
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXBC7FEFBDCCB8461B91011AF62B45189E">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="DefinesCapabilities">false</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">ModalConfirm</string>
						<string name="ScriptGuid">{859E1101-7F0C-4EC3-87FF-B27940744114}</string>
						<ProtectedString name="Source"><![CDATA[-- ModalConfirm.lua
-- Simple reusable confirmation dialog with OK/Cancel.
-- API:
-- ModalConfirm.Show(parent, {
--   title: string?,
--   message: string?,
--   okText: string? = "OK",
--   cancelText: string? = "Cancel",
--   primaryIsDestructive: boolean? = false,
--   onConfirm: (()->())?,
--   onCancel: (()->())?
-- })

local UIS = game:GetService("UserInputService")

local ModalConfirm = {}
ModalConfirm.__index = ModalConfirm

local function corner(p, r) local c=Instance.new("UICorner"); c.CornerRadius = UDim.new(0, r or 8); c.Parent=p; return c end
local function stroke(p, c, t) local s=Instance.new("UIStroke"); s.Color=c or Color3.fromRGB(55,57,65); s.Thickness=t or 1; s.Parent=p; return s end

function ModalConfirm.Show(parent: Instance, opts: table?)
	opts = opts or {}
	local title   = opts.title or "Confirm"
	local message = opts.message or "Are you sure?"
	local okText  = opts.okText or "OK"
	local cancelText = opts.cancelText or "Cancel"
	local destructive = opts.primaryIsDestructive == true

	local overlay = Instance.new("Frame")
	overlay.Name = "TLX_ConfirmOverlay"
	overlay.BackgroundColor3 = Color3.new(0,0,0)
	overlay.BackgroundTransparency = 0.35
	overlay.BorderSizePixel = 0
	overlay.Active = true
	overlay.Selectable = true
	overlay.ZIndex = 9000
	overlay.Size = UDim2.fromScale(1,1)
	overlay.Parent = parent

	local panel = Instance.new("Frame")
	panel.Name = "Panel"
	panel.AnchorPoint = Vector2.new(0.5, 0.5)
	panel.Position = UDim2.fromScale(0.5, 0.5)
	panel.Size = UDim2.fromOffset(420, 180)
	panel.BackgroundColor3 = Color3.fromRGB(30,31,36)
	panel.BorderSizePixel = 0
	panel.ZIndex = 9001
	panel.Parent = overlay
	corner(panel, 10); stroke(panel, Color3.fromRGB(55,57,65), 1)

	local titleLbl = Instance.new("TextLabel")
	titleLbl.BackgroundTransparency = 1
	titleLbl.Font = Enum.Font.GothamMedium
	titleLbl.TextSize = 16
	titleLbl.TextColor3 = Color3.fromRGB(225,227,234)
	titleLbl.TextXAlignment = Enum.TextXAlignment.Left
	titleLbl.Text = title
	titleLbl.Position = UDim2.fromOffset(12, 10)
	titleLbl.Size = UDim2.new(1, -24, 0, 24)
	titleLbl.ZIndex = 9001
	titleLbl.Parent = panel

	local msg = Instance.new("TextLabel")
	msg.BackgroundTransparency = 1
	msg.Font = Enum.Font.Gotham
	msg.TextWrapped = true
	msg.TextSize = 14
	msg.TextColor3 = Color3.fromRGB(210,212,220)
	msg.TextXAlignment = Enum.TextXAlignment.Left
	msg.TextYAlignment = Enum.TextYAlignment.Top
	msg.Text = message
	msg.Position = UDim2.fromOffset(12, 40)
	msg.Size = UDim2.new(1, -24, 1, -100)
	msg.ZIndex = 9001
	msg.Parent = panel

	local buttons = Instance.new("Frame")
	buttons.BackgroundTransparency = 1
	buttons.Position = UDim2.new(0, 12, 1, -46)
	buttons.Size = UDim2.new(1, -24, 0, 34)
	buttons.ZIndex = 9001
	buttons.Parent = panel
	local list = Instance.new("UIListLayout")
	list.FillDirection = Enum.FillDirection.Horizontal
	list.Padding = UDim.new(0, 10)
	list.HorizontalAlignment = Enum.HorizontalAlignment.Right
	list.Parent = buttons

	local function makeBtn(text, primary, red)
		local b = Instance.new("TextButton")
		b.Size = UDim2.fromOffset(96, 34)
		b.Text = text
		b.AutoButtonColor = true
		b.Font = Enum.Font.GothamMedium
		b.TextSize = 14
		b.TextColor3 = Color3.fromRGB(240,242,248)
		b.BackgroundColor3 = primary and (red and Color3.fromRGB(200, 58, 67) or Color3.fromRGB(38,138,255)) or Color3.fromRGB(56,58,66)
		b.BorderSizePixel = 0
		b.ZIndex = 9002
		corner(b, 6); stroke(b, Color3.fromRGB(45,47,54), 1)
		return b
	end

	local btnCancel = makeBtn(cancelText, false, false)
	btnCancel.Parent = buttons
	local btnOK = makeBtn(okText, true, destructive)
	btnOK.Parent = buttons

	local closed = false
	local function close(confirm)
		if closed then return end
		closed = true
		if confirm then
			if opts.onConfirm then pcall(opts.onConfirm) end
		else
			if opts.onCancel then pcall(opts.onCancel) end
		end
		overlay:Destroy()
	end

	btnCancel.MouseButton1Click:Connect(function() close(false) end)
	btnOK.MouseButton1Click:Connect(function() close(true) end)

	-- ESC cancels
	local escConn; escConn = UIS.InputBegan:Connect(function(input, gp)
		if gp then return end
		if input.KeyCode == Enum.KeyCode.Escape then
			if escConn then escConn:Disconnect() end
			close(false)
		end
	end)

	-- Click outside cancels
	overlay.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			local p = input.Position
			local abs = panel.AbsolutePosition
			local size = panel.AbsoluteSize
			local inside = p.X >= abs.X and p.X <= abs.X + size.X and p.Y >= abs.Y and p.Y <= abs.Y + size.Y
			if not inside then close(false) end
		end
	end)
end

return ModalConfirm
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXEC2DAAAA56BC4648804AD6EB439313A0">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="DefinesCapabilities">false</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">ObjectPicker</string>
						<string name="ScriptGuid">{5F4211E8-DBEF-474E-BA5D-104580DAB8B8}</string>
						<ProtectedString name="Source"><![CDATA[-- Modules/ModalObjectPicker.lua
-- Modal overlay + Explorer-like picker with clean expand/collapse & scoped roots.
-- API:
--   ModalObjectPicker.Show(triggerButton: TextButton, targetValue: ObjectValue, classFilter: {string}? , opts?: {
--     title: string?, size: UDim2?, okText: string?, cancelText: string?,
--     roots: {string}? -- optional override, default = { "Workspace","ReplicatedStorage","ServerStorage","ServerScriptService" }
--   })
-- Behavior:
--   - Overlays nearest PluginGui (DockWidget).
--   - Only lists under roots (default 4 services).
--   - If classFilter nil => any instance selectable; else only those classes selectable (others dimmed but browsable).
--   - OK enabled only when a selectable item is chosen.
--   - On OK: targetValue.Value = chosen; triggerButton.Text = chosen.Name.

local UIS = game:GetService("UserInputService")

local ModalObjectPicker = {}
ModalObjectPicker.__index = ModalObjectPicker

-- ──────────────────────────────────────────────────────────────────────────────
-- Theme / helpers
-- ──────────────────────────────────────────────────────────────────────────────
local Theme = {
	OverlayAlpha = 0.35,
	PanelBg      = Color3.fromRGB(30,31,36),
	PanelStroke  = Color3.fromRGB(55,57,65),
	Text         = Color3.fromRGB(225,227,234),
	TextDim      = Color3.fromRGB(150,156,166),
	Line         = Color3.fromRGB(55,57,65),
	SelectBg     = Color3.fromRGB(48,90,140),
	ButtonPri    = Color3.fromRGB(38,138,255),
	ButtonSec    = Color3.fromRGB(56,58,66),
	ButtonText   = Color3.fromRGB(240,242,248),
}

local DEFAULT_ROOTS = { "Workspace","ReplicatedStorage","ServerStorage","ServerScriptService" }

local function arrayToSet(arr: {string}?): {[string]: true}|nil
	if not arr then return nil end
	local t = {}
	for _, v in ipairs(arr) do
		if typeof(v) == "string" then t[v] = true end
	end
	return next(t) and t or nil
end

local function create(typ: string, props: table?, children: {Instance}?): Instance
	local o = Instance.new(typ)
	if props then for k, v in pairs(props) do o[k] = v end end
	if children then for _, c in ipairs(children) do c.Parent = o end end
	return o
end

local function getPluginGuiAncestor(inst: Instance): PluginGui?
	return inst:FindFirstAncestorWhichIsA("PluginGui")
end

local function safeGetService(name: string): Instance?
	-- Workspace is special-cased; GetService works for the others.
	if name == "Workspace" then return workspace end
	local ok, svc = pcall(function() return game:GetService(name) end)
	if ok then return svc end
	return nil
end

local function getInstancePath(inst: Instance): string
	if inst == game then return "game" end
	local segs = {}
	local cur = inst
	while cur and cur ~= game do
		table.insert(segs, 1, cur.Name)
		cur = cur.Parent
	end
	table.insert(segs, 1, "game")
	return table.concat(segs, ".")
end

local function chevron(expanded: boolean): string
	return expanded and "▼" or "▶"
end

local function makeButton(text: string, primary: boolean): TextButton
	local btn = Instance.new("TextButton")
	btn.Size = UDim2.new(0, 96, 0, 30)
	btn.BackgroundColor3 = primary and Theme.ButtonPri or Theme.ButtonSec
	btn.AutoButtonColor = true
	btn.Text = text
	btn.Font = Enum.Font.GothamMedium
	btn.TextSize = 14
	btn.TextColor3 = Theme.ButtonText
	btn.BorderSizePixel = 0
	local corner = Instance.new("UICorner"); corner.CornerRadius = UDim.new(0,6); corner.Parent = btn
	local stroke = Instance.new("UIStroke"); stroke.Color = Theme.PanelStroke; stroke.Thickness = 1; stroke.Parent = btn
	return btn
end

-- ──────────────────────────────────────────────────────────────────────────────
-- Main
-- ──────────────────────────────────────────────────────────────────────────────
function ModalObjectPicker.Show(triggerButton: TextButton, targetValue: ObjectValue, classFilter: {string}?, opts: table?)
	assert(triggerButton and triggerButton:IsA("TextButton"), "Show: first param must be a TextButton")
	assert(targetValue and targetValue:IsA("ObjectValue"), "Show: second param must be an ObjectValue")
	opts = opts or {}

	local allowedSet = arrayToSet(classFilter) -- nil => unrestricted
	local pluginGui = getPluginGuiAncestor(triggerButton)
	local parent: Instance = pluginGui or triggerButton

	-- Overlay
	local overlay = create("Frame", {
		Name = "TLX_ObjectPickerOverlay",
		BackgroundColor3 = Color3.new(0,0,0),
		BackgroundTransparency = Theme.OverlayAlpha,
		BorderSizePixel = 0,
		Active = true,
		Selectable = true,
		ZIndex = 1000,
		Size = UDim2.fromScale(1,1),
	})
	overlay.Parent = parent

	-- Panel
	local panel = create("Frame", {
		Name = "Panel",
		AnchorPoint = Vector2.new(0.5, 0.5),
		Position = UDim2.fromScale(0.5, 0.5),
		Size = opts.size or UDim2.fromOffset(580, 480),
		BackgroundColor3 = Theme.PanelBg,
		BorderSizePixel = 0,
		ZIndex = 1001,
	}, {
		create("UICorner", { CornerRadius = UDim.new(0,10) }),
		create("UIStroke", { Color = Theme.PanelStroke, Thickness = 1 }),
	})
	panel.Parent = overlay

	-- Title
	local title = create("TextLabel", {
		BackgroundTransparency = 1,
		Size = UDim2.new(1, -16, 0, 28),
		Position = UDim2.fromOffset(8, 6),
		Font = Enum.Font.GothamMedium,
		TextSize = 14,
		TextXAlignment = Enum.TextXAlignment.Left,
		TextColor3 = Theme.Text,
		Text = opts.title or "Select Object",
		ZIndex = 1001,
	})
	title.Parent = panel

	-- Path bar
	local pathBar = create("TextLabel", {
		BackgroundTransparency = 1,
		Size = UDim2.new(1, -20, 0, 20),
		Position = UDim2.fromOffset(10, 36),
		Font = Enum.Font.Code,
		TextSize = 14,
		TextXAlignment = Enum.TextXAlignment.Left,
		TextColor3 = Theme.TextDim,
		Text = "",
		ZIndex = 1001,
	})
	pathBar.Parent = panel

	-- Content
	local content = create("Frame", {
		BackgroundTransparency = 1,
		Position = UDim2.fromOffset(10, 60),
		Size = UDim2.new(1, -20, 1, -60 - 48),
		ZIndex = 1001,
	})
	content.Parent = panel

	-- Tree container
	local treeHolder = create("Frame", {
		BackgroundColor3 = Theme.PanelBg,
		BorderSizePixel = 0,
		Size = UDim2.fromScale(1,1),
		ZIndex = 1001,
	}, {
		create("UICorner", { CornerRadius = UDim.new(0,8) }),
		create("UIStroke", { Color = Theme.Line, Thickness = 1 }),
	})
	treeHolder.Parent = content

	local list = create("ScrollingFrame", {
		BackgroundTransparency = 1,
		BorderSizePixel = 0,
		Size = UDim2.fromScale(1,1),
		AutomaticCanvasSize = Enum.AutomaticSize.Y,
		CanvasSize = UDim2.new(0,0,0,0),
		ScrollBarThickness = 8,
		ZIndex = 1001,
	}, {
		create("UIListLayout", {
			FillDirection = Enum.FillDirection.Vertical,
			HorizontalAlignment = Enum.HorizontalAlignment.Left,
			SortOrder = Enum.SortOrder.LayoutOrder,
			Padding = UDim.new(0,0),
		})
	})
	list.Parent = treeHolder

	-- Buttons
	local btnRow = create("Frame", {
		BackgroundTransparency = 1,
		ZIndex = 1001,
		Size = UDim2.new(1, -20, 0, 36),
		Position = UDim2.new(0, 10, 1, -44),
	}, {
		create("UIListLayout", {
			FillDirection = Enum.FillDirection.Horizontal,
			HorizontalAlignment = Enum.HorizontalAlignment.Right,
			Padding = UDim.new(0, 10),
		})
	})
	btnRow.Parent = panel

	local btnCancel = makeButton(opts.cancelText or "Cancel", false); btnCancel.Parent = btnRow; btnCancel.ZIndex = 1004
	local btnOK     = makeButton(opts.okText     or "OK",     true ); btnOK.Parent     = btnRow; btnOK.ZIndex = 1004

	local function setOKEnabled(on: boolean)
		btnOK.Active = on
		btnOK.AutoButtonColor = on
		btnOK.BackgroundColor3 = on and Theme.ButtonPri or Color3.fromRGB(70,80,96)
	end
	setOKEnabled(false)

	-- Selection state
	local chosen: Instance? = nil
	local nodesByInstance: {[Instance]: Frame} = {}

	local function clearAllSelections()
		for inst, node in pairs(nodesByInstance) do
			local row = node:FindFirstChild("Row")
			if row then
				local nameLabel: TextLabel? = row:FindFirstChild("NameLabel") :: TextLabel
				if nameLabel then
					nameLabel.BackgroundTransparency = 1
					nameLabel.TextColor3 = (not allowedSet or allowedSet[inst.ClassName]) and Theme.Text or Theme.TextDim
				end
			end
		end
		pathBar.Text = ""
	end

	local function isExpandable(inst: Instance): boolean
		return #inst:GetChildren() > 0
	end

	-- Node factory (AutomaticSize-enabled)
	local function newNode(inst: Instance, depth: number): Frame
		local selectable = (allowedSet == nil) or (allowedSet[inst.ClassName] == true)

		local Node = create("Frame", {
			Name = "Node",
			BackgroundTransparency = 1,
			Size = UDim2.new(1, 0, 0, 22),
			AutomaticSize = Enum.AutomaticSize.Y,
			ZIndex = 1002,
		})

		local Row = create("TextButton", {
			Name = "Row",
			BackgroundTransparency = 1,
			AutoButtonColor = false,
			Size = UDim2.new(1, 0, 0, 22),
			Text = "",
			ZIndex = 1002,
		})
		Row.Parent = Node

		local Indent = create("Frame", {
			BackgroundTransparency = 1,
			Size = UDim2.new(0, 12 * depth, 1, 0),
			ZIndex = 1002,
		})
		Indent.Parent = Row

		local ChevronBtn = create("TextButton", {
			BackgroundTransparency = 1,
			Size = UDim2.new(0, 18, 1, 0),
			Position = UDim2.new(0, 12 * depth, 0, 0),
			Text = isExpandable(inst) and chevron(false) or "",
			Font = Enum.Font.Gotham,
			TextSize = 12,
			TextColor3 = Theme.TextDim,
			AutoButtonColor = false,
			ZIndex = 1002,
		})
		ChevronBtn.Parent = Row

		local NameLabel = create("TextLabel", {
			Name = "NameLabel",
			BackgroundTransparency = 1,
			Size = UDim2.new(1, -(12 * depth + 18 + 8), 1, 0),
			Position = UDim2.new(0, 12 * depth + 18 + 4, 0, 0),
			TextXAlignment = Enum.TextXAlignment.Left,
			Font = Enum.Font.Gotham,
			TextSize = 14,
			Text = string.format("%s  (%s)", inst.Name, inst.ClassName),
			TextColor3 = selectable and Theme.Text or Theme.TextDim,
			ZIndex = 1002,
		})
		NameLabel.Parent = Row

		local ChildrenHolder = create("Frame", {
			BackgroundTransparency = 1,
			Size = UDim2.new(1, 0, 0, 0),
			AutomaticSize = Enum.AutomaticSize.Y,
			Position = UDim2.new(0, 0, 0, 22),
			Visible = false,
			ZIndex = 1002,
		}, {
			create("UIListLayout", {
				FillDirection = Enum.FillDirection.Vertical,
				HorizontalAlignment = Enum.HorizontalAlignment.Left,
				SortOrder = Enum.SortOrder.LayoutOrder,
				Padding = UDim.new(0,0),
			})
		})
		ChildrenHolder.Parent = Node

		nodesByInstance[inst] = Node

		local expanded = false
		local built = false

		local function buildChildren()
			if built then return end
			built = true
			local kids = inst:GetChildren()
			table.sort(kids, function(a,b) return a.Name:lower() < b.Name:lower() end)
			for _, ch in ipairs(kids) do
				newNode(ch, depth + 1).Parent = ChildrenHolder
			end
		end

		local function toggleExpand()
			if not isExpandable(inst) then return end
			expanded = not expanded
			ChevronBtn.Text = chevron(expanded)
			ChildrenHolder.Visible = expanded
			if expanded then buildChildren() end
		end

		local function selectRow()
			clearAllSelections()
			NameLabel.BackgroundTransparency = 0
			NameLabel.BackgroundColor3 = Theme.SelectBg
			NameLabel.TextColor3 = Theme.Text
			pathBar.Text = getInstancePath(inst)
			if selectable then
				chosen = inst
				setOKEnabled(true)
			else
				chosen = nil
				setOKEnabled(false)
			end
		end

		-- Events
		ChevronBtn.MouseButton1Click:Connect(toggleExpand)
		Row.MouseButton1Click:Connect(selectRow)
		Row.MouseButton2Click:Connect(toggleExpand) -- right-click toggles
		--Row.MouseButton1DoubleClick:Connect(toggleExpand) -- double-click toggles

		return Node
	end

	-- Build limited roots
	local rootNames: {string} = opts.roots or DEFAULT_ROOTS
	for _, name in ipairs(rootNames) do
		local svc = safeGetService(name)
		if svc then
			newNode(svc, 0).Parent = list
		end
	end

	-- Close helper
	local closed = false
	local function close(cancelled: boolean)
		if closed then return end
		closed = true
		if not cancelled and chosen then
			targetValue.Value = chosen
			triggerButton.Text = chosen.Name
		end
		overlay:Destroy()
	end

	-- Buttons
	btnCancel.MouseButton1Click:Connect(function() close(true) end)
	btnOK.MouseButton1Click:Connect(function() if btnOK.Active and chosen then close(false) end end)

	-- ESC cancels
	local escConn; escConn = UIS.InputBegan:Connect(function(input, gp)
		if gp then return end
		if input.KeyCode == Enum.KeyCode.Escape then
			if escConn then escConn:Disconnect() end
			close(true)
		end
	end)

	-- Click-outside cancels
	overlay.InputBegan:Connect(function(input: InputObject)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			local p = input.Position
			local abs = panel.AbsolutePosition
			local size = panel.AbsoluteSize
			local inside = p.X >= abs.X and p.X <= abs.X + size.X and p.Y >= abs.Y and p.Y <= abs.Y + size.Y
			if not inside then close(true) end
		end
	end)

	-- Handle for external close if needed
	local modal = setmetatable({}, ModalObjectPicker)
	function modal:Close(cancelled: boolean?)
		close(cancelled == nil and true or cancelled)
	end
	return modal
end

return ModalObjectPicker
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX9E555AF3B96D4C329180BEA450FE5606">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="DefinesCapabilities">false</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Checkboxes</string>
						<string name="ScriptGuid">{B1BFEB08-76A3-4290-8BEC-4FB5EC56C0EB}</string>
						<ProtectedString name="Source"><![CDATA[local Corners = require(script.Parent.Corners)
local Checkbox = {}

function Checkbox.make(theme, initial, onToggle)
	local box = Instance.new("Frame")
	box.Size = UDim2.fromOffset(20,20)
	box.BackgroundColor3 = Color3.fromRGB(255,255,255)
	box.BorderSizePixel = 0
	Corners.make(box, 4)
	local mark = Instance.new("TextLabel")
	mark.BackgroundTransparency = 1
	mark.Size = UDim2.fromScale(1,1)
	mark.TextXAlignment = Enum.TextXAlignment.Center
	mark.TextYAlignment = Enum.TextYAlignment.Center
	mark.Font = Enum.Font.Gotham
	mark.TextSize = 16
	mark.TextColor3 = Color3.fromRGB(30,30,30)
	mark.Text = initial and "✓" or ""
	mark.Parent = box
	local hit = Instance.new("TextButton")
	hit.BackgroundTransparency = 1
	hit.Size = UDim2.fromScale(1,1)
	hit.AutoButtonColor = false
	hit.Text = ""
	hit.Parent = box
	hit.MouseButton1Click:Connect(function()
		initial = not initial
		mark.Text = initial and "✓" or ""
		if onToggle then onToggle(initial) end
	end)
	return box, function(v)
		initial = (v and true or false)
		mark.Text = initial and "✓" or ""
	end
end

return Checkbox
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX1EA8940D292A4711BB9880E56B80C21D">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="DefinesCapabilities">false</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Corners</string>
						<string name="ScriptGuid">{35A68EA4-B443-4FBD-8727-8D6ACDEF7832}</string>
						<ProtectedString name="Source"><![CDATA[local Corners = {}

function Corners.make(p, r) local c=Instance.new("UICorner"); c.CornerRadius=UDim.new(0,r or 8); c.Parent=p; return c end

return Corners
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX0CF467789B4B46FCAB580CEAD84628B8">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="DefinesCapabilities">false</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Strokes</string>
						<string name="ScriptGuid">{C49112CA-83FE-409D-8898-8375E158C8F9}</string>
						<ProtectedString name="Source"><![CDATA[local Strokes = {}

function Strokes.make(p, c, t) local s=Instance.new("UIStroke"); s.Color=c; s.Thickness=t or 1; s.Parent=p; return s end

return Strokes
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX6D9B31F0D110459BB1945488226EC9F6">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="DefinesCapabilities">false</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Inputs</string>
						<string name="ScriptGuid">{A84D0A2B-C0F2-4381-92CF-EB8B3B6B4CA4}</string>
						<ProtectedString name="Source"><![CDATA[local Corners = require(script.Parent.Corners)
local Strokes = require(script.Parent.Strokes)
local Theme = require(script.Parent.Theme)

local Inputs = {
	label = {},
	stepper = {},
	rowNumber = {}
}


function Inputs.label.make(theme, text, w)
	local l = Instance.new("TextLabel")
	l.BackgroundTransparency = 1
	l.Text = text
	l.TextXAlignment = Enum.TextXAlignment.Left
	l.TextYAlignment = Enum.TextYAlignment.Center
	l.Font = Enum.Font.Gotham
	l.TextSize = 13
	l.TextColor3 = theme.TextSecondary
	l.Size = UDim2.new(0, w or 120, 1, 0)
	return l
end

function Inputs.stepper.make(theme, width, step, min, max, alignRight, text:nil)
	local holder = Instance.new("Frame")
	holder.BackgroundTransparency = 1
	holder.Size = UDim2.fromOffset((width or 56)+16+2, 22)

	if text ~= nil then
		local label = Instance.new("TextLabel")
		label.Text = text
		label.BackgroundTransparency = 1
		label.TextSize = 9
		label.TextColor3 = Color3.new(1, 1, 1)
		label.ZIndex = 5
		label.Size = UDim2.new(0, 45, 1, 0)
		label.Position = UDim2.new(0, 0, 0, 0)
		label.Parent = holder
	end

	local pill = Instance.new("TextBox")
	pill.Size = UDim2.fromOffset(35, 22)
	pill.BackgroundColor3 = Color3.fromRGB(247,248,250)
	pill.TextColor3 = Color3.fromRGB(25,27,32)
	pill.TextXAlignment = Enum.TextXAlignment.Left
	pill.ClearTextOnFocus = false
	pill.Font = Enum.Font.Arial
	pill.TextSize = 14
	pill.Text = ""
	pill.BorderSizePixel = 0
	pill.Position = UDim2.fromOffset(40, 0)
	
	local padding = Instance.new("UIPadding")
	padding.PaddingLeft = UDim.new(0,8)
	padding.Parent = pill
	Corners.make(pill, 8)
	pill.Parent = holder

	local spin = Instance.new("Frame")
	spin.Name = "Spin"
	spin.Size = UDim2.fromOffset(16, 22)
	spin.Position = UDim2.fromOffset((width or 56)+10, 0)
	spin.BackgroundColor3 = theme.ControlBg
	spin.BorderSizePixel = 0
	Corners.make(spin, 6); 
	Strokes.make(spin, theme.ControlBorder, 1)
	spin.Parent = holder

	local up = Instance.new("TextButton")
	up.Size = UDim2.new(1,0,0,11); up.BackgroundTransparency = 1; up.Text = "▲"; up.TextSize = 12
	up.Font = Enum.Font.Gotham; up.TextColor3 = theme.ControlText; up.Parent = spin
	local dn = up:Clone(); dn.Text = "▼"; dn.Position = UDim2.fromOffset(0,11); dn.Parent = spin

	local function clamp(v)
		if min ~= nil and v < min then v = min end
		if max ~= nil and v > max then v = max end
		return v
	end
	
	up.MouseButton1Click:Connect(function()
		local n = tonumber(pill.Text) or 0
		n = clamp(n + (step or 1))
		pill.Text = tostring(n); pill:ReleaseFocus()
	end)
	dn.MouseButton1Click:Connect(function()
		local n = tonumber(pill.Text) or 0
		n = clamp(n - (step or 1))
		pill.Text = tostring(n); pill:ReleaseFocus()
	end)

	return holder, pill
end

return Inputs
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX193964EE6352480290B9B184C04FFD4D">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="DefinesCapabilities">false</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Theme</string>
						<string name="ScriptGuid">{1FF2F68D-5426-435F-91D3-7B7E1CE20468}</string>
						<ProtectedString name="Source"><![CDATA[-- ========= THEME =========
local Theme = {
	WindowBg      = Color3.fromRGB(16, 17, 21),
	ToolbarBg     = Color3.fromRGB(22, 24, 29),
	ToolbarLine   = Color3.fromRGB(57, 62, 72),

	PropsBg       = Color3.fromRGB(24, 26, 32),
	PropsLine     = Color3.fromRGB(38, 41, 48),
	PreviewBg     = Color3.fromRGB(13, 14, 18),

	TextPrimary   = Color3.fromRGB(227, 230, 235),
	TextSecondary = Color3.fromRGB(170, 176, 184),

	ControlBg            = Color3.fromRGB(32, 34, 41),
	ControlBgAlt         = Color3.fromRGB(83, 83, 83),
	ControlBgHover       = Color3.fromRGB(38, 41, 48),
	ControlBgActive      = Color3.fromRGB(46, 49, 58),
	ControlBgDisabled    = Color3.fromRGB(26, 28, 34),
	ControlBgBlue	     = Color3.fromRGB(0, 138, 202),
	ControlBgBlueActive  = Color3.fromRGB(0, 169, 248),
	ControlBgBlueDisabled= Color3.fromRGB(0, 171, 255),
	ControlBorder        = Color3.fromRGB(60, 64, 74),
	ControlText          = Color3.fromRGB(220, 225, 232),
	ControlTextDisabled  = Color3.fromRGB(128, 132, 140),
}

return Theme
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
			</Item>
			<Item class="ModuleScript" referent="RBX1351A300FA0C4658978349F31947E77D">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">DataManager</string>
					<string name="ScriptGuid">{27AA7090-7884-4C42-88F1-690864EA0CD7}</string>
					<ProtectedString name="Source"><![CDATA[-- DataManager (ModuleScript)
-- Hidden persistence for TerraLux using plugin:GetSetting/SetSetting.

local DataManager = {}
DataManager.__index = DataManager

local KEY = "TerraLux_Data_v1"

local DEFAULT_SCHEMA = {
	_schema = { version = 1 },
	ui = { selectedBiome = nil },
	biomes = {}
}

-- ===== Biome defaults =====
local function DEFAULT_BIOME_SETTINGS()
	return {
		altitude = { maxAltitude = 0.1, elevationTrend = 0.1 },
		fractals = {
			amplitude = { L = 0.1, M = 0.1, S = 0.1 },
			frequency = { L = 0.1, M = 0.1, S = 0.1 },
		},
		ridges = {
			amplitude = { L = 0.1, M = 0.1, S = 0.1 },
			frequency = { L = 0.1, M = 0.1, S = 0.1 },
		},
		warping = {
			amplitude = { L = 0.1, S = 0.1 },
			frequency = { L = 0.1, S = 0.1 },
		},
		crevasses = {
			depthAmplitude = 0.1,
			direction = { X = 0.1, Y = 0.1 },
			sharpExponent = 0.1,
			spaceFrequency = 0.1,
		},
		terraces = { blending = 0.1, size = 0.1 },
	}
end

-- ===== Materials defaults (comp-accurate card list) =====
local MATERIAL_ORDER = {
	"Ground","Mud","Sand","Salt","Grass","Leafy Grass","Rock","Basalt",
	"Limestone","Sandstone","Slate","Snow","Ice","Glacier","Cracked Lava",
	"Asphalt","Pavement","Concrete","Cobblestone","Brick","Wood Planks"
}
local function DEFAULT_MATERIAL_ENTRY(layer, name)
	local matColor = workspace.Terrain:GetMaterialColor(Enum.Material[string.gsub(name, "%s", "")])
	return {
		apply = false,
		layer = layer,
		color = {
			matColor.R*255,
			matColor.G*255,
			matColor.B*255,
		},
		filters = {}
	}
end

local function DEFAULT_MATERIALS()
	local data = {}
	for i, name in ipairs(MATERIAL_ORDER) do
		data[name] = DEFAULT_MATERIAL_ENTRY(i, name)
	end
	
	return { order = MATERIAL_ORDER, data = data }
end

-- ===== Environmental defaults per category =====
local function DEFAULT_ENV_CATEGORY()
	return {
		color = {200,120,80},
		scaleMin = 1.0, scaleMax = 1.0,
		altitude = 0.0, slope = 0.0, spacing = 0,
		rotAxis = { X=false, Y=true, Z=false },
		maxDeg = { X=0, Y=180, Z=0 },
		alignToNormal = false,
		avoidFootprint = 0,
		selfOverlap = false,
		avoid = {},            -- array of category names
		allowed = {},          -- map materialName -> boolean
		models = {},           -- array of { name, ref }
	}
end
local function DEFAULT_ENVIRONMENTAL()
	return { order = {}, data = {}, ui = { cardExpanded = {} } }
end

-- ===== Stamps defaults (clone of Environmental) =====
local function DEFAULT_STAMP_CATEGORY()
	-- clone + add StampFillType default
	local t = DEFAULT_ENV_CATEGORY()
	t.StampFillType = "solid" -- "solid" (Protruding) or "air" (Receding)
	return t
end
local function DEFAULT_STAMPS()
	return { order = {}, data = {}, ui = { cardExpanded = {} } }
end

-- ===== Internals =====
local _plugin: Plugin? = nil
local _state = nil

local function deepClone(tbl)
	local t = {}
	for k, v in pairs(tbl) do
		if type(v) == "table" then t[k] = deepClone(v) else t[k] = v end
	end
	return t
end

local function save()
	if not _plugin then return false, "plugin nil" end
	_plugin:SetSetting(KEY, _state)
	return true
end

local function mergeDefaults(dst, def)
	for k, v in pairs(def) do
		if type(v) == "table" then
			if type(dst[k]) ~= "table" then dst[k] = deepClone(v) else mergeDefaults(dst[k], v) end
		else
			if dst[k] == nil then dst[k] = v end
		end
	end
end

-- ===== Public API =====
function DataManager.Init(plugin: Plugin)
	_plugin = plugin
	local loaded = _plugin:GetSetting(KEY)

	if type(loaded) ~= "table" or type(loaded._schema) ~= "table" then
		_state = deepClone(DEFAULT_SCHEMA)
		local ok, err = save()
		if not ok then return false, err end
	else
		_state = loaded
		-- Backfill defaults for older saves
		for _, biome in pairs(_state.biomes or {}) do
			biome.biome = biome.biome or {}
			mergeDefaults(biome.biome, DEFAULT_BIOME_SETTINGS())

			-- Materials migration/backfill
			if type(biome.materials) ~= "table" or not biome.materials.order or not biome.materials.data then
				biome.materials = DEFAULT_MATERIALS()
			else
				for _, name in ipairs(biome.materials.order) do
					local m = biome.materials.data[name]
					if not m then
						biome.materials.data[name] = DEFAULT_MATERIAL_ENTRY(1)
					else
						if m.apply == nil then m.apply = false end
						if m.layer == nil then m.layer = 1 end
						if type(m.color) ~= "table" then m.color = {111,126,62} end
						if type(m.filters) ~= "table" then m.filters = {} end
					end
				end
			end

			-- Environmental migration/backfill
			if type(biome.environmental) ~= "table" or not biome.environmental.order or not biome.environmental.data then
				biome.environmental = DEFAULT_ENVIRONMENTAL()
			else
				biome.environmental.ui = biome.environmental.ui or { cardExpanded = {} }
				biome.environmental.ui.cardExpanded = biome.environmental.ui.cardExpanded or {}
				for _, name in ipairs(biome.environmental.order) do
					local e = biome.environmental.data[name]
					if not e then
						biome.environmental.data[name] = DEFAULT_ENV_CATEGORY()
					else
						mergeDefaults(e, DEFAULT_ENV_CATEGORY())
					end
				end
			end

			-- Stamps migration/backfill (new)
			if type(biome.stamps) ~= "table" or not biome.stamps.order or not biome.stamps.data then
				biome.stamps = DEFAULT_STAMPS()
			else
				biome.stamps.ui = biome.stamps.ui or { cardExpanded = {} }
				biome.stamps.ui.cardExpanded = biome.stamps.ui.cardExpanded or {}
				for _, name in ipairs(biome.stamps.order) do
					local s = biome.stamps.data[name]
					if not s then
						biome.stamps.data[name] = DEFAULT_STAMP_CATEGORY()
					else
						mergeDefaults(s, DEFAULT_STAMP_CATEGORY())
					end
				end
			end

			-- Per-biome UI memory for card expansion
			biome.ui = biome.ui or {}
			biome.ui.cardExpanded = biome.ui.cardExpanded or {} -- [cardKey]=boolean
		end
	end

	return true, _state
end

function DataManager.GetState()
	return _state
end

function DataManager.GetSelectedBiome(): string?
	return _state and _state.ui and _state.ui.selectedBiome or nil
end

function DataManager.SelectBiome(name: string)
	if not _state then return false, "uninitialized" end
	if not _state.biomes[name] then return false, "not found" end
	_state.ui.selectedBiome = name
	return save()
end

function DataManager.BiomeExists(name: string): boolean
	return _state and _state.biomes and _state.biomes[name] ~= nil
end

function DataManager.ListBiomes(): {string}
	local names = {}
	if not _state then return names end
	for n in pairs(_state.biomes) do table.insert(names, n) end
	table.sort(names, function(a,b) return a:lower() < b:lower() end)
	return names
end

local function getAtPath(t, path)
	local node = t
	for _, key in ipairs(path) do
		if type(node) ~= "table" then return nil end
		node = node[key]
		if node == nil then return nil end
	end
	return node
end

local function setAtPath(t, path, value)
	local node = t
	for i = 1, (#path - 1) do
		local k = path[i]
		if type(node[k]) ~= "table" then node[k] = {} end
		node = node[k]
	end
	node[path[#path]] = value
end

function DataManager.GetSelectedBiomeSettings()
	if not _state or not _state.ui.selectedBiome then return nil end
	local b = _state.biomes[_state.ui.selectedBiome]
	return b and b.biome or nil
end

function DataManager.GetSelectedPath(path)
	if not _state or not _state.ui.selectedBiome then return nil end
	local b = _state.biomes[_state.ui.selectedBiome]
	if not b then return nil end
	return getAtPath(b, path)
end

function DataManager.SetSelectedPath(path, value)
	if not _state or not _state.ui.selectedBiome then return false, "no selection" end
	local b = _state.biomes[_state.ui.selectedBiome]
	if not b then return false, "not found" end
	setAtPath(b, path, value)
	return save()
end

function DataManager.CreateBiome(name: string)
	if not _state then return false, "uninitialized" end
	if name == nil or name == "" then return false, "empty" end
	if _state.biomes[name] then return false, "duplicate" end

	_state.biomes[name] = {
		world         = {},
		biome         = DEFAULT_BIOME_SETTINGS(),
		materials     = DEFAULT_MATERIALS(),
		environmental = DEFAULT_ENVIRONMENTAL(),
		stamps        = DEFAULT_STAMPS(),  -- NEW default
		lighting      = {},
		caves         = {},
		ui            = { cardExpanded = {} }, -- per-biome UI memory
		createdAt     = os.time(),
	}

	_state.ui.selectedBiome = name
	return save()
end

function DataManager.DeleteBiome(name: string)
	if not _state or not _state.biomes[name] then return false end
	_state.biomes[name] = nil
	if _state.ui.selectedBiome == name then
		_state.ui.selectedBiome = nil
	end
	return save()
end

-- ===== Materials API (selected biome scope) =====
function DataManager.ListMaterials()
	if not _state or not _state.ui.selectedBiome then return {} end
	local b = _state.biomes[_state.ui.selectedBiome]
	if not b or not b.materials or not b.materials.order then return {} end
	return b.materials.order
end

function DataManager.GetMaterial(name)
	if not _state or not _state.ui.selectedBiome then return nil end
	local b = _state.biomes[_state.ui.selectedBiome]
	if not b or not b.materials or not b.materials.data then return nil end
	return b.materials.data[name]
end

function DataManager.SetMaterialPath(name, path, value)
	if not _state or not _state.ui.selectedBiome then return false, "no selection" end
	local b = _state.biomes[_state.ui.selectedBiome]; if not b then return false, "no biome" end
	local m = (((b.materials or {}).data) or {})[name]; if not m then return false, "no material" end

	local node = m
	for i = 1, (#path - 1) do
		local k = path[i]
		if type(k) == "number" then
			if type(node) ~= "table" then return false, "invalid path" end
		else
			if type(node[k]) ~= "table" then node[k] = {} end
		end
		node = node[k]
	end
	node[path[#path]] = value
	return save()
end

function DataManager.AddMaterialFilter(name)
	if not _state or not _state.ui.selectedBiome then return false end
	local m = DataManager.GetMaterial(name); if not m then return false end
	m.filters = m.filters or {}
	table.insert(m.filters, { name = "Custom Filter Name", altitude=0.0, slope=0.0, curve=0.0 })
	return save()
end

function DataManager.RemoveMaterialFilter(name, index)
	if not _state or not _state.ui.selectedBiome then return false end
	local m = DataManager.GetMaterial(name); if not m then return false end
	if index < 0 or index > #(m.filters or {}) then return false end
	table.remove(m.filters, index)
	return save()
end

-- ====== Card expansion memory (biome-scoped generic) ======
local function _cardKeyKey(cardKey: string) return tostring(cardKey) end
function DataManager.GetCardExpanded(cardKey: string): boolean?
	if not _state or not _state.ui.selectedBiome then return nil end
	local b = _state.biomes[_state.ui.selectedBiome]
	if not b then return nil end
	b.ui = b.ui or {}; b.ui.cardExpanded = b.ui.cardExpanded or {}
	local v = b.ui.cardExpanded[_cardKeyKey(cardKey)]
	if v == nil then return nil end
	return v and true or false
end
function DataManager.SetCardExpanded(cardKey: string, expanded: boolean)
	if not _state or not _state.ui.selectedBiome then return false end
	local b = _state.biomes[_state.ui.selectedBiome]
	if not b then return false end
	b.ui = b.ui or {}; b.ui.cardExpanded = b.ui.cardExpanded or {}
	b.ui.cardExpanded[_cardKeyKey(cardKey)] = expanded and true or false
	return save()
end

-- ===== Environmental API (selected biome scope) =====
local function _envRoot()
	if not _state or not _state.ui.selectedBiome then return nil end
	local b = _state.biomes[_state.ui.selectedBiome]
	if not b then return nil end
	b.environmental = b.environmental or DEFAULT_ENVIRONMENTAL()
	b.environmental.order = b.environmental.order or {}
	b.environmental.data  = b.environmental.data  or {}
	b.environmental.ui    = b.environmental.ui    or { cardExpanded = {} }
	b.environmental.ui.cardExpanded = b.environmental.ui.cardExpanded or {}
	return b.environmental
end

function DataManager.EnvListCategories()
	local env = _envRoot(); if not env then return {} end
	return env.order
end

function DataManager.EnvCategoryExists(name: string)
	local env = _envRoot(); if not env then return false end
	return env.data[name] ~= nil
end

function DataManager.EnvCreateCategory(name: string)
	local env = _envRoot(); if not env then return false, "no selection" end
	if name == nil or name == "" then return false, "empty" end
	if env.data[name] then return false, "duplicate" end
	env.data[name] = DEFAULT_ENV_CATEGORY()
	table.insert(env.order, name)
	return save()
end

function DataManager.EnvDeleteCategory(name: string)
	local env = _envRoot(); if not env then return false end
	if not env.data[name] then return false end
	env.data[name] = nil
	for i, n in ipairs(env.order) do
		if n == name then table.remove(env.order, i) break end
	end
	for _, n in ipairs(env.order) do
		local cat = env.data[n]
		if cat and type(cat.avoid) == "table" then
			local j = 1
			while j <= #cat.avoid do
				if cat.avoid[j] == name then table.remove(cat.avoid, j) else j += 1 end
			end
		end
	end
	return save()
end

function DataManager.EnvRenameCategory(oldName: string, newName: string)
	local env = _envRoot(); if not env then return false end
	if not env.data[oldName] then return false, "missing" end
	if env.data[newName] then return false, "duplicate" end
	env.data[newName] = env.data[oldName]
	env.data[oldName] = nil
	for i, n in ipairs(env.order) do
		if n == oldName then env.order[i] = newName break end
	end
	for _, n in ipairs(env.order) do
		local cat = env.data[n]
		if cat and type(cat.avoid) == "table" then
			for i=1,#cat.avoid do
				if cat.avoid[i] == oldName then cat.avoid[i] = newName end
			end
		end
	end
	return save()
end

function DataManager.EnvGetCategory(name: string)
	local env = _envRoot(); if not env then return nil end
	local c = env.data[name]
	if not c then return nil end
	mergeDefaults(c, DEFAULT_ENV_CATEGORY())
	return c
end

function DataManager.EnvSetCategoryPath(name: string, path, value)
	local env = _envRoot(); if not env then return false, "no selection" end
	local c = env.data[name]; if not c then return false, "no category" end
	local node = c
	for i=1,(#path-1) do
		local k = path[i]
		if type(node[k]) ~= "table" then node[k] = {} end
		node = node[k]
	end
	node[path[#path]] = value
	return save()
end

function DataManager.EnvRemoveAvoid(name: string, index: number)
	local c = DataManager.EnvGetCategory(name); if not c then return false end
	if index < 1 or index > #(c.avoid or {}) then return false end
	table.remove(c.avoid, index)
	return save()
end

function DataManager.EnvRemoveModel(name: string, index: number)
	local c = DataManager.EnvGetCategory(name); if not c then return false end
	if index < 1 or index > #(c.models or {}) then return false end
	table.remove(c.models, index)
	return save()
end

-- ===== Stamps API (selected biome scope) =====
local function _stampsRoot()
	if not _state or not _state.ui.selectedBiome then return nil end
	local b = _state.biomes[_state.ui.selectedBiome]
	if not b then return nil end
	b.stamps = b.stamps or DEFAULT_STAMPS()
	b.stamps.order = b.stamps.order or {}
	b.stamps.data  = b.stamps.data  or {}
	b.stamps.ui    = b.stamps.ui    or { cardExpanded = {} }
	b.stamps.ui.cardExpanded = b.stamps.ui.cardExpanded or {}
	return b.stamps
end

function DataManager.StampsListCategories()
	local s = _stampsRoot(); if not s then return {} end
	return s.order
end

function DataManager.StampsCategoryExists(name: string)
	local s = _stampsRoot(); if not s then return false end
	return s.data[name] ~= nil
end

function DataManager.StampsCreateCategory(name: string)
	local s = _stampsRoot(); if not s then return false, "no selection" end
	if name == nil or name == "" then return false, "empty" end
	if s.data[name] then return false, "duplicate" end
	s.data[name] = DEFAULT_STAMP_CATEGORY()
	table.insert(s.order, name)
	return save()
end

function DataManager.StampsDeleteCategory(name: string)
	local s = _stampsRoot(); if not s then return false end
	if not s.data[name] then return false end
	s.data[name] = nil
	for i, n in ipairs(s.order) do
		if n == name then table.remove(s.order, i) break end
	end
	for _, n in ipairs(s.order) do
		local cat = s.data[n]
		if cat and type(cat.avoid) == "table" then
			local j = 1
			while j <= #cat.avoid do
				if cat.avoid[j] == name then table.remove(cat.avoid, j) else j += 1 end
			end
		end
	end
	return save()
end

function DataManager.StampsRenameCategory(oldName: string, newName: string)
	local s = _stampsRoot(); if not s then return false end
	if not s.data[oldName] then return false, "missing" end
	if s.data[newName] then return false, "duplicate" end
	s.data[newName] = s.data[oldName]
	s.data[oldName] = nil
	for i, n in ipairs(s.order) do
		if n == oldName then s.order[i] = newName break end
	end
	for _, n in ipairs(s.order) do
		local cat = s.data[n]
		if cat and type(cat.avoid) == "table" then
			for i=1,#cat.avoid do
				if cat.avoid[i] == oldName then cat.avoid[i] = newName end
			end
		end
	end
	return save()
end

function DataManager.StampsGetCategory(name: string)
	local s = _stampsRoot(); if not s then return nil end
	local c = s.data[name]
	if not c then return nil end
	mergeDefaults(c, DEFAULT_STAMP_CATEGORY())
	return c
end

function DataManager.StampsSetCategoryPath(name: string, path, value)
	local s = _stampsRoot(); if not s then return false, "no selection" end
	local c = s.data[name]; if not c then return false, "no category" end
	local node = c
	for i=1,(#path-1) do
		local k = path[i]
		if type(node[k]) ~= "table" then node[k] = {} end
		node = node[k]
	end
	node[path[#path]] = value
	return save()
end

function DataManager.StampsRemoveAvoid(name: string, index: number)
	local c = DataManager.StampsGetCategory(name); if not c then return false end
	if index < 1 or index > #(c.avoid or {}) then return false end
	table.remove(c.avoid, index)
	return save()
end

function DataManager.StampsRemoveModel(name: string, index: number)
	local c = DataManager.StampsGetCategory(name); if not c then return false end
	if index < 1 or index > #(c.models or {}) then return false end
	table.remove(c.models, index)
	return save()
end

return DataManager
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXCEAAB47FB925435490F8139445ACD36C">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">BiomeProps</string>
					<string name="ScriptGuid">{DB7A93F7-4784-4306-81A2-9F6BF50B4630}</string>
					<ProtectedString name="Source"><![CDATA[-- BiomeProps (ModuleScript)
-- Builds Biome property cards, binds fields to DataManager paths, loads/saves on change.

local BiomeProps = {}
BiomeProps.__index = BiomeProps

-- descriptor maps fields to schema paths for DM
local SPEC = {
	{ card="Altitude", key="altitude", rows = {
		{ label="Elevation Trend", minis=nil, width=30, path={{"biome","altitude","elevationTrend"}} },
		{ label="Max Altitude",    minis=nil, width=30, path={{"biome","altitude","maxAltitude"}} },
	}},
	{ card="Crevasses", key="crevasses", rows = {
		{ label="Depth Amplitude", minis=nil,    width=30, path={{"biome","crevasses","depthAmplitude"}} },
		{ label="Direction",       minis={"X","Y"}, width={30,30}, path={
			{"biome","crevasses","direction","X"},
			{"biome","crevasses","direction","Y"},
		}},
		{ label="Sharp Exponent",  minis=nil,    width=30, path={{"biome","crevasses","sharpExponent"}} },
		{ label="Space Frequency", minis=nil,    width=30, path={{"biome","crevasses","spaceFrequency"}} },
	}},
	{ card="Fractals", key="fractals", rows = {
		{ label="Amplitude", minis={"L","M","S"}, width={30,30,30}, path={
			{"biome","fractals","amplitude","L"},
			{"biome","fractals","amplitude","M"},
			{"biome","fractals","amplitude","S"},
		}},
		{ label="Frequency", minis={"L","M","S"}, width={30,30,30}, path={
			{"biome","fractals","frequency","L"},
			{"biome","fractals","frequency","M"},
			{"biome","fractals","frequency","S"},
		}},
	}},
	{ card="Ridges", key="ridges", rows = {
		{ label="Amplitude", minis={"L","M","S"}, width={30,30,30}, path={
			{"biome","ridges","amplitude","L"},
			{"biome","ridges","amplitude","M"},
			{"biome","ridges","amplitude","S"},
		}},
		{ label="Frequency", minis={"L","M","S"}, width={30,30,30}, path={
			{"biome","ridges","frequency","L"},
			{"biome","ridges","frequency","M"},
			{"biome","ridges","frequency","S"},
		}},
	}},
	{ card="Terraces", key="terraces", rows = {
		{ label="Blending", minis=nil, width=30, path={{"biome","terraces","blending"}} },
		{ label="Size",     minis=nil, width=30, path={{"biome","terraces","size"}} },
	}},
	{ card="Warping", key="warping", rows = {
		{ label="Amplitude", minis={"L","S"}, width={30,30}, path={
			{"biome","warping","amplitude","L"},
			{"biome","warping","amplitude","S"},
		}},
		{ label="Frequency", minis={"L","S"}, width={30,30}, path={
			{"biome","warping","frequency","L"},
			{"biome","warping","frequency","S"},
		}},
	}},
}

local function toNumberOr(old, s)
	local n = tonumber(s)
	if n == nil then return old end
	return n
end

function BiomeProps.new(uiModule, dmModule, parentScroll)
	local self = setmetatable({}, BiomeProps)
	self.UI = uiModule
	self.DM = dmModule
	self.Parent = parentScroll
	self.fieldMap = {} -- [TextBox] = pathArray
	return self
end

function BiomeProps:clear()
	self.UI.ClearChildrenExcept(self.Parent)
	self.fieldMap = {}
end

function BiomeProps:build()
	-- Build Biome cards (visible when mode == "Biome")
	for _, cardSpec in ipairs(SPEC) do
		local saved = self.DM.GetCardExpanded("BIOME_"..cardSpec.key)
		local card, content = self.UI.PropertyCard({
			Title=cardSpec.card, CardKey="BIOME_"..cardSpec.key, ModeTag="Biome",
			Expanded = (saved == true), -- default collapsed when nil/false
			OnToggle = function(_, expanded) self.DM.SetCardExpanded("BIOME_"..cardSpec.key, expanded) end
		})
		card.ZIndex = 0
		card.Parent = self.Parent
		for _, row in ipairs(cardSpec.rows) do
			local _, area = self.UI.PropertyRow(content, row.label)
			local boxes = self.UI.AddNumberFields(area, row.minis, row.width)
			for i, tb in ipairs(boxes) do
				local path = row.path[i]
				if path then
					self.fieldMap[tb] = path
					tb.FocusLost:Connect(function()
						local current = self.DM.GetSelectedPath(path)
						local newVal = toNumberOr(current or 0, tb.Text)
						if newVal ~= current then
							self.DM.SetSelectedPath(path, newVal)
						end
						tb.Text = tostring(self.DM.GetSelectedPath(path) or "")
					end)
				end
			end
		end
	end
end

function BiomeProps:loadFromDM()
	for tb, path in pairs(self.fieldMap) do
		local v = self.DM.GetSelectedPath(path)
		tb.Text = (v ~= nil) and tostring(v) or ""
	end
end

return BiomeProps
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXF17FE638CDE8489EAD22E784E1D3EAC4">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">MaterialProps</string>
					<string name="ScriptGuid">{7D8B4C01-452B-45E2-81DE-A107E4EA8399}</string>
					<ProtectedString name="Source"><![CDATA[-- MaterialProps (ModuleScript)
-- Comp-accurate Material edit-mode UI. Persists to DataManager per-biome.
local ColorPicker = require(script.Parent.UI.ColorPicker)
local MaterialPreview = require(script.Parent.UI.MaterialPreview)
local Theme = require(script.Parent:WaitForChild("UI").Theme)
local Corners = require(script.Parent.UI.Corners)
local Strokes = require(script.Parent.UI.Strokes)
local Inputs = require(script.Parent.UI.Inputs)

local MaterialProps = {}
MaterialProps.__index = MaterialProps

-- Small UI helpers local to this module
local function label(text, w)
	local l = Instance.new("TextLabel")
	l.BackgroundTransparency = 1
	l.Text = text
	l.TextXAlignment = Enum.TextXAlignment.Left
	l.TextYAlignment = Enum.TextYAlignment.Center
	l.Font = Enum.Font.Gotham
	l.TextSize = 13
	l.TextColor3 = Theme.TextSecondary
	l.Size = UDim2.new(0, w or 80, 1, 0)
	return l
end

-- High-contrast header text for applied materials (blue header)
local function _setHeaderAppliedStyle(card: Frame, applied: boolean)
	local header = card:FindFirstChild("Header")
	if not header then return end
	local title  = header:FindFirstChild("Title")
	local chev   = header:FindFirstChild("Chevron")

	-- Dark text for contrast on blue; fallback to theme.ControlText when not applied
	local darkOnAccent = Color3.fromRGB(25, 27, 32) -- matches INPUT_TEXT used elsewhere
	local normal       = Theme.ControlText

	if title and title:IsA("TextLabel") then
		title.TextColor3 = applied and darkOnAccent or normal
	end
	if chev and chev:IsA("TextButton") then
		chev.TextColor3  = applied and darkOnAccent or normal
	end
end

-- Clear only the Material cards in the shared scroll area
function MaterialProps:_clearMaterialCards()
	for _, ch in ipairs(self.Parent:GetChildren()) do
		if ch:IsA("Frame") and ch:GetAttribute("CardMode") == "Materials" then
			ch:Destroy()
		end
	end
end

function MaterialProps.new(UI, DM, parentScroll)
	return setmetatable({
		UI = UI,
		DM = DM,
		Parent = parentScroll,
		_lastBiomeName = nil, -- track which biome these cards were built for
	}, MaterialProps)
end

-- Build whole Materials panel (cards per material). Cards carry CardMode="Materials".
function MaterialProps:build()
	if not Theme then return end

	-- if already built once, avoid duplicate cards
	for _, ch in ipairs(self.Parent:GetChildren()) do
		if ch:IsA("Frame") and ch:GetAttribute("CardMode") == "Materials" then ch:Destroy() end
	end

	for _, matName in ipairs(self.DM.ListMaterials()) do
		self:_buildOneMaterialCard(matName, Theme)
	end
end

-- Keep cards and controls in sync with DM (rebuild groups if counts differ)
function MaterialProps:loadFromDM()
	if not Theme then return end

	local currBiome = self.DM.GetSelectedBiome and self.DM.GetSelectedBiome() or nil

	-- True “no biome” state: remove any lingering Material cards
	if not currBiome then
		self:_clearMaterialCards()
		self._lastBiomeName = nil
		return
	end

	-- If the biome changed, rebuild fresh to avoid UI state bleed (expansion, checkmarks)
	if self._lastBiomeName ~= currBiome then
		self:_clearMaterialCards()
		self._lastBiomeName = currBiome
		self:build() -- uses DM state for this biome; cards start collapsed (Expanded=false)
		return
	end

	-- Same biome: just refresh
	for _, matName in ipairs(self.DM.ListMaterials()) do
		local card = self.Parent:FindFirstChild("Card_MAT_"..matName)
		if not card then
			self:_buildOneMaterialCard(matName)
		else
			self:_refreshMaterialCard(card, matName)
		end
	end
end


-- ===== internals =====
function MaterialProps:_buildOneMaterialCard(matName)
	local UI = self.UI
	local DM = self.DM

	local cardKey = "MAT_"..matName
	local savedExpanded = DM.GetCardExpanded(cardKey)

	local card, content = UI.PropertyCard({
		Title = matName, CardKey = "MAT_"..matName, ModeTag = "Materials", Expanded = false
	})
	card.Parent = self.Parent
	card.ZIndex = 0
	card.Name = "Card_MAT_"..matName
	card.Content.UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder

	local header = card:FindFirstChild("Header")

	local function setHeaderAppliedVisual(isApplied: boolean)
		if not header then return end
		if isApplied then
			header.BackgroundColor3 = Theme.ControlBgBlueActive
		else
			header.BackgroundColor3 = Theme.ControlBgHover
		end
	end

	local function setAddEnabled(btn: TextButton, enabled: boolean)
		btn.AutoButtonColor = enabled
		btn.Active = enabled
		if enabled then
			btn.BackgroundColor3 = Color3.fromRGB(0, 169, 248)
			btn.TextColor3 = Color3.fromRGB(20,20,20)
		else
			btn.BackgroundColor3 = Color3.fromRGB(60,65,72)
			btn.TextColor3 = Color3.fromRGB(140,140,140)
		end
	end

	local mat = DM.GetMaterial(matName) or {}
	_setHeaderAppliedStyle(card, mat.apply == true)  -- set initial header text/chevron color

	-- Top composite (thumb + Apply + Layer + color row)
	local top = Instance.new("Frame")
	top.BackgroundTransparency = 1
	top.Size = UDim2.new(1, -8, 0, 90)
	top.LayoutOrder = 1
	top.Parent = content

	local thumb = Instance.new("Frame")
	thumb.Size = UDim2.fromOffset(50,50)
	thumb.Position = UDim2.fromOffset(6, 2)
	thumb.BackgroundTransparency = 1
	Corners.make(thumb, 6)
	Strokes.make(thumb, Theme.ControlBorder, 1)
	thumb.Parent = top
	MaterialPreview.attach(thumb, matName)

	local right = Instance.new("Frame")
	right.BackgroundTransparency = 1
	right.Position = UDim2.fromOffset(64, 2)
	right.Size = UDim2.new(1, -72, 1, 0)
	right.Parent = top

	-- Apply checkbox
	do
		local r = Instance.new("Frame"); r.BackgroundTransparency = 1; r.Size = UDim2.new(1,0,0,22); r.Parent = right
		local lab = label("Apply", 60); lab.Parent = r

		local box = Instance.new("Frame")
		box.Size = UDim2.fromOffset(20,20)
		box.AnchorPoint = Vector2.new(1,0)
		box.Position = UDim2.new(1, 0, 0, 0)
		box.BackgroundColor3 = Color3.fromRGB(255,255,255)
		box.BorderSizePixel = 0
		Corners.make(box, 4)
		box.Parent = r

		local mark = Instance.new("TextLabel")
		mark.BackgroundTransparency = 1
		mark.Size = UDim2.fromScale(1,1)
		mark.TextXAlignment = Enum.TextXAlignment.Center
		mark.TextYAlignment = Enum.TextYAlignment.Center
		mark.Font = Enum.Font.Gotham
		mark.TextSize = 16
		mark.TextColor3 = Color3.fromRGB(30,30,30)
		mark.Text = (mat.apply and "✓") or ""
		mark.Parent = box

		local hit = Instance.new("TextButton")
		hit.BackgroundTransparency = 1
		hit.Size = UDim2.fromScale(1,1)
		hit.AutoButtonColor = false
		hit.Text = ""
		hit.Parent = box

		local function applyChanged(nextVal)
			DM.SetMaterialPath(matName, {"apply"}, nextVal)
			mat = DM.GetMaterial(matName)
			mark.Text = (mat.apply and "✓") or ""
			setHeaderAppliedVisual(mat.apply)
			-- gate add-button availability
			local bar = card.Content:FindFirstChild("MaterialFiltersBar")
			if bar then
				local addBtn = bar:FindFirstChild("AddFilterButton")
				if addBtn and addBtn:IsA("TextButton") then
					setAddEnabled(addBtn, mat.apply)
				end
			end
		end

		hit.MouseButton1Click:Connect(function()
			local nextVal = not mat.apply
			applyChanged(nextVal)
			_setHeaderAppliedStyle(card, mat.apply == true) 
		end)

		-- initial header visual
		setHeaderAppliedVisual(mat.apply)
	end

	-- Layer stepper
	do
		local r = Instance.new("Frame"); 
		r.BackgroundTransparency = 1; 
		r.Size = UDim2.new(1,0,0,22); 
		r.Parent = right

		local lab = label("Layer", 60); 
		lab.Position = UDim2.new(0, 0, 0, 30); 
		lab.Parent = r

		local step, pill = Inputs.stepper.make(Theme, 65, 1, 0, 99)
		step.AnchorPoint = Vector2.new(1,0); 
		step.Position = UDim2.new(1, 0, 0, 30); 
		step.Parent = r

		pill.Text = tostring(mat.layer or 1)
		pill.Size = UDim2.fromOffset(45, 20)
		pill.FocusLost:Connect(function()
			local n = tonumber(pill.Text) or 1
			DM.SetMaterialPath(matName, {"layer"}, n)
			pill.Text = tostring(DM.GetMaterial(matName).layer or 1)
			mat = DM.GetMaterial(matName)
		end)
	end

	-- Color swatch + [r,g,b]
	do
		local r = Instance.new("Frame"); r.BackgroundTransparency = 1; r.Size = UDim2.new(1,0,0,22); r.Parent = right
		local col = Instance.new("ImageButton")
		col.Size = UDim2.fromOffset(18,18)
		col.Position = UDim2.fromOffset(0, 60)
		col.BorderSizePixel = 0
		Corners.make(col, 3)
		col.Parent = r
		local cval = mat.color or {111,126,62}
		col.ImageTransparency = 1
		col.BackgroundColor3 = Color3.fromRGB(cval[1], cval[2], cval[3])

		col.MouseButton1Click:Connect(function()
			ColorPicker.Show(r:FindFirstAncestor("Root"), {
				title = "Material Color Picker",
				color = col.BackgroundColor3,
				onConfirm = function(c: Color3)
					col.BackgroundColor3 = c
					
					-- persist
					local matNameTrimmed = string.gsub(matName, "%s", "")
					DM.SetMaterialPath(matName, {"color"}, { math.floor(c.R*255+0.5), math.floor(c.G*255+0.5), math.floor(c.B*255+0.5) })
					workspace.Terrain:SetMaterialColor(string.gsub(matNameTrimmed, "%s", ""), c)	
				end,
			})
		end)

		local txt = Instance.new("TextLabel")
		txt.BackgroundTransparency = 1
		txt.TextXAlignment = Enum.TextXAlignment.Left
		txt.TextYAlignment = Enum.TextYAlignment.Center
		txt.Font = Enum.Font.Gotham
		txt.TextSize = 13
		txt.TextColor3 = Theme.TextSecondary
		txt.Text = string.format("  [%d, %d, %d]", cval[1], cval[2], cval[3])
		txt.Position = UDim2.fromOffset(35, 60)
		txt.Size = UDim2.new(1, -24, 1, 0)
		txt.Parent = r
	end

	-- "Material Filters" bar + [+]
	local bar = Instance.new("TextButton")
	bar.Name = "MaterialFiltersBar"
	bar.BackgroundColor3 = Theme.ControlBgHover
	bar.BorderSizePixel = 0
	bar.Text = ""
	bar.Size = UDim2.new(1, -8, 0, 32)
	bar.LayoutOrder = 2
	bar.Parent = content
	Corners.make(bar, 6)

	local barLab = Instance.new("TextLabel")
	barLab.BackgroundTransparency = 1
	barLab.Text = "Material Filters"
	barLab.Font = Enum.Font.GothamMedium
	barLab.TextSize = 13
	barLab.TextColor3 = Theme.ControlText
	barLab.TextXAlignment = Enum.TextXAlignment.Left
	barLab.Position = UDim2.fromOffset(35, 0)
	barLab.Size = UDim2.new(1, -36, 1, 0)
	barLab.Parent = bar

	local addBtn = Instance.new("TextButton")
	addBtn.Name = "AddFilterButton"
	addBtn.Size = UDim2.fromOffset(20,20)
	addBtn.AnchorPoint = Vector2.new(0,0.5)
	addBtn.Position = UDim2.new(0, 8, 0.5, 0)
	addBtn.BackgroundColor3 = Color3.fromRGB(0, 169, 248)
	addBtn.AutoButtonColor = true
	addBtn.Text = "+"
	addBtn.Font = Enum.Font.GothamBold
	addBtn.TextSize = 16
	addBtn.TextColor3 = Color3.fromRGB(20,20,20)
	addBtn.Parent = bar
	Corners.make(addBtn, 5)

	local chevron = Instance.new("TextButton")
	chevron.Name = "Chevron"
	chevron.BackgroundTransparency = 1
	chevron.AutoButtonColor = false
	chevron.Text = "▲"
	chevron.Font = Enum.Font.Gotham
	chevron.TextSize = 18
	chevron.TextColor3 = Color3.new(0.909804, 0.909804, 0.909804)
	chevron.AnchorPoint = Vector2.new(1, 0.5)
	chevron.Position = UDim2.new(1, -8, 0.5, 0)
	chevron.Size = UDim2.fromOffset(20, 20)
	chevron.ZIndex = 3
	chevron.Parent = bar

	-- Holder for filter groups
	local groupsHolder = Instance.new("Frame")
	groupsHolder.Name = "GroupsHolder"
	groupsHolder.BackgroundTransparency = 1
	groupsHolder.AutomaticSize = Enum.AutomaticSize.Y
	groupsHolder.Size = UDim2.new(1, 0, 0, 0)
	groupsHolder.LayoutOrder = 3
	groupsHolder.Visible = false
	groupsHolder.Parent = content

	local list = Instance.new("UIListLayout")
	list.Padding = UDim.new(0, 6)
	list.Parent = groupsHolder

	local function rebuildGroups()
		for _, ch in ipairs(groupsHolder:GetChildren()) do
			if ch:IsA("Frame") then ch:Destroy() end
		end
		local m = DM.GetMaterial(matName) or { filters = {} }
		for i, g in ipairs(m.filters or {}) do
			self:_buildOneFilterGroup(groupsHolder, matName, i, g)
		end
	end
	rebuildGroups()

	-- Gate add button by material.apply
	local function refreshAddGate()
		local applied = (DM.GetMaterial(matName) or {}).apply and true or false
		setAddEnabled(addBtn, applied)
	end
	refreshAddGate()

	addBtn.MouseButton1Click:Connect(function()
		if not ((DM.GetMaterial(matName) or {}).apply) then return end
		DM.AddMaterialFilter(matName)
		rebuildGroups()
	end)
	
	bar.MouseButton1Click:Connect(function() 
		if groupsHolder.Visible == true then
			groupsHolder.Visible = false
			chevron.Text = "▲"
		else
			groupsHolder.Visible = true
			chevron.Text = "▼"
		end
	end)

	chevron.MouseButton1Click:Connect(function() 
		if groupsHolder.Visible == true then
			groupsHolder.Visible = false
			chevron.Text = "▲"
		else
			groupsHolder.Visible = true
			chevron.Text = "▼"
		end
	end)	
end

function MaterialProps:_refreshMaterialCard(card, matName)
	local DM = self.DM
	local mat = DM.GetMaterial(matName) or {}
	_setHeaderAppliedStyle(card, mat.apply == true)  -- keep header text/chevron in sync

	-- Header applied color + Apply gate for Add button
	local header = card:FindFirstChild("Header")
	if header then header.BackgroundColor3 = mat.apply and Theme.ControlBgBlueActive or Theme.ControlBgHover end
	local bar = card.Content and card.Content:FindFirstChild("MaterialFiltersBar")
	if bar then
		local addBtn = bar:FindFirstChild("AddFilterButton")
		if addBtn and addBtn:IsA("TextButton") then
			addBtn.Active = mat.apply; addBtn.AutoButtonColor = mat.apply
			if mat.apply then
				addBtn.BackgroundColor3 = Color3.fromRGB(0,169,248); addBtn.TextColor3 = Color3.fromRGB(20,20,20)
			else
				addBtn.BackgroundColor3 = Color3.fromRGB(60,65,72); addBtn.TextColor3 = Color3.fromRGB(140,140,140)
			end
		end
	end

	-- Apply checkbox mark
	local top = card.Content and card.Content:FindFirstChildOfClass("Frame")
	if top then
		local right = top:FindFirstChildWhichIsA("Frame")
		if right then
			local applyRow = right:GetChildren()[1]
			if applyRow then
				local chk = applyRow:FindFirstChildWhichIsA("Frame")
				if chk then
					local mark = chk:FindFirstChildOfClass("TextLabel")
					if mark then mark.Text = (mat.apply and "✓") or "" end
				end
			end
			local layerRow = right:GetChildren()[2]
			if layerRow then
				local step = layerRow:FindFirstChildWhichIsA("Frame")
				if step and step:FindFirstChildOfClass("TextBox") then
					step:FindFirstChildOfClass("TextBox").Text = tostring(mat.layer or 1)
				end
			end
			local colorRow = right:GetChildren()[3]
			if colorRow then
				local col = colorRow:FindFirstChildOfClass("ImageButton")
				local txt = colorRow:FindFirstChildOfClass("TextLabel")
				local cval = mat.color or {111,126,62}
				if col then col.BackgroundColor3 = Color3.fromRGB(cval[1],cval[2],cval[3]) end
				if txt then txt.Text = string.format("  [%d, %d, %d]", cval[1], cval[2], cval[3]) end
			end
		end
	end

	-- Rebuild groups to match DM
	local groupsHolder = card.Content and card.Content:FindFirstChild("GroupsHolder")
	if groupsHolder then
		for _, ch in ipairs(groupsHolder:GetChildren()) do
			if ch:IsA("Frame") then ch:Destroy() end
		end
		local list = groupsHolder:FindFirstChildOfClass("UIListLayout")
		if not list then list = Instance.new("UIListLayout"); list.Padding = UDim.new(0, 6); list.Parent = groupsHolder end
		local m = DM.GetMaterial(matName) or { filters = {} }
		for i, g in ipairs(m.filters or {}) do
			self:_buildOneFilterGroup(groupsHolder, matName, i, g)
		end
	end
end

-- Single filter group with working expand/collapse
function MaterialProps:_buildOneFilterGroup(parent, matName, idx, g)
	local DM = self.DM

	local wrap = Instance.new("Frame")
	wrap.Name = "FilterGroup_"..idx
	wrap.BackgroundColor3 = Theme.ControlBg
	wrap.BorderSizePixel = 0
	wrap.AutomaticSize = Enum.AutomaticSize.Y
	wrap.Size = UDim2.new(1, -8, 0, 0)
	wrap.Position = UDim2.fromOffset(4,0)
	wrap.Parent = parent
	
	local Padding = Instance.new("UIPadding")
	-- Padding.PaddingTop = UDim.new(0, 10)
	Padding.PaddingBottom = UDim.new(0, 5)
	Padding.Parent = wrap
	
	Corners.make(wrap, 6); 
	Strokes.make(wrap, Theme.ControlBorder, 1)

	-- Group header: red minus + name + caret
	local header = Instance.new("Frame")
	header.BackgroundColor3 = Theme.ControlBgActive
	header.BorderSizePixel = 0
	header.Size = UDim2.new(1, -8, 0, 26)
	header.Position = UDim2.fromOffset(4,4)
	header.Parent = wrap
	Corners.make(header, 6)

	local minus = Instance.new("TextButton")
	minus.Size = UDim2.fromOffset(20,20)
	minus.Position = UDim2.fromOffset(6,3)
	minus.BackgroundColor3 = Color3.fromRGB(232, 58, 68)
	minus.AutoButtonColor = false
	minus.Text = "–"
	minus.Font = Enum.Font.GothamBold
	minus.TextSize = 14
	minus.TextColor3 = Color3.fromRGB(255, 255, 255)
	minus.ZIndex = 20
	minus.Parent = header
	Corners.make(minus, 4)

	local nameLbl = Instance.new("TextLabel")
	nameLbl.BackgroundTransparency = 1
	nameLbl.TextXAlignment = Enum.TextXAlignment.Left
	nameLbl.Font = Enum.Font.GothamMedium
	nameLbl.TextSize = 13
	nameLbl.TextColor3 = Theme.ControlText
	nameLbl.Text = g.name or "Custom Filter Name"
	nameLbl.Position = UDim2.fromOffset(32, 0)
	nameLbl.Size = UDim2.new(1, -60, 1, 0)
	nameLbl.Parent = header

	local caret = Instance.new("TextLabel")
	caret.BackgroundTransparency = 1
	caret.Text = "▼"
	caret.Font = Enum.Font.Gotham
	caret.TextSize = 14
	caret.TextColor3 = Theme.ControlText
	caret.AnchorPoint = Vector2.new(1,0.5)
	caret.Position = UDim2.new(1, -8, 0.5, 0)
	caret.Size = UDim2.fromOffset(16,16)
	caret.Parent = header

	local headerHit = Instance.new("TextButton")
	headerHit.BackgroundTransparency = 1
	headerHit.Text = ""
	headerHit.AutoButtonColor = false
	headerHit.Size = UDim2.fromScale(1,1)
	headerHit.Parent = header

	local inner = Instance.new("Frame")
	inner.BackgroundTransparency = 1
	inner.AutomaticSize = Enum.AutomaticSize.Y
	inner.Position = UDim2.fromOffset(4, 34)
	inner.Size = UDim2.new(1, -8, 0, 0)
	inner.Parent = wrap

	local innerList = Instance.new("UIListLayout")
	innerList.Padding = UDim.new(0, 6)
	innerList.Parent = inner

	-- default expanded true for existing UI (feels natural), but you can flip here if needed
	local expanded = true
	local function setExpanded(on)
		expanded = on
		inner.Visible = on
		caret.Text = on and "▼" or "▲"
	end
	setExpanded(true)

	local function addRow(labelText, key, value, iconId)
		local row = Instance.new("Frame")
		row.BackgroundTransparency = 1
		row.Size = UDim2.new(1, 0, 0, 24)
		row.Parent = inner

		local left = Instance.new("Frame")
		left.BackgroundTransparency = 1
		left.Size = UDim2.new(1, -110, 1, 0)
		left.Parent = row
		
		local icon = Instance.new("ImageLabel")
		icon.BackgroundTransparency = 1
		icon.Image = iconId
		icon.Size = UDim2.new(0, 20, 0, 20)
		icon.Position = UDim2.fromOffset(8, 0)
		icon.Parent = left

		local lab = Instance.new("TextLabel")
		lab.BackgroundTransparency = 1
		lab.TextXAlignment = Enum.TextXAlignment.Left
		lab.TextYAlignment = Enum.TextYAlignment.Center
		lab.Font = Enum.Font.Gotham
		lab.TextSize = 13
		lab.TextColor3 = Theme.TextSecondary
		lab.Text = labelText
		lab.Position = UDim2.fromOffset(36, 0)
		lab.Size = UDim2.new(1, -8, 1, 0)
		lab.Parent = left

		local right = Instance.new("Frame")
		right.BackgroundTransparency = 1
		right.Size = UDim2.new(0, 110, 1, 0)
		right.AnchorPoint = Vector2.new(1,0)
		right.Position = UDim2.new(1, 0, 0, 0)
		right.Parent = row

		local step, pill = Inputs.stepper.make(Theme, 70, 0.1, 0.0, 100)
		step.AnchorPoint = Vector2.new(1,0)
		step.Position = UDim2.new(1, -8, 0, 1)
		step.Parent = right
		pill.Text = tostring(value or 0.0)
		pill.Size = UDim2.fromOffset(55, 20)
		pill.FocusLost:Connect(function()
			local v = tonumber(pill.Text) or value or 0.0
			DM.SetMaterialPath(matName, {"filters", idx, key}, v)
			local nv = DM.GetMaterial(matName).filters[idx][key]
			pill.Text = tostring(nv)
		end)
	end

	addRow("Altitude", "altitude", g.altitude, 'rbxassetid://122279177826154')
	addRow("Slope",    "slope",    g.slope, 'rbxassetid://106371549544932')
	addRow("Curve",    "curve",    g.curve, 'rbxassetid://127081563127956')

	minus.MouseButton1Click:Connect(function()
		print("THINGS WERE CLICKED!")
		DM.RemoveMaterialFilter(matName, idx)
		wrap:Destroy()
	end)

	-- working expand/collapse
	headerHit.MouseButton1Click:Connect(function() setExpanded(not inner.Visible) end)
end

return MaterialProps
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX330F4D33FA274EC9A2B826A5314CA9B0">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">EnvironProps</string>
					<string name="ScriptGuid">{F4406A9D-6ED4-4E7F-9E9E-4A578EB4D7AA}</string>
					<ProtectedString name="Source"><![CDATA[-- EnvironProps (ModuleScript)
-- Environmental Edit Mode UI per specs: category system + per-category cards
-- Uses DM environmental API and UI helpers; CardMode="Environmental"

local HttpService = game:GetService("HttpService")
local ModalConfirm = require(script.Parent.UI:WaitForChild("ModalConfirm"))
local MaterialPreview = require(script.Parent.UI:WaitForChild("MaterialPreview"))
local Corners = require(script.Parent.UI.Corners)
local Strokes = require(script.Parent.UI.Strokes)
local Checkbox = require(script.Parent.UI.Checkboxes)
local ObjectPicker = require(script.Parent.UI.ObjectPicker)
local Inputs = require(script.Parent.UI.Inputs)
local Theme = require(script.Parent:WaitForChild("UI").Theme)

local EnvironProps = {}
EnvironProps.__index = EnvironProps

local CATEGORY_CARD_PREFIX = "ENV_"

function EnvironProps.new(UI, DM, parentScroll)
	return setmetatable({
		UI = UI,
		DM = DM,
		Parent = parentScroll,
		_lastBiome = nil,
	}, EnvironProps)
end

-- Clear only Environmental cards
function EnvironProps:_clearEnvCards()
	for _, ch in ipairs(self.Parent:GetChildren()) do
		if ch:IsA("Frame") and ch:GetAttribute("CardMode") == "Environmental" then
			ch:Destroy()
		end
	end
	local top = self.Parent:FindFirstChild("EnvTopBar")
	if top then top:Destroy() end
end

-- Top inline "New Category" bar
function EnvironProps:_buildTopBar(theme)
	local top = Instance.new("Frame")
	top.Name = "EnvTopBar"
	top.BackgroundTransparency = 1
	top.Size = UDim2.new(1, -12, 0, 30)
	top.LayoutOrder = 1
	top.Parent = self.Parent
	top:SetAttribute("CardMode", "Environmental")

	local list = Instance.new("UIListLayout")
	list.FillDirection = Enum.FillDirection.Horizontal
	list.Padding = UDim.new(0, 8)
	list.SortOrder = Enum.SortOrder.LayoutOrder
	list.VerticalAlignment = Enum.VerticalAlignment.Center
	list.Parent = top

	local input = self.UI.ToolbarTextInput({
		Name = "NewEnvInput", Width = math.max(160, self.Parent.AbsoluteSize.X - 260), Height = 27, Placeholder = "New category name…",
	})
	input.Parent = top

	local add = self.UI.ToolbarButton({
		Name = "NewEnvAdd", Width = 80, Height = 27, Text = "Add", Disabled = false, TextAlign = "Center",
	})
	add.Parent = top

	local addClick = add:FindFirstChild("ClickArea")
	local tb = input:FindFirstChild("Input")
	local function tryAdd()
		if not tb then return end
		local name = (tb.Text or ""):gsub("^%s+",""):gsub("%s+$","")
		if name == "" then return end
		if self.DM.EnvCategoryExists(name) then
			-- shake: brief red stroke on input
			local st = input:FindFirstChildOfClass("UIStroke")
			if st then
				local old = st.Color; st.Color = Color3.fromRGB(200,70,70)
				task.delay(0.18, function() st.Color = old end)
			end
			return
		end
		self.DM.EnvCreateCategory(name)
		tb.Text = ""
		self:loadFromDM() -- rebuild list
	end
	if addClick and addClick:IsA("TextButton") then
		addClick.MouseButton1Click:Connect(tryAdd)
	end
	if tb and tb:IsA("TextBox") then
		tb.FocusLost:Connect(function(enter) if enter then tryAdd() end end)
	end
end

function EnvironProps:build()
	if not Theme then return end
	-- start fresh
	self:_clearEnvCards()
	self:_buildTopBar(Theme)

	-- build cards for existing categories (current biome)
	for _, cat in ipairs(self.DM.EnvListCategories()) do
		self:_buildCategoryCard(cat, Theme)
	end
end

function EnvironProps:loadFromDM()
	if not Theme then return end
	local biome = self.DM.GetSelectedBiome()
	if not biome then
		self:_clearEnvCards()
		self._lastBiome = nil
		return
	end
	if biome ~= self._lastBiome then
		self._lastBiome = biome
		self:build()
		return
	end

	-- Same biome: refresh or add any missing cards
	local existing = {}
	for _, cat in ipairs(self.DM.EnvListCategories()) do
		existing[cat] = true
		local card = self.Parent:FindFirstChild("Card_ENV_"..cat)
		if not card then
			self:_buildCategoryCard(cat, Theme)
		else
			self:_refreshCategoryCard(card, cat, Theme)
		end
	end
	-- remove cards for deleted categories
	for _, ch in ipairs(self.Parent:GetChildren()) do
		if ch:IsA("Frame") and ch:GetAttribute("CardMode") == "Environmental" then
			local key = ch:GetAttribute("CardKey")
			local name = key and tostring(key):gsub("^ENV_","") or nil
			if name and not existing[name] then ch:Destroy() end
		end
	end
end

-- Build one category card
function EnvironProps:_buildCategoryCard(catName, theme)
	local UI, DM = self.UI, self.DM
	local cardKey = CATEGORY_CARD_PREFIX..catName
	local expanded = (DM.GetCardExpanded(cardKey) == true)

	local card, content = UI.PropertyCard({
		Title = catName, CardKey = cardKey, ModeTag = "Environmental",
		Expanded = expanded,
		OnToggle = function(_, exp) DM.SetCardExpanded(cardKey, exp) end
	})
	card.Name = "Card_"..cardKey
	card.Parent = self.Parent
	card.ZIndex = 0
	card.LayoutOrder = 5
	card.Header.Title.AnchorPoint = Vector2.new(0,0.5)
	card.Header.Title.Position = UDim2.new(0, 25, 0.5, 0)
	print(card:GetChildren())

	-- Header adornments: color pick + delete
	do
		local header = card:FindFirstChild("Header")
		if header then
			-- Color swatch (preview color)
			local sw = Instance.new("ImageButton")
			sw.Size = UDim2.fromOffset(18,18)
			sw.Position = UDim2.new(1, -50, 0, 8)
			sw.BackgroundColor3 = Color3.fromRGB(200, 120, 80)
			sw.BorderSizePixel = 0
			sw.ZIndex = 5
			-- card:SetAttribute("EnvColorRGB", DM.EnvGetCategory(catName).color or {200,120,80})
			card:SetAttribute("EnvColorRGB", HttpService:JSONEncode(DM.EnvGetCategory(catName).color) or HttpService:JSONEncode({200,120,80}))
			local c = card:GetAttribute("EnvColorRGB")
			if typeof(c) == "table" then
				sw.BackgroundColor3 = Color3.fromRGB(c[1], c[2], c[3])
			end
			Corners.make(sw, 3); sw.ImageTransparency = 1; sw.Parent = header

			sw.MouseButton1Click:Connect(function()
				local ModalColor = require(script.Parent.UI:WaitForChild("ColorPicker")) -- your modal color picker module
				ModalColor.Show(card:FindFirstAncestor("Root"), {
					title = "Category Color",
					color = sw.BackgroundColor3,
					onConfirm = function(col)
						sw.BackgroundColor3 = col
						DM.EnvSetCategoryPath(catName, {"color"}, {math.floor(col.R*255+0.5), math.floor(col.G*255+0.5), math.floor(col.B*255+0.5)})
					end
				})
			end)

			-- Delete button
			local del = Instance.new("TextButton")
			del.Size = UDim2.fromOffset(20, 20)
			del.AnchorPoint = Vector2.new(0,0.5)
			del.Position = UDim2.new(0, 0, 0.5, 0)
			del.BackgroundColor3 = Color3.fromRGB(232, 58, 68)
			del.AutoButtonColor = false
			del.Text = "–"
			del.Font = Enum.Font.GothamBold
			del.TextSize = 14
			del.TextColor3 = Color3.fromRGB(255, 255, 255)
			del.ZIndex = 5
			del.Parent = header
			Corners.make(del, 4)

			del.MouseButton1Click:Connect(function()
				ModalConfirm.Show(card:FindFirstAncestor("Root"), {
					title = "Delete Category",
					message = ("Delete “%s”? This can’t be undone."):format(catName),
					okText = "Delete",
					primaryIsDestructive = true,
					onConfirm = function()
						DM.EnvDeleteCategory(catName)
						card:Destroy()
					end
				})
			end)

			-- Rename on double‑click title
			local title = header:FindFirstChild("Title")
			if title and title:IsA("TextLabel") then
				title.InputBegan:Connect(function(inp)
					if inp.UserInputType == Enum.UserInputType.MouseButton1 and inp.UserInputState == Enum.UserInputState.Begin and inp.ClickCount == 2 then
						-- turn into textbox
						local tb = Instance.new("TextBox")
						tb.Size = title.Size
						tb.Position = title.Position
						tb.BackgroundTransparency = 1
						tb.TextXAlignment = title.TextXAlignment
						tb.TextYAlignment = title.TextYAlignment
						tb.Font = title.Font; tb.TextSize = title.TextSize
						tb.TextColor3 = title.TextColor3
						tb.Text = catName
						tb.Parent = header
						title.Visible = false
						tb:CaptureFocus()
						local function cleanup(commit)
							if commit then
								local newName = (tb.Text or ""):gsub("^%s+",""):gsub("%s+$","")
								if newName ~= "" and not DM.EnvCategoryExists(newName) then
									DM.EnvRenameCategory(catName, newName)
									card.Name = "Card_"..CATEGORY_CARD_PREFIX..newName
									card:SetAttribute("CardKey", CATEGORY_CARD_PREFIX..newName)
									title.Text = newName
									catName = newName
								end
							end
							title.Visible = true; tb:Destroy()
						end
						tb.FocusLost:Connect(function(enter) cleanup(enter) end)
						tb.InputBegan:Connect(function(i)
							if i.KeyCode == Enum.KeyCode.Escape then cleanup(false) end
						end)
					end
				end)
			end
		end
	end


	-- Allowed Materials (auto list)
	do
		local bar = Instance.new("TextButton")
		bar.BackgroundColor3 = theme.ControlBgHover
		bar.BorderSizePixel = 0
		bar.Size = UDim2.new(1, -8, 0, 32)
		bar.LayoutOrder = 0
		bar.AutoButtonColor = false
		bar.Text = ""	
		bar.Parent = content

		Corners.make(bar, 6)
		local barLab = Instance.new("TextLabel")
		barLab.BackgroundTransparency = 1
		barLab.Text = "Allowed Materials"
		barLab.Font = Enum.Font.GothamMedium
		barLab.TextSize = 13
		barLab.TextColor3 = theme.ControlText
		barLab.TextXAlignment = Enum.TextXAlignment.Left
		barLab.Position = UDim2.fromOffset(10, 0)
		barLab.Size = UDim2.new(1, -36, 1, 0)
		barLab.Parent = bar

		local chevron = Instance.new("TextButton")
		chevron.Name = "Chevron"
		chevron.BackgroundTransparency = 1
		chevron.AutoButtonColor = false
		chevron.Text = "▲"
		chevron.Font = Enum.Font.Gotham
		chevron.TextSize = 18
		chevron.TextColor3 = Color3.new(0.909804, 0.909804, 0.909804)
		chevron.AnchorPoint = Vector2.new(1, 0.5)
		chevron.Position = UDim2.new(1, -8, 0.5, 0)
		chevron.Size = UDim2.fromOffset(20, 20)
		chevron.ZIndex = 3
		chevron.Parent = bar

		local listWrap = Instance.new("ScrollingFrame")
		listWrap.Name = "AllowedMaterialsScroll"
		listWrap.BackgroundTransparency = 1
		--listWrap.AutomaticSize = Enum.AutomaticSize.Y
		listWrap.Size = UDim2.new(1, 0, 0, 150)
		listWrap.ClipsDescendants = true
		listWrap.BackgroundTransparency = 1
		listWrap.ScrollBarThickness = 3
		listWrap.ScrollBarImageColor3 = Color3.fromRGB(190,196,206)
		listWrap.CanvasSize = UDim2.new(0,0,0,0)
		listWrap.AutomaticCanvasSize = Enum.AutomaticSize.Y
		listWrap.ScrollBarImageColor3 = Color3.fromRGB(57, 62, 72)
		listWrap.ZIndex = 1010
		listWrap.Visible = false
		listWrap.Parent = content	

		bar.MouseButton1Click:Connect(function() 
			if listWrap.Visible == true then
				listWrap.Visible = false
				chevron.Text = "▲"
			else
				listWrap.Visible = true
				chevron.Text = "▼"
			end
		end)

		chevron.MouseButton1Click:Connect(function() 
			if listWrap.Visible == true then
				listWrap.Visible = false
				chevron.Text = "▲"
			else
				listWrap.Visible = true
				chevron.Text = "▼"
			end
		end)		

		local list = Instance.new("UIListLayout"); 
		list.Padding = UDim.new(0,6); 
		list.FillDirection = Enum.FillDirection.Vertical
		list.HorizontalAlignment = Enum.HorizontalAlignment.Left
		list.VerticalAlignment = Enum.VerticalAlignment.Top
		list.Padding = UDim.new(0, 10)
		list.Parent = listWrap

		local matNames = DM.ListMaterials()
		local cat = DM.EnvGetCategory(catName)
		cat.allowed = cat.allowed or {}
		for _, m in ipairs(matNames) do
			local row = Instance.new("Frame")
			row.BackgroundColor3 = theme.ControlBg
			row.BorderSizePixel = 0
			row.Size = UDim2.new(1,-8,0,36)
			row.Parent = listWrap
			Corners.make(row,6); 
			Strokes.make(row, theme.ControlBorder, 1)

			local thumb = Instance.new("Frame")
			thumb.Size = UDim2.fromOffset(30,30)
			thumb.Position = UDim2.fromOffset(6, 3)
			thumb.BackgroundTransparency = 1
			Corners.make(thumb, 4); 
			Strokes.make(thumb, theme.ControlBorder, 1)
			thumb.Parent = row
			MaterialPreview.attach(thumb, m)

			local title = Instance.new("TextLabel")
			title.BackgroundTransparency = 1
			title.TextXAlignment = Enum.TextXAlignment.Left
			title.Font = Enum.Font.Gotham
			title.TextSize = 13
			title.TextColor3 = theme.ControlText
			title.Text = m
			title.Position = UDim2.fromOffset(44, 0)
			title.Size = UDim2.new(1, -120, 1, 0)
			title.Parent = row

			local box, set = Checkbox.make(theme, cat.allowed[m]==true, function(v)
				DM.EnvSetCategoryPath(catName, {"allowed", m}, v and true or false)
			end)
			box.AnchorPoint = Vector2.new(1,0.5); box.Position = UDim2.new(1,-8,0.5,0); box.Parent = row
		end
	end

	-- Rows: ScaleMin / ScaleMax
	do
		local _, area = UI.PropertyRow(content, "Scale")
		local a, tbA = Inputs.stepper.make(theme, 65, 0.1, 0, 999, true, 'Min')
		local b, tbB = Inputs.stepper.make(theme, 65, 0.1, 0, 999, true, 'Max')
		
		a.Parent = area 
		b.Parent = area
		
		tbA.Size = UDim2.new(0, 45, 1, 0)	
		tbB.Size = UDim2.new(0, 45, 1, 0)		
		
		local data = DM.EnvGetCategory(catName)
		tbA.Text = tostring(data.scaleMin or 1.0)
		tbB.Text = tostring(data.scaleMax or 1.0)
		tbA.FocusLost:Connect(function()
			local v = tonumber(tbA.Text) or data.scaleMin or 1
			DM.EnvSetCategoryPath(catName, {"scaleMin"}, v)
			tbA.Text = tostring(DM.EnvGetCategory(catName).scaleMin or 1)
		end)
		tbB.FocusLost:Connect(function()
			local v = tonumber(tbB.Text) or data.scaleMax or 1
			DM.EnvSetCategoryPath(catName, {"scaleMax"}, v)
			tbB.Text = tostring(DM.EnvGetCategory(catName).scaleMax or 1)
		end)
	end

	-- Altitude / Slope / Spacing
	local function rowNumber(labelTxt, key, step, min, max, layoutOrder, iconId)
		local container, area = UI.PropertyRow(content, labelTxt, true, 2)
		
		if iconId ~= nil then
			local icon = Instance.new("ImageLabel")
			icon.BackgroundTransparency = 1
			icon.Image = iconId
			icon.Name = "AAIcon"
			icon.AnchorPoint = Vector2.new(0,0.5)
			icon.Size = UDim2.new(0, 20, 0, 14)
			icon.Position = UDim2.new(0, 8, 0.5, 0)
			icon.LayoutOrder = 1
			icon.Parent = container	
			container:GetChildren()[1].Position = UDim2.fromOffset(35, 0)
		end
		
		local holder, pill = Inputs.stepper.make(theme, 35, step or 0.1, min or -1e9, max or 1e9, true)
		holder.Parent = area
		local data = DM.EnvGetCategory(catName)
		pill.Text = tostring(data[key] or 0)
		pill.Size = UDim2.new(0, 45, 1, 0)
		pill.Position = UDim2.new(0, 10, 0, 0)
		pill.LayoutOrder = layoutOrder or 3
		pill.FocusLost:Connect(function()
			local v = tonumber(pill.Text) or data[key] or 0
			DM.EnvSetCategoryPath(catName, {key}, v)
			pill.Text = tostring(DM.EnvGetCategory(catName)[key] or 0)
		end)
	end
	rowNumber("Altitude", "altitude", 0.1, 100, 3, 1,'rbxassetid://122279177826154')
	rowNumber("Slope",    "slope",    0.1, 100, 4, 1,'rbxassetid://106371549544932')
	rowNumber("Spacing",  "spacing",  1, 0, 999999, 1, 'rbxassetid://137270254765801')

	-- Rot Axis (X/Y/Z) + Max Deg (X/Y/Z)
	do
		local _, area = UI.PropertyRow(content, "Rot Axis", false)
		local d = DM.EnvGetCategory(catName)
		local rx = (d.rotAxis and d.rotAxis.X) and true or false
		local ry = (d.rotAxis and d.rotAxis.Y) and true or false
		local rz = (d.rotAxis and d.rotAxis.Z) and true or false
		local bx, setX = Checkbox.make(theme, rx, function(v) DM.EnvSetCategoryPath(catName, {"rotAxis","X"}, v) end)
		local by, setY = Checkbox.make(theme, ry, function(v) DM.EnvSetCategoryPath(catName, {"rotAxis","Y"}, v) end)
		local bz, setZ = Checkbox.make(theme, rz, function(v) DM.EnvSetCategoryPath(catName, {"rotAxis","Z"}, v) end)
		for _, t in ipairs({{"X", bx}, {"Y", by}, {"Z", bz}}) do
			local lab = Instance.new("TextLabel"); 
			lab.BackgroundTransparency=1; 
			lab.Text=t[1]; 
			lab.Font=Enum.Font.Gotham; 
			lab.TextSize=13; 
			lab.TextColor3=theme.TextSecondary; 
			lab.Size=UDim2.fromOffset(10,22)
			lab.Parent = area; 
			t[2].Parent = area
		end
	end
	do
		local _, area = UI.PropertyRow(content, "Max Deg")
		local d = DM.EnvGetCategory(catName)
		for _, ax in ipairs({"X","Y","Z"}) do
			local holder, tb = Inputs.stepper.make(theme, 35, 1, 0, 359)
			holder.Parent = area
			tb.Size = UDim2.new(0, 45, 1, 0)
			tb.Position = UDim2.new(0, 10, 0, 0)
			tb.Text = tostring(((d.maxDeg or {})[ax]) or 0)
			tb.FocusLost:Connect(function()
				local v = tonumber(tb.Text) or 0
				DM.EnvSetCategoryPath(catName, {"maxDeg", ax}, v)
				tb.Text = tostring((DM.EnvGetCategory(catName).maxDeg or {})[ax] or 0)
			end)
		end
	end

	-- Align to normal
	do
		local row = Instance.new("Frame"); row.Name="Row_Align"; row.BackgroundTransparency=1; row.Size=UDim2.new(1,0,0,30); row.Parent=content
		local lab = Inputs.label.make(theme, "Align to normal", 132); lab.Parent = row
		local fields = Instance.new("Frame"); fields.BackgroundTransparency=1; fields.Position=UDim2.new(0,140,0,0); fields.Size=UDim2.new(1,-148,1,0); fields.Parent=row
		local chk, set = Checkbox.make(theme, (DM.EnvGetCategory(catName).alignToNormal==true), function(v)
			DM.EnvSetCategoryPath(catName, {"alignToNormal"}, v)
		end)
		chk.AnchorPoint = Vector2.new(1,0); chk.Position = UDim2.new(1,0,0,0); chk.Parent = fields
	end
	-- Self Overlap
	do
		local row = Instance.new("Frame"); 
		row.Name="Row_SelfOverlap"; 
		row.BackgroundTransparency=1; 
		row.Size=UDim2.new(1,0,0,30); 
		row.Parent=content

		local lab = Inputs.label.make(theme, "Self Overlap", 132); 
		lab.Parent = row

		local fields = Instance.new("Frame")
		fields.BackgroundTransparency=1
		fields.Position=UDim2.new(0,140,0,0)
		fields.Size=UDim2.new(1,-148,1,0)
		fields.Parent=row

		local chk = (DM.EnvGetCategory(catName).selfOverlap==true)
		local box, set = Checkbox.make(theme, chk, function(v) DM.EnvSetCategoryPath(catName, {"selfOverlap"}, v) end)
		box.AnchorPoint = Vector2.new(1,0)
		box.Position = UDim2.new(1,0,0,0) 
		box.Parent = fields
	end

	-- Avoid footprint
	rowNumber("Avoid footprint", "avoidFootprint", 1, 0, 999999, 1, nil)

	-- Avoid Categories (sublist with +)
	do
		local bar = Instance.new("TextButton")
		bar.BackgroundColor3 = theme.ControlBgHover
		bar.BorderSizePixel = 0
		bar.Text = ""
		bar.Size = UDim2.new(1, -8, 0, 32)
		bar.Parent = content
		bar.LayoutOrder = 0
		Corners.make(bar, 6)

		local barLab = Instance.new("TextLabel")
		barLab.BackgroundTransparency = 1
		barLab.Text = "Avoid Categories"
		barLab.Font = Enum.Font.GothamMedium
		barLab.TextSize = 13
		barLab.TextColor3 = theme.ControlText
		barLab.TextXAlignment = Enum.TextXAlignment.Left
		barLab.Position = UDim2.fromOffset(35, 0)
		barLab.Size = UDim2.new(1, -36, 1, 0)
		barLab.Parent = bar

		local addBtn = Instance.new("TextButton")
		addBtn.Size = UDim2.fromOffset(20,20)
		addBtn.AnchorPoint = Vector2.new(0,0.5)
		addBtn.Position = UDim2.new(0, 8, 0.5, 0)
		addBtn.BackgroundColor3 = Color3.fromRGB(0,169,248)
		addBtn.AutoButtonColor = true
		addBtn.Text = "+"
		addBtn.Font = Enum.Font.GothamBold
		addBtn.TextSize = 16
		addBtn.TextColor3 = Color3.fromRGB(20,20,20)
		addBtn.Parent = bar
		Corners.make(addBtn, 5)

		local chevron = Instance.new("TextButton")
		chevron.Name = "Chevron"
		chevron.BackgroundTransparency = 1
		chevron.AutoButtonColor = false
		chevron.Text = "▲"
		chevron.Font = Enum.Font.Gotham
		chevron.TextSize = 18
		chevron.TextColor3 = Color3.new(0.909804, 0.909804, 0.909804)
		chevron.AnchorPoint = Vector2.new(1, 0.5)
		chevron.Position = UDim2.new(1, -8, 0.5, 0)
		chevron.Size = UDim2.fromOffset(20, 20)
		chevron.ZIndex = 3
		chevron.Parent = bar

		local holder = Instance.new("ScrollingFrame")
		holder.Name = "AvoidCategoriesScroll"
		holder.BackgroundTransparency = 1
		holder.ScrollBarThickness = 3
		holder.Size = UDim2.new(1, 0, 0, 150)
		holder.ScrollBarImageColor3 = Color3.fromRGB(190,196,206)
		holder.CanvasSize = UDim2.new(0,0,0,0)
		holder.AutomaticCanvasSize = Enum.AutomaticSize.Y
		holder.ScrollBarImageColor3 = Color3.fromRGB(57, 62, 72)
		holder.ZIndex = 1010
		holder.Visible = false
		holder.Parent = content
		
		local list = Instance.new("UIListLayout")
		list.Padding = UDim.new(0, 6)
		list.Parent = holder

		-- NEW: grow up to 150px, collapse to 0 when empty
		local function resizeAvoid()
			local contentH = list.AbsoluteContentSize.Y
			local h = math.min(150, contentH)
			holder.Size = UDim2.new(1, 0, 0, h)
			holder.Visible = h > 0 
			
			chevron.Text = if h > 0 then '▼' else '▲'
		end
		list:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(resizeAvoid)
		task.defer(resizeAvoid)

		local function rowFor(i, name)
			local row = Instance.new("Frame")
			row.BackgroundColor3 = theme.ControlBg
			row.BorderSizePixel = 0
			row.Size = UDim2.new(1,-8,0,30)
			row.Parent = holder
			Corners.make(row,6); 
			Strokes.make(row, theme.ControlBorder, 1)

			local title = Instance.new("TextLabel")
			title.BackgroundTransparency = 1
			title.TextXAlignment = Enum.TextXAlignment.Left
			title.Font = Enum.Font.Gotham
			title.TextSize = 13
			title.TextColor3 = theme.ControlText
			title.Text = name ~= "" and name or "Pick category…"
			title.Position = UDim2.fromOffset(10,0)
			title.Size = UDim2.new(1, -80, 1, 0)
			title.Parent = row

			local del = Instance.new("TextButton")
			del.Size = UDim2.fromOffset(20,20)
			del.AnchorPoint = Vector2.new(1,0.5); del.Position = UDim2.new(1,-6,0.5,0)
			del.BackgroundColor3 = Color3.fromRGB(232,58,68)
			del.AutoButtonColor = false
			del.Text = "–"; del.Font = Enum.Font.GothamBold; del.TextSize = 14; del.TextColor3 = Color3.new(1,1,1)
			del.Parent = row; 
			Corners.make(del,4)

			-- double‑click title to pick from dropdown
			title.InputBegan:Connect(function(inp)
				if inp.UserInputType == Enum.UserInputType.MouseButton1 and inp.UserInputState == Enum.UserInputState.Begin and inp.ClickCount == 2 then
					local dd = self.UI.ToolbarDropdown({ Width = 220, Height = 26, Text = title.Text })
					dd.Position = UDim2.fromOffset(8, 2); dd.Parent = row
					local others = {}
					for _, n in ipairs(DM.EnvListCategories()) do if n ~= catName then table.insert(others, n) end end
					self.UI.BuildDropdownList(dd, others, function(pick)
						-- guard duplicates
						local exists = false
						for _, old in ipairs(DM.EnvGetCategory(catName).avoid or {}) do
							if old == pick then exists = true break end
						end
						if not exists then
							DM.EnvSetCategoryPath(catName, {"avoid", i}, pick)
							title.Text = pick
						end
						self.UI.SetDropdownOpen(dd, false); dd:Destroy()
					end)
					self.UI.SetDropdownOpen(dd, true)
				end
			end)
			
			del.MouseButton1Click:Connect(function()
				ModalConfirm.Show(row:FindFirstAncestor("Root"), {
					title = "Remove Avoid",
					message = "Remove this avoid category?",
					okText = "Remove",
					primaryIsDestructive = true,
					onConfirm = function()
						DM.EnvRemoveAvoid(catName, i)
						row:Destroy()
						chevron.Text = if #holder:GetChildren() > 0 then '▼' else '▲'
					end
				})
			end)
		end

		local d = DM.EnvGetCategory(catName)
		for i, nm in ipairs(d.avoid or {}) do rowFor(i, nm) end

		addBtn.MouseButton1Click:Connect(function()
			local idx = ( #(DM.EnvGetCategory(catName).avoid or {}) ) + 1
			DM.EnvSetCategoryPath(catName, {"avoid", idx}, "")
			rowFor(idx, "")
		end)
		
		bar.MouseButton1Click:Connect(function() 
			if holder.Visible == true then
				holder.Visible = false
				chevron.Text = "▲"
			else
				holder.Visible = true
				chevron.Text = "▼"
			end
		end)

		chevron.MouseButton1Click:Connect(function() 
			if holder.Visible == true then
				holder.Visible = false
				chevron.Text = "▲"
			else
				holder.Visible = true
				chevron.Text = "▼"
			end
		end)		
	end

	-- Models list
	do
		local bar = Instance.new("TextButton")
		bar.BackgroundColor3 = theme.ControlBgHover
		bar.BorderSizePixel = 0
		bar.Text = ""
		bar.Size = UDim2.new(1, -8, 0, 32)
		bar.Parent = content
		Corners.make(bar, 6)

		local barLab = Instance.new("TextLabel")
		barLab.BackgroundTransparency = 1
		barLab.Text = "Models"
		barLab.Font = Enum.Font.GothamMedium
		barLab.TextSize = 13
		barLab.TextColor3 = theme.ControlText
		barLab.TextXAlignment = Enum.TextXAlignment.Left
		barLab.Position = UDim2.fromOffset(35, 0)
		barLab.Size = UDim2.new(1, -36, 1, 0)
		barLab.Parent = bar

		local addBtn = Instance.new("TextButton")
		addBtn.Size = UDim2.fromOffset(20,20)
		addBtn.AnchorPoint = Vector2.new(0,0.5)
		addBtn.Position = UDim2.new(0, 8, 0.5, 0)
		addBtn.BackgroundColor3 = Color3.fromRGB(0,169,248)
		addBtn.AutoButtonColor = true
		addBtn.Text = "+"
		addBtn.Font = Enum.Font.GothamBold
		addBtn.TextSize = 16
		addBtn.TextColor3 = Color3.fromRGB(20,20,20)
		addBtn.Parent = bar
		Corners.make(addBtn, 5)

		local chevron = Instance.new("TextButton")
		chevron.Name = "Chevron"
		chevron.BackgroundTransparency = 1
		chevron.AutoButtonColor = false
		chevron.Text = "▲"
		chevron.Font = Enum.Font.Gotham
		chevron.TextSize = 18
		chevron.TextColor3 = Color3.new(0.909804, 0.909804, 0.909804)
		chevron.AnchorPoint = Vector2.new(1, 0.5)
		chevron.Position = UDim2.new(1, -8, 0.5, 0)
		chevron.Size = UDim2.fromOffset(20, 20)
		chevron.ZIndex = 3
		chevron.Parent = bar

		local wrap = Instance.new("ScrollingFrame")
		wrap.Name = "ModelsScroll"
		wrap.BackgroundTransparency = 1
		wrap.ScrollBarThickness = 3
		wrap.ScrollBarImageColor3 = Color3.fromRGB(190,196,206)
		wrap.CanvasSize = UDim2.new(0,0,0,0)
		wrap.AutomaticCanvasSize = Enum.AutomaticSize.Y
		wrap.ScrollBarImageColor3 = Color3.fromRGB(57, 62, 72)
		wrap.Size = UDim2.new(1, 0, 0, 150)
		wrap.ZIndex = 1010
		wrap.Visible = false
		wrap.Parent = content
		
		local list = Instance.new("UIListLayout")
		list.Padding = UDim.new(0, 6)
		list.Parent = wrap

		-- NEW: grow up to 150px, collapse to 0 when empty
		local function resizeModels()
			local contentH = list.AbsoluteContentSize.Y
			local h = math.min(150, contentH)
			wrap.Size = UDim2.new(1, 0, 0, h)
			wrap.Visible = h > 0
			chevron.Text = if h > 0 then '▼' else '▲'
		end
		list:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(resizeModels)
		task.defer(resizeModels)

		
		local Selection = game:GetService("Selection")
		local function addModelRow(idx, entry)
			entry = entry or { name = "Please pick model", ref = "" }
			local row = Instance.new("Frame")
			row.BackgroundColor3 = theme.ControlBg
			row.BorderSizePixel = 0
			row.Size = UDim2.new(1, -8, 0, 36)
			row.Parent = wrap
			Corners.make(row, 6); 
			Strokes.make(row, theme.ControlBorder, 1)

			local del = Instance.new("TextButton")
			del.Size = UDim2.fromOffset(20,20)
			del.Position = UDim2.fromOffset(6,8)
			del.BackgroundColor3 = Color3.fromRGB(232,58,68)
			del.AutoButtonColor = false
			del.Text = "–"; del.Font = Enum.Font.GothamBold; del.TextSize = 14; del.TextColor3 = Color3.new(1,1,1)
			del.Parent = row; 
			Corners.make(del,4)

			local title = Instance.new("TextLabel")
			title.BackgroundTransparency = 1
			title.TextXAlignment = Enum.TextXAlignment.Left
			title.Font = Enum.Font.Gotham
			title.TextSize = 13
			title.TextColor3 = theme.ControlText
			title.Text = entry.name or "Please pick model"
			title.Position = UDim2.fromOffset(36, 0)
			title.Size = UDim2.new(1, -220, 1, 0)
			title.Parent = row

			local pick = Instance.new("TextButton")
			pick.Size = UDim2.new(0, 25, 0, 24)
			pick.AnchorPoint = Vector2.new(1,0.5); pick.Position = UDim2.new(1, -10, 0.5, 0)
			pick.BackgroundColor3 = theme.ControlBgActive
			pick.AutoButtonColor = true
			pick.Text = "..."
			pick.Font = Enum.Font.Gotham; pick.TextSize = 12; pick.TextColor3 = theme.ControlText
			pick.Parent = row
			Corners.make(pick, 6); 
			Strokes.make(pick, theme.ControlBorder, 1)

			local pickObjectValue = Instance.new("ObjectValue")
			pickObjectValue.Parent = pick


			pick.MouseButton1Click:Connect(function()
				ObjectPicker.Show(pick, pickObjectValue, {"Model"})
			end)

			del.MouseButton1Click:Connect(function()
				ModalConfirm.Show(row:FindFirstAncestor("Root"), {
					title = "Remove Model",
					message = "Remove this model entry?",
					okText = "Remove",
					primaryIsDestructive = true,
					onConfirm = function()
						DM.EnvRemoveModel(catName, idx)
						row:Destroy()					
					end
				})
			end)
		end

		local d = DM.EnvGetCategory(catName)
		for i, m in ipairs(d.models or {}) do addModelRow(i, m) end

		addBtn.MouseButton1Click:Connect(function()
			local idx = #(DM.EnvGetCategory(catName).models or {}) + 1
			DM.EnvSetCategoryPath(catName, {"models", idx}, { name = "Please pick model", ref = "" })
			addModelRow(idx, { name = "Please pick model", ref = "" })
		end)
		
		bar.MouseButton1Click:Connect(function() 
			if wrap.Visible == true then
				wrap.Visible = false
				chevron.Text = "▲"
			else
				wrap.Visible = true
				chevron.Text = "▼"
			end
		end)

		chevron.MouseButton1Click:Connect(function() 
			if wrap.Visible == true then
				wrap.Visible = false
				chevron.Text = "▲"
			else
				wrap.Visible = true
				chevron.Text = "▼"
			end
		end)		
	end
end

function EnvironProps:_refreshCategoryCard(card, catName, theme)
	-- For now we rebuild sublists entirely on DM changes (keeps code lean)
	-- You can add fine‑grained field syncing later if desired.
	for _, ch in ipairs(card.Content:GetChildren()) do
		if ch:IsA("Frame") and ch.Name ~= "Header" then
			-- keep; we covered in _buildCategoryCard approach (simple path)
		end
	end
end

return EnvironProps
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXEDB87EEE2EA7412F8ED6903D0C489759">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">StampProps</string>
					<string name="ScriptGuid">{66B03E71-FB27-4561-98C2-D3DA908ACF21}</string>
					<ProtectedString name="Source"><![CDATA[-- StampsProps (ModuleScript)
-- Stamps Edit Mode UI: cloned from EnvironProps but scoped to DM "stamps"
-- Uses DM stamps API and UI helpers; CardMode="Stamps"

local HttpService = game:GetService("HttpService")
local ModalConfirm = require(script.Parent.UI:WaitForChild("ModalConfirm"))
local MaterialPreview = require(script.Parent.UI:WaitForChild("MaterialPreview"))
local Corners = require(script.Parent.UI.Corners)
local Strokes = require(script.Parent.UI.Strokes)
local Checkbox = require(script.Parent.UI.Checkboxes)
local ObjectPicker = require(script.Parent.UI.ObjectPicker)
local Inputs = require(script.Parent.UI.Inputs)
local Theme = require(script.Parent:WaitForChild("UI").Theme)

local StampsProps = {}
StampsProps.__index = StampsProps

local CATEGORY_CARD_PREFIX = "ST_"

function StampsProps.new(UI, DM, parentScroll)
	return setmetatable({
		UI = UI,
		DM = DM,
		Parent = parentScroll,
		_lastBiome = nil,
	}, StampsProps)
end

-- Clear only Stamps cards
function StampsProps:_clearCards()
	for _, ch in ipairs(self.Parent:GetChildren()) do
		if ch:IsA("Frame") and ch:GetAttribute("CardMode") == "Stamps" then
			ch:Destroy()
		end
	end
	local top = self.Parent:FindFirstChild("StampsTopBar")
	if top then top:Destroy() end
end

-- Top inline "New Category" bar
function StampsProps:_buildTopBar(theme)
	local top = Instance.new("Frame")
	top.Name = "StampsTopBar"
	top.BackgroundTransparency = 1
	top.Size = UDim2.new(1, -12, 0, 30)
	top.LayoutOrder = 1
	top.Parent = self.Parent
	top:SetAttribute("CardMode", "Stamps")

	local list = Instance.new("UIListLayout")
	list.FillDirection = Enum.FillDirection.Horizontal
	list.Padding = UDim.new(0, 8)
	list.SortOrder = Enum.SortOrder.LayoutOrder
	list.VerticalAlignment = Enum.VerticalAlignment.Center
	list.Parent = top

	local input = self.UI.ToolbarTextInput({
		Name = "NewStampInput", Width = math.max(160, self.Parent.AbsoluteSize.X - 260), Height = 27, Placeholder = "New stamp category…",
	})
	input.Parent = top

	local add = self.UI.ToolbarButton({
		Name = "NewStampAdd", Width = 80, Height = 27, Text = "Add", Disabled = false, TextAlign = "Center",
	})
	add.Parent = top

	local addClick = add:FindFirstChild("ClickArea")
	local tb = input:FindFirstChild("Input")
	local function tryAdd()
		if not tb then return end
		local name = (tb.Text or ""):gsub("^%s+",""):gsub("%s+$","")
		if name == "" then return end
		if self.DM.StampsCategoryExists(name) then
			local st = input:FindFirstChildOfClass("UIStroke")
			if st then
				local old = st.Color; st.Color = Color3.fromRGB(200,70,70)
				task.delay(0.18, function() st.Color = old end)
			end
			return
		end
		self.DM.StampsCreateCategory(name)
		tb.Text = ""
		self:loadFromDM()
	end
	if addClick and addClick:IsA("TextButton") then
		addClick.MouseButton1Click:Connect(tryAdd)
	end
	if tb and tb:IsA("TextBox") then
		tb.FocusLost:Connect(function(enter) if enter then tryAdd() end end)
	end
end

function StampsProps:build()
	if not Theme then return end
	self:_clearCards()
	self:_buildTopBar(Theme)
	for _, cat in ipairs(self.DM.StampsListCategories()) do
		self:_buildCategoryCard(cat, Theme)
	end
end

function StampsProps:loadFromDM()
	if not Theme then return end
	local biome = self.DM.GetSelectedBiome()
	if not biome then
		self:_clearCards()
		self._lastBiome = nil
		return
	end
	if biome ~= self._lastBiome then
		self._lastBiome = biome
		self:build()
		return
	end

	local existing = {}
	for _, cat in ipairs(self.DM.StampsListCategories()) do
		existing[cat] = true
		local card = self.Parent:FindFirstChild("Card_ST_"..cat)
		if not card then
			self:_buildCategoryCard(cat, Theme)
		else
			self:_refreshCategoryCard(card, cat, Theme)
		end
	end
	for _, ch in ipairs(self.Parent:GetChildren()) do
		if ch:IsA("Frame") and ch:GetAttribute("CardMode") == "Stamps" then
			local key = ch:GetAttribute("CardKey")
			local name = key and tostring(key):gsub("^ST_","") or nil
			if name and not existing[name] then ch:Destroy() end
		end
	end
end

-- Build one category card (identical fields to Environmental, but DM routes to stamps)
function StampsProps:_buildCategoryCard(catName, theme)
	local UI, DM = self.UI, self.DM
	local cardKey = CATEGORY_CARD_PREFIX..catName
	local expanded = (DM.GetCardExpanded(cardKey) == true)

	local card, content = UI.PropertyCard({
		Title = catName, CardKey = cardKey, ModeTag = "Stamps",
		Expanded = expanded,
		OnToggle = function(_, exp) DM.SetCardExpanded(cardKey, exp) end
	})
	card.Name = "Card_"..cardKey
	card.Parent = self.Parent
	card.ZIndex = 0
	card.LayoutOrder = 5
	card.Header.Title.AnchorPoint = Vector2.new(0,0.5)
	card.Header.Title.Position = UDim2.new(0, 25, 0.5, 0)

	do
		local header = card:FindFirstChild("Header")
		if header then
			local sw = Instance.new("ImageButton")
			sw.Size = UDim2.fromOffset(18,18)
			sw.Position = UDim2.new(1, -50, 0, 8)
			sw.BackgroundColor3 = Color3.fromRGB(200, 120, 80)
			sw.ZIndex = 5
			sw.BorderSizePixel = 0
			card:SetAttribute("StampColorRGB", HttpService:JSONEncode(DM.StampsGetCategory(catName).color) or HttpService:JSONEncode({200,120,80}))
			local c = card:GetAttribute("StampColorRGB")
			if typeof(c) == "table" then
				sw.BackgroundColor3 = Color3.fromRGB(c[1], c[2], c[3])
			end
			Corners.make(sw, 3); sw.ImageTransparency = 1; sw.Parent = header

			sw.MouseButton1Click:Connect(function()
				local ModalColor = require(script.Parent.UI:WaitForChild("ColorPicker"))
				ModalColor.Show(card:FindFirstAncestor("Root"), {
					title = "Category Color",
					color = sw.BackgroundColor3,
					onConfirm = function(col)
						sw.BackgroundColor3 = col
						DM.StampsSetCategoryPath(catName, {"color"}, {math.floor(col.R*255+0.5), math.floor(col.G*255+0.5), math.floor(col.B*255+0.5)})
					end
				})
			end)

			local del = Instance.new("TextButton")
			del.Size = UDim2.fromOffset(20, 20)
			del.AnchorPoint = Vector2.new(0,0.5)
			del.Position = UDim2.new(0, 0, 0.5, 0)
			del.BackgroundColor3 = Color3.fromRGB(232, 58, 68)
			del.AutoButtonColor = false
			del.Text = "–"
			del.Font = Enum.Font.GothamBold
			del.TextSize = 14
			del.TextColor3 = Color3.fromRGB(255, 255, 255)
			del.ZIndex = 5
			del.Parent = header
			Corners.make(del, 4)

			del.MouseButton1Click:Connect(function()
				ModalConfirm.Show(card:FindFirstAncestor("Root"), {
					title = "Delete Category",
					message = ("Delete “%s”? This can’t be undone."):format(catName),
					okText = "Delete",
					primaryIsDestructive = true,
					onConfirm = function()
						DM.StampsDeleteCategory(catName)
						card:Destroy()
					end
				})
			end)

			local title = header:FindFirstChild("Title")
			if title and title:IsA("TextLabel") then
				title.InputBegan:Connect(function(inp)
					if inp.UserInputType == Enum.UserInputType.MouseButton1 and inp.UserInputState == Enum.UserInputState.Begin and inp.ClickCount == 2 then
						local tb = Instance.new("TextBox")
						tb.Size = title.Size
						tb.Position = title.Position
						tb.BackgroundTransparency = 1
						tb.TextXAlignment = title.TextXAlignment
						tb.TextYAlignment = title.TextYAlignment
						tb.Font = title.Font; tb.TextSize = title.TextSize
						tb.TextColor3 = title.TextColor3
						tb.Text = catName
						tb.Parent = header
						title.Visible = false
						tb:CaptureFocus()
						local function cleanup(commit)
							if commit then
								local newName = (tb.Text or ""):gsub("^%s+",""):gsub("%s+$","")
								if newName ~= "" and not DM.StampsCategoryExists(newName) then
                                    DM.StampsRenameCategory(catName, newName)
									card.Name = "Card_"..CATEGORY_CARD_PREFIX..newName
									card:SetAttribute("CardKey", CATEGORY_CARD_PREFIX..newName)
									title.Text = newName
									catName = newName
								end
							end
							title.Visible = true; tb:Destroy()
						end
						tb.FocusLost:Connect(function(enter) cleanup(enter) end)
						tb.InputBegan:Connect(function(i)
							if i.KeyCode == Enum.KeyCode.Escape then cleanup(false) end
						end)
					end
				end)
			end
		end
	end

	-- Allowed Materials
	do
		local bar = Instance.new("TextButton")
		bar.BackgroundColor3 = theme.ControlBgHover
		bar.BorderSizePixel = 0
		bar.Size = UDim2.new(1, -8, 0, 32)
		bar.LayoutOrder = 0
		bar.AutoButtonColor = false
		bar.Text = ""	
		bar.Parent = content

		Corners.make(bar, 6)

		local barLab = Instance.new("TextLabel")
		barLab.BackgroundTransparency = 1
		barLab.Text = "Allowed Materials"
		barLab.Font = Enum.Font.GothamMedium
		barLab.TextSize = 13
		barLab.TextColor3 = theme.ControlText
		barLab.TextXAlignment = Enum.TextXAlignment.Left
		barLab.Position = UDim2.fromOffset(10, 0)
		barLab.Size = UDim2.new(1, -36, 1, 0)
		barLab.Parent = bar

		local chevron = Instance.new("TextButton")
		chevron.Name = "Chevron"
		chevron.BackgroundTransparency = 1
		chevron.AutoButtonColor = false
		chevron.Text = "▲"
		chevron.Font = Enum.Font.Gotham
		chevron.TextSize = 18
		chevron.TextColor3 = Color3.new(0.909804, 0.909804, 0.909804)
		chevron.AnchorPoint = Vector2.new(1, 0.5)
		chevron.Position = UDim2.new(1, -8, 0.5, 0)
		chevron.Size = UDim2.fromOffset(20, 20)
		chevron.ZIndex = 3
		chevron.Parent = bar

		local listWrap = Instance.new("ScrollingFrame")
		listWrap.Name = "AllowedMaterialsScroll"
		listWrap.BackgroundTransparency = 1
		listWrap.Size = UDim2.new(1, 0, 0, 150)
		listWrap.ClipsDescendants = true
		listWrap.ScrollBarThickness = 3
		listWrap.ScrollBarImageColor3 = Color3.fromRGB(190,196,206)
		listWrap.CanvasSize = UDim2.new(0,0,0,0)
		listWrap.AutomaticCanvasSize = Enum.AutomaticSize.Y
		listWrap.ScrollBarImageColor3 = Color3.fromRGB(57, 62, 72)
		listWrap.ZIndex = 1010
		listWrap.Visible = false
		listWrap.Parent = content

		bar.MouseButton1Click:Connect(function() 
			if listWrap.Visible == true then
				listWrap.Visible = false
				chevron.Text = "▲"
			else
				listWrap.Visible = true
				chevron.Text = "▼"
			end
		end)

		chevron.MouseButton1Click:Connect(function() 
			if listWrap.Visible == true then
				listWrap.Visible = false
				chevron.Text = "▲"
			else
				listWrap.Visible = true
				chevron.Text = "▼"
			end
		end)		

		local list = Instance.new("UIListLayout"); 
		list.Padding = UDim.new(0,6); 
		list.FillDirection = Enum.FillDirection.Vertical
		list.HorizontalAlignment = Enum.HorizontalAlignment.Left
		list.VerticalAlignment = Enum.VerticalAlignment.Top
		list.Padding = UDim.new(0, 10)
		list.Parent = listWrap

		local matNames = DM.ListMaterials()
		local cat = DM.StampsGetCategory(catName)
		cat.allowed = cat.allowed or {}
		for _, m in ipairs(matNames) do
			local row = Instance.new("Frame")
			row.BackgroundColor3 = theme.ControlBg
			row.BorderSizePixel = 0
			row.Size = UDim2.new(1,-8,0,36)
			row.Parent = listWrap
			Corners.make(row,6); 
			Strokes.make(row, theme.ControlBorder, 1)

			local thumb = Instance.new("Frame")
			thumb.Size = UDim2.fromOffset(30,30)
			thumb.Position = UDim2.fromOffset(6, 3)
			thumb.BackgroundTransparency = 1
			Corners.make(thumb, 4); 
			Strokes.make(thumb, theme.ControlBorder, 1)
			thumb.Parent = row
			MaterialPreview.attach(thumb, m)

			local title = Instance.new("TextLabel")
			title.BackgroundTransparency = 1
			title.TextXAlignment = Enum.TextXAlignment.Left
			title.Font = Enum.Font.Gotham
			title.TextSize = 13
			title.TextColor3 = theme.ControlText
			title.Text = m
			title.Position = UDim2.fromOffset(44, 0)
			title.Size = UDim2.new(1, -120, 1, 0)
			title.Parent = row

			local box = Checkbox.make(theme, cat.allowed[m]==true, function(v)
				DM.StampsSetCategoryPath(catName, {"allowed", m}, v and true or false)
			end)
			box.AnchorPoint = Vector2.new(1,0.5); box.Position = UDim2.new(1,-8,0.5,0); box.Parent = row
		end
	end

	-- Fill Type row: Protruding (solid) | Receding (air)
	do
		local setP, setR
		local chkP, chkR
		
		local row = Instance.new("Frame")
		row.Name = "Row_FillType"
		row.BackgroundTransparency = 1
		row.Size = UDim2.new(1, 0, 0, 32)
		row.Parent = content
		
		local rowPadding = Instance.new("UIPadding")
		rowPadding.PaddingLeft = UDim.new(0, 5)
		rowPadding.Parent = row

		local h = Instance.new("UIListLayout")
		h.FillDirection = Enum.FillDirection.Horizontal
		h.Padding = UDim.new(0, 10)
		h.VerticalAlignment = Enum.VerticalAlignment.Center
		h.SortOrder = Enum.SortOrder.LayoutOrder
		h.Parent = row

		local d = DM.StampsGetCategory(catName)
		local isAir = (d.StampFillType == "air")
		local isSolid = not isAir
	
		local leftIcon = Instance.new("Frame")
		leftIcon.Size = UDim2.fromOffset(14, 14)
		leftIcon.LayoutOrder = 1
		leftIcon.BackgroundTransparency = 1
		leftIcon.Parent = row
		
			local leftIconImage = Instance.new("ImageLabel")
			leftIconImage.BackgroundTransparency = 1
			leftIconImage.Image = "rbxassetid://127081563127956"
			leftIconImage.Size = UDim2.fromOffset(14, 14)
			leftIconImage.Parent = leftIcon
		
		
		local leftLabel = Instance.new("TextLabel")
		leftLabel.BackgroundTransparency = 1
		leftLabel.Font = Enum.Font.GothamMedium
		leftLabel.TextSize = 12
		leftLabel.TextColor3 = theme.ControlText
		leftLabel.Text = "Protrude"
		leftLabel.Size = UDim2.fromOffset(50, 18)
		leftLabel.Position = UDim2.fromOffset(15, 0)
		leftLabel.LayoutOrder = 2
		leftLabel.TextXAlignment = Enum.TextXAlignment.Left
		leftLabel.Parent = row
		
		local function onProtruding(v)
			if v then
				setP(true)
				if setR then setR(false) end
				DM.StampsSetCategoryPath(catName, {"StampFillType"}, "solid")
			else
				-- keep one selected
				setP(true)
			end
		end		
		
		chkP, setP = Checkbox.make(theme, isSolid, onProtruding)
		chkP.LayoutOrder = 3
		chkP.Parent = row

		-- divider
		local div = Instance.new("Frame")
		div.BackgroundColor3 = theme.ControlBorder
		div.BorderSizePixel = 0
		div.Size = UDim2.fromOffset(1, 20)
		div.LayoutOrder = 4
		div.Parent = row

		local rightIcon = Instance.new("Frame")
		rightIcon.Size = UDim2.fromOffset(14, 14)
		rightIcon.LayoutOrder = 5
		rightIcon.BackgroundTransparency = 1
		rightIcon.Parent = row
		
		local rightIconImage = Instance.new("ImageLabel")
		rightIconImage.BackgroundTransparency = 1
		rightIconImage.Image = "rbxassetid://127081563127956"
		rightIconImage.Size = UDim2.fromOffset(14, 14)
		rightIconImage.Rotation = 180
		rightIconImage.Parent = rightIcon	
		

		local rightLabel = Instance.new("TextLabel")
		rightLabel.BackgroundTransparency = 1
		rightLabel.Font = Enum.Font.GothamMedium
		rightLabel.TextSize = 12
		rightLabel.TextColor3 = theme.ControlText
		rightLabel.Text = "Receed"
		rightLabel.Size = UDim2.fromOffset(45, 18)
		rightLabel.Position = UDim2.fromOffset(15, 0)
		rightLabel.LayoutOrder = 6
		rightLabel.TextXAlignment = Enum.TextXAlignment.Left
		rightLabel.Parent = row

		local function onReceding(v)
			if v then
				setR(true)
				if setP then setP(false) end
				DM.StampsSetCategoryPath(catName, {"StampFillType"}, "air")
			else
				-- keep one selected
				setR(true)
			end
		end

		chkR, setR = Checkbox.make(theme, isAir, onReceding)
		chkR.LayoutOrder = 6
		chkR.Parent = row		
	end


	-- Scale (min/max)
	do
		local _, area = UI.PropertyRow(content, "Scale")
		local a, tbA = Inputs.stepper.make(theme, 65, 0.1, 0, 999, true, 'Min')
		local b, tbB = Inputs.stepper.make(theme, 65, 0.1, 0, 999, true, 'Max')

		a.Parent = area 
		b.Parent = area

		tbA.Size = UDim2.new(0, 45, 1, 0)
		tbB.Size = UDim2.new(0, 45, 1, 0)
		
		local data = DM.StampsGetCategory(catName)
		tbA.Text = tostring(data.scaleMin or 1.0)
		tbB.Text = tostring(data.scaleMax or 1.0)
		tbA.FocusLost:Connect(function()
			local v = tonumber(tbA.Text) or data.scaleMin or 1
			DM.StampsSetCategoryPath(catName, {"scaleMin"}, v)
			tbA.Text = tostring(DM.StampsGetCategory(catName).scaleMin or 1)
		end)
		tbB.FocusLost:Connect(function()
			local v = tonumber(tbB.Text) or data.scaleMax or 1
			DM.StampsSetCategoryPath(catName, {"scaleMax"}, v)
			tbB.Text = tostring(DM.StampsGetCategory(catName).scaleMax or 1)
		end)
	end

	local function rowNumber(labelTxt, key, step, min, max, layoutOrder, iconId)
		local container, area = UI.PropertyRow(content, labelTxt, true, 2)
		
		if iconId ~= nil then
			local icon = Instance.new("ImageLabel")
			icon.BackgroundTransparency = 1
			icon.Image = iconId
			icon.Name = 'AAIcon'
			icon.AnchorPoint = Vector2.new(0,0.5)
			icon.Size = UDim2.new(0, 20, 0, 14)
			icon.Position = UDim2.new(0, 8, 0.5, 0)
			icon.LayoutOrder = 1
			icon.Parent = container
			container:GetChildren()[1].Position = UDim2.fromOffset(35, 0)
		end
		
		local holder, pill = Inputs.stepper.make(theme, 35, step or 0.1, min or -1e9, max or 1e9, true)
		holder.Parent = area
		local data = DM.StampsGetCategory(catName)
		pill.Text = tostring(data[key] or 0)
		pill.Size = UDim2.new(0, 45, 1, 0)
		pill.Position = UDim2.new(0, 10, 0, 0)	
		pill.LayoutOrder = 2
		pill.FocusLost:Connect(function()
			local v = tonumber(pill.Text) or data[key] or 0
			DM.StampsSetCategoryPath(catName, {key}, v)
			pill.Text = tostring(DM.StampsGetCategory(catName)[key] or 0)
		end)
	end
	rowNumber("Altitude", "altitude", 0.1, 0, 999999, 1, 'rbxassetid://122279177826154')
	rowNumber("Slope",    "slope",    0.1, 0, 999999, 1, 'rbxassetid://106371549544932')
	rowNumber("Spacing",  "spacing",  1,   0, 999999, 1, 'rbxassetid://137270254765801')

	do
		local _, area = UI.PropertyRow(content, "Rot Axis", false)
		local d = DM.StampsGetCategory(catName)
		local rx = (d.rotAxis and d.rotAxis.X) and true or false
		local ry = (d.rotAxis and d.rotAxis.Y) and true or false
		local rz = (d.rotAxis and d.rotAxis.Z) and true or false
		local bx = Checkbox.make(theme, rx, function(v) DM.StampsSetCategoryPath(catName, {"rotAxis","X"}, v) end)
		local by = Checkbox.make(theme, ry, function(v) DM.StampsSetCategoryPath(catName, {"rotAxis","Y"}, v) end)
		local bz = Checkbox.make(theme, rz, function(v) DM.StampsSetCategoryPath(catName, {"rotAxis","Z"}, v) end)
		for _, t in ipairs({ {"X",bx}, {"Y",by}, {"Z",bz} }) do
			local lab = Instance.new("TextLabel"); lab.BackgroundTransparency=1; lab.Text=t[1]; lab.Font=Enum.Font.Gotham; lab.TextSize=13; lab.TextColor3=theme.TextSecondary; lab.Size=UDim2.fromOffset(10,22)
			lab.Parent = area; t[2].Parent = area
		end
	end
	do
		local _, area = UI.PropertyRow(content, "Max Deg")
		local d = DM.StampsGetCategory(catName)
		for _, ax in ipairs({"X","Y","Z"}) do
			local holder, tb = Inputs.stepper.make(theme, 35, 1, 0, 359)
			holder.Parent = area
			tb.Size = UDim2.new(0, 45, 1, 0)
			tb.Position = UDim2.new(0, 10, 0, 0)			
			tb.Text = tostring(((d.maxDeg or {})[ax]) or 0)
			tb.FocusLost:Connect(function()
				local v = tonumber(tb.Text) or 0
				DM.StampsSetCategoryPath(catName, {"maxDeg", ax}, v)
				tb.Text = tostring((DM.StampsGetCategory(catName).maxDeg or {})[ax] or 0)
			end)
		end
	end

	do
		local row = Instance.new("Frame"); row.Name="Row_Align"; row.BackgroundTransparency=1; row.Size=UDim2.new(1,0,0,30); row.Parent=content
		local lab = Inputs.label.make(theme, "Align to normal", 132); lab.Parent = row
		local fields = Instance.new("Frame"); fields.BackgroundTransparency=1; fields.Position=UDim2.new(0,140,0,0); fields.Size=UDim2.new(1,-148,1,0); fields.Parent=row
		local chk = (DM.StampsGetCategory(catName).alignToNormal==true)
		local box = Checkbox.make(theme, chk, function(v) DM.StampsSetCategoryPath(catName, {"alignToNormal"}, v) end)
		box.AnchorPoint = Vector2.new(1,0); box.Position = UDim2.new(1,0,0,0); box.Parent = fields
	end

	do
		local row = Instance.new("Frame")
		row.Name="Row_SelfOverlap"
		row.BackgroundTransparency=1
		row.Size=UDim2.new(1,0,0,30)
		row.Parent=content

		local lab = Inputs.label.make(theme, "Self Overlap", 132)
		lab.Parent = row

		local fields = Instance.new("Frame")
		fields.BackgroundTransparency=1
		fields.Position=UDim2.new(0,140,0,0)
		fields.Size=UDim2.new(1,-148,1,0)
		fields.Parent=row

		local chk = (DM.StampsGetCategory(catName).selfOverlap==true)
		local box = Checkbox.make(theme, chk, function(v) DM.StampsSetCategoryPath(catName, {"selfOverlap"}, v) end)
		box.AnchorPoint = Vector2.new(1,0)
		box.Position = UDim2.new(1,0,0,0)
		box.Parent = fields
	end

	-- Avoid footprint
	rowNumber("Avoid footprint", "avoidFootprint", 1, 0, 999999)

	-- Avoid Categories
	do
		local bar = Instance.new("TextButton")
		bar.BackgroundColor3 = theme.ControlBgHover
		bar.BorderSizePixel = 0
		bar.Text = ""
		bar.Size = UDim2.new(1, -8, 0, 32)
		bar.Parent = content
		Corners.make(bar, 6)

		local barLab = Instance.new("TextLabel")
		barLab.BackgroundTransparency = 1
		barLab.Text = "Avoid Categories"
		barLab.Font = Enum.Font.GothamMedium
		barLab.TextSize = 13
		barLab.TextColor3 = theme.ControlText
		barLab.TextXAlignment = Enum.TextXAlignment.Left
		barLab.Position = UDim2.fromOffset(35, 0)
		barLab.Size = UDim2.new(1, -36, 1, 0)
		barLab.Parent = bar

		local addBtn = Instance.new("TextButton")
		addBtn.Size = UDim2.fromOffset(20,20)
		addBtn.AnchorPoint = Vector2.new(0,0.5)
		addBtn.Position = UDim2.new(0, 8, 0.5, 0)
		addBtn.BackgroundColor3 = Color3.fromRGB(0,169,248)
		addBtn.AutoButtonColor = true
		addBtn.Text = "+"
		addBtn.Font = Enum.Font.GothamBold
		addBtn.TextSize = 16
		addBtn.TextColor3 = Color3.fromRGB(20,20,20)
		addBtn.Parent = bar
		Corners.make(addBtn, 5)

		local chevron = Instance.new("TextButton")
		chevron.Name = "Chevron"
		chevron.BackgroundTransparency = 1
		chevron.AutoButtonColor = false
		chevron.Text = "▲"
		chevron.Font = Enum.Font.Gotham
		chevron.TextSize = 18
		chevron.TextColor3 = Color3.new(0.909804, 0.909804, 0.909804)
		chevron.AnchorPoint = Vector2.new(1, 0.5)
		chevron.Position = UDim2.new(1, -8, 0.5, 0)
		chevron.Size = UDim2.fromOffset(20, 20)
		chevron.ZIndex = 3
		chevron.Parent = bar

		local holder = Instance.new("ScrollingFrame")
		holder.Name = "AvoidCategoriesScroll"
		holder.BackgroundTransparency = 1
		holder.ScrollBarThickness = 3
		holder.Size = UDim2.new(1, 0, 0, 150)
		holder.ScrollBarImageColor3 = Color3.fromRGB(190,196,206)
		holder.CanvasSize = UDim2.new(0,0,0,0)
		holder.AutomaticCanvasSize = Enum.AutomaticSize.Y
		holder.ScrollBarImageColor3 = Color3.fromRGB(57, 62, 72)
		holder.ZIndex = 1010
		holder.Visible = false
		holder.Parent = content
		
		local list = Instance.new("UIListLayout")
		list.Padding = UDim.new(0, 6)
		list.Parent = holder

		local function resizeAvoid()
			local contentH = list.AbsoluteContentSize.Y
			local h = math.min(150, contentH)
			holder.Size = UDim2.new(1, 0, 0, h)
			holder.Visible = h > 0
			
			chevron.Text = if h > 0 then '▼' else '▲'
		end
		list:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(resizeAvoid)
		task.defer(resizeAvoid)

		local function rowFor(i, name)
			local row = Instance.new("Frame")
			row.BackgroundColor3 = theme.ControlBg
			row.BorderSizePixel = 0
			row.Size = UDim2.new(1,-8,0,30)
			row.Parent = holder
			Corners.make(row,6); 
			Strokes.make(row, theme.ControlBorder, 1)

			local title = Instance.new("TextLabel")
			title.BackgroundTransparency = 1
			title.TextXAlignment = Enum.TextXAlignment.Left
			title.Font = Enum.Font.Gotham
			title.TextSize = 13
			title.TextColor3 = theme.ControlText
			title.Text = name ~= "" and name or "Pick category…"
			title.Position = UDim2.fromOffset(10,0)
			title.Size = UDim2.new(1, -80, 1, 0)
			title.Parent = row

			local del = Instance.new("TextButton")
			del.Size = UDim2.fromOffset(20,20)
			del.AnchorPoint = Vector2.new(1,0.5); del.Position = UDim2.new(1,-6,0.5,0)
			del.BackgroundColor3 = Color3.fromRGB(232,58,68)
			del.AutoButtonColor = false
			del.Text = "–"; del.Font = Enum.Font.GothamBold; del.TextSize = 14; del.TextColor3 = Color3.new(1,1,1)
			del.Parent = row
			Corners.make(del,4)

			title.InputBegan:Connect(function(inp)
				if inp.UserInputType == Enum.UserInputType.MouseButton1 and inp.UserInputState == Enum.UserInputState.Begin and inp.ClickCount == 2 then
					local dd = self.UI.ToolbarDropdown({ Width = 220, Height = 26, Text = title.Text })
					dd.Position = UDim2.fromOffset(8, 2); dd.Parent = row
					local others = {}
					for _, n in ipairs(DM.StampsListCategories()) do if n ~= catName then table.insert(others, n) end end
					self.UI.BuildDropdownList(dd, others, function(pick)
						local exists = false
						for _, old in ipairs(DM.StampsGetCategory(catName).avoid or {}) do
							if old == pick then exists = true break end
						end
						if not exists then
							DM.StampsSetCategoryPath(catName, {"avoid", i}, pick)
							title.Text = pick
						end
						self.UI.SetDropdownOpen(dd, false); dd:Destroy()
					end)
					self.UI.SetDropdownOpen(dd, true)
				end
			end)
			del.MouseButton1Click:Connect(function()
				ModalConfirm.Show(row:FindFirstAncestor("Root"), {
					title = "Remove Avoid",
					message = "Remove this avoid category?",
					okText = "Remove",
					primaryIsDestructive = true,
					onConfirm = function()
						DM.StampsRemoveAvoid(catName, i)
						row:Destroy()
					end
				})
			end)
		end

		local d = DM.StampsGetCategory(catName)
		for i, nm in ipairs(d.avoid or {}) do rowFor(i, nm) end

		addBtn.MouseButton1Click:Connect(function()
			local idx = ( #(DM.StampsGetCategory(catName).avoid or {}) ) + 1
			DM.StampsSetCategoryPath(catName, {"avoid", idx}, "")
			rowFor(idx, "")
		end)
		
		bar.MouseButton1Click:Connect(function() 
			if holder.Visible == true then
				holder.Visible = false
				chevron.Text = "▲"
			else
				holder.Visible = true
				chevron.Text = "▼"
			end
		end)

		chevron.MouseButton1Click:Connect(function() 
			if holder.Visible == true then
				holder.Visible = false
				chevron.Text = "▲"
			else
				holder.Visible = true
				chevron.Text = "▼"
			end
		end)		
	end

	-- Models list
	do
		local bar = Instance.new("TextButton")
		bar.BackgroundColor3 = theme.ControlBgHover
		bar.BorderSizePixel = 0
		bar.Text = ""
		bar.Size = UDim2.new(1, -8, 0, 32)
		bar.Parent = content
		Corners.make(bar, 6)

		local barLab = Instance.new("TextLabel")
		barLab.BackgroundTransparency = 1
		barLab.Text = "Models"
		barLab.Font = Enum.Font.GothamMedium
		barLab.TextSize = 13
		barLab.TextColor3 = theme.ControlText
		barLab.TextXAlignment = Enum.TextXAlignment.Left
		barLab.Position = UDim2.fromOffset(35, 0)
		barLab.Size = UDim2.new(1, -36, 1, 0)
		barLab.Parent = bar

		local addBtn = Instance.new("TextButton")
		addBtn.Size = UDim2.fromOffset(20,20)
		addBtn.AnchorPoint = Vector2.new(0,0.5)
		addBtn.Position = UDim2.new(0, 8, 0.5, 0)
		addBtn.BackgroundColor3 = Color3.fromRGB(0,169,248)
		addBtn.AutoButtonColor = true
		addBtn.Text = "+"
		addBtn.Font = Enum.Font.GothamBold
		addBtn.TextSize = 16
		addBtn.TextColor3 = Color3.fromRGB(20,20,20)
		addBtn.Parent = bar
		Corners.make(addBtn, 5)

		local chevron = Instance.new("TextButton")
		chevron.Name = "Chevron"
		chevron.BackgroundTransparency = 1
		chevron.AutoButtonColor = false
		chevron.Text = "▲"
		chevron.Font = Enum.Font.Gotham
		chevron.TextSize = 18
		chevron.TextColor3 = Color3.new(0.909804, 0.909804, 0.909804)
		chevron.AnchorPoint = Vector2.new(1, 0.5)
		chevron.Position = UDim2.new(1, -8, 0.5, 0)
		chevron.Size = UDim2.fromOffset(20, 20)
		chevron.ZIndex = 3
		chevron.Parent = bar

		local wrap = Instance.new("ScrollingFrame")
		wrap.Name = "ModelsScroll"
		wrap.BackgroundTransparency = 1
		wrap.ScrollBarThickness = 3
		wrap.ScrollBarImageColor3 = Color3.fromRGB(190,196,206)
		wrap.CanvasSize = UDim2.new(0,0,0,0)
		wrap.AutomaticCanvasSize = Enum.AutomaticSize.Y
		wrap.ScrollBarImageColor3 = Color3.fromRGB(57, 62, 72)
		wrap.Size = UDim2.new(1, 0, 0, 150)
		wrap.ZIndex = 1010
		wrap.Visible = false
		wrap.Parent = content
		
		local list = Instance.new("UIListLayout")
		list.Padding = UDim.new(0, 6)
		list.Parent = wrap

		local function resizeModels()
			local contentH = list.AbsoluteContentSize.Y
			local h = math.min(150, contentH)
			wrap.Size = UDim2.new(1, 0, 0, h)
			wrap.Visible = h > 0
			chevron.Text = if h > 0 then '▼' else '▲'
		end
		list:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(resizeModels)
		task.defer(resizeModels)

		local Selection = game:GetService("Selection")
		local function addModelRow(idx, entry)
			entry = entry or { name = "Please pick model", ref = "" }
			local row = Instance.new("Frame")
			row.BackgroundColor3 = theme.ControlBg
			row.BorderSizePixel = 0
			row.Size = UDim2.new(1, -8, 0, 36)
			row.Parent = wrap
			Corners.make(row, 6); 
			Strokes.make(row, theme.ControlBorder, 1)

			local del = Instance.new("TextButton")
			del.Size = UDim2.fromOffset(20,20)
			del.Position = UDim2.fromOffset(6,8)
			del.BackgroundColor3 = Color3.fromRGB(232,58,68)
			del.AutoButtonColor = false
			del.Text = "–"; del.Font = Enum.Font.GothamBold; del.TextSize = 14; del.TextColor3 = Color3.new(1,1,1)
			del.Parent = row; 
			Corners.make(del,4)

			local title = Instance.new("TextLabel")
			title.BackgroundTransparency = 1
			title.TextXAlignment = Enum.TextXAlignment.Left
			title.Font = Enum.Font.Gotham
			title.TextSize = 13
			title.TextColor3 = theme.ControlText
			title.Text = entry.name or "Please pick model"
			title.Position = UDim2.fromOffset(36, 0)
			title.Size = UDim2.new(1, -220, 1, 0)
			title.Parent = row

			local pick = Instance.new("TextButton")
			pick.Size = UDim2.new(0, 25, 0, 24)
			pick.AnchorPoint = Vector2.new(1,0.5); pick.Position = UDim2.new(1, -10, 0.5, 0)
			pick.BackgroundColor3 = theme.ControlBgActive
			pick.AutoButtonColor = true
			pick.Text = "..."
			pick.Font = Enum.Font.Gotham; pick.TextSize = 12; pick.TextColor3 = theme.ControlText
			pick.Parent = row
			Corners.make(pick, 6); 
			Strokes.make(pick, theme.ControlBorder, 1)
			
			local pickObjectValue = Instance.new("ObjectValue")
			pickObjectValue.Parent = pick
			
			pick.MouseButton1Click:Connect(function()
				ObjectPicker.Show(pick, pickObjectValue, {"Model"})
			end)

			del.MouseButton1Click:Connect(function()
				ModalConfirm.Show(row:FindFirstAncestor("Root"), {
					title = "Remove Model",
					message = "Remove this model entry?",
					okText = "Remove",
					primaryIsDestructive = true,
					onConfirm = function()
						DM.StampsRemoveModel(catName, idx)
						row:Destroy()
					end
				})
			end)
		end

		local d = DM.StampsGetCategory(catName)
		for i, m in ipairs(d.models or {}) do addModelRow(i, m) end

		addBtn.MouseButton1Click:Connect(function()
			local idx = #(DM.StampsGetCategory(catName).models or {}) + 1
			DM.StampsSetCategoryPath(catName, {"models", idx}, { name = "Please pick model", ref = "" })
			addModelRow(idx, { name = "Please pick model", ref = "" })
		end)
		
		bar.MouseButton1Click:Connect(function() 
			if wrap.Visible == true then
				wrap.Visible = false
				chevron.Text = "▲"
			else
				wrap.Visible = true
				chevron.Text = "▼"
			end
		end)

		chevron.MouseButton1Click:Connect(function() 
			if wrap.Visible == true then
				wrap.Visible = false
				chevron.Text = "▲"
			else
				wrap.Visible = true
				chevron.Text = "▼"
			end
		end)		
	end
end

function StampsProps:_refreshCategoryCard(card, catName, theme)
	-- placeholder for future fine-grained updates
end

return StampsProps
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
		</Item>
	</Item>
</roblox>